import 'isomorphic-fetch';
import WS from 'isomorphic-ws';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

/**
 * Format query parameters into a URL string for the API call
 * @param q QueryParams object
 */
function formatParams(q) {
  if (!q) {
    return "";
  }

  var result = {};

  function recurse(cur, prop) {
    if (Object(cur) !== cur) {
      result[prop] = cur;
    } else if (Array.isArray(cur)) {
      result[prop] = cur.join(",");
    } else {
      var isEmpty = true;

      for (var p in cur) {
        if (!cur.hasOwnProperty(p)) {
          continue;
        }

        isEmpty = false;
        recurse(cur[p], prop ? prop + "[" + p + "]" : p);
      }

      if (isEmpty && prop) {
        result[prop] = {};
      }
    }
  }

  recurse(q, "");
  return Object.keys(result).map(function (k) {
    return encodeURIComponent(k) + "=" + encodeURIComponent(result[k]);
  }).join("&");
}

var VERSION = "v1";

/** Standard settings for API call */

var ApiRequestInit = {
  method: "GET",
  headers: /*#__PURE__*/new Headers({
    Accept: "application/json",
    "Content-Type": "application/json"
  }),
  mode: "cors",
  credentials: "omit",
  cache: "no-cache"
};
/** Take a settings bag and turn it into a valid API URL endpoint */

function makeUrl(settings, websocket) {
  var secure = true;
  var version = "/" + VERSION;

  if (settings && settings.noVersion) {
    version = "";
  }

  if (settings && settings.useHttp) {
    secure = false;
  }

  if (settings && settings.url && settings.url.indexOf("://") > -1) {
    return settings.url;
  }

  var prefix = websocket ? "ws" + (secure ? "s" : "") + "://" : "http" + (secure ? "s" : "") + "://";

  if (settings && settings.url) {
    return "" + prefix + settings.url + version;
  } // Default URL returned. Version will be updated here if changed


  return prefix + "api.cycle.io" + version;
}
/** Make the request */

function makeRequest(_x, _x2, _x3, _x4) {
  return _makeRequest.apply(this, arguments);
}

function _makeRequest() {
  _makeRequest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(req, token, hubId, settings) {
    var resp, error, result;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (token) {
              req.headers.append("Authorization", "Bearer " + (typeof token === "string" ? token : token.token));
            }

            if (hubId) {
              req.headers.append("X-Hub-Id", hubId);
            }

            _context.prev = 2;
            _context.next = 5;
            return fetch(req, {
              signal: settings && settings.signal
            });

          case 5:
            resp = _context.sent;

            if (resp.ok) {
              _context.next = 11;
              break;
            }

            _context.next = 9;
            return resp.json();

          case 9:
            error = _context.sent;
            return _context.abrupt("return", {
              ok: false,
              error: error.error
            });

          case 11:
            _context.prev = 11;
            _context.next = 14;
            return resp.json();

          case 14:
            result = _context.sent;
            return _context.abrupt("return", {
              ok: true,
              value: result
            });

          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](11);
            return _context.abrupt("return", {
              ok: false,
              error: {
                status: 0,
                title: "Error parsing response",
                detail: "API returned a non-JSON response",
                code: "0.parse_error"
              }
            });

          case 21:
            _context.next = 26;
            break;

          case 23:
            _context.prev = 23;
            _context.t1 = _context["catch"](2);
            return _context.abrupt("return", {
              ok: false,
              error: {
                status: 0,
                title: "Unable to reach server",
                detail: "There was an error attempting to fetch data from server.",
                code: "0.network_error"
              }
            });

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 23], [11, 18]]);
  }));
  return _makeRequest.apply(this, arguments);
}

function getRequest(_x5) {
  return _getRequest.apply(this, arguments);
}

function _getRequest() {
  _getRequest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref) {
    var target, _ref$query, query, token, hubId, settings, req;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            target = _ref.target, _ref$query = _ref.query, query = _ref$query === void 0 ? {} : _ref$query, token = _ref.token, hubId = _ref.hubId, settings = _ref.settings;
            req = new Request("" + makeUrl(settings) + target + "?" + formatParams(query), _extends({}, ApiRequestInit, {
              credentials: settings && settings.credentials ? settings.credentials : undefined
            }));
            return _context2.abrupt("return", makeRequest(req, token, hubId, settings));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getRequest.apply(this, arguments);
}

function postRequest(_x6) {
  return _postRequest.apply(this, arguments);
}

function _postRequest() {
  _postRequest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_ref2) {
    var target, value, _ref2$query, query, token, hubId, settings, req;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            target = _ref2.target, value = _ref2.value, _ref2$query = _ref2.query, query = _ref2$query === void 0 ? {} : _ref2$query, token = _ref2.token, hubId = _ref2.hubId, settings = _ref2.settings;
            req = new Request("" + makeUrl(settings) + target + "?" + formatParams(query), _extends({}, ApiRequestInit, {
              method: "POST",
              body: JSON.stringify(value),
              credentials: settings && settings.credentials ? settings.credentials : undefined
            }));
            return _context3.abrupt("return", makeRequest(req, token, hubId, settings));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _postRequest.apply(this, arguments);
}

function patchRequest(_x7) {
  return _patchRequest.apply(this, arguments);
}

function _patchRequest() {
  _patchRequest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(_ref3) {
    var target, value, _ref3$query, query, hubId, token, settings, req;

    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            target = _ref3.target, value = _ref3.value, _ref3$query = _ref3.query, query = _ref3$query === void 0 ? {} : _ref3$query, hubId = _ref3.hubId, token = _ref3.token, settings = _ref3.settings;
            req = new Request("" + makeUrl(settings) + target + "?" + formatParams(query), _extends({}, ApiRequestInit, {
              method: "PATCH",
              body: JSON.stringify(value),
              credentials: settings && settings.credentials ? settings.credentials : undefined
            }));
            return _context4.abrupt("return", makeRequest(req, token, hubId, settings));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _patchRequest.apply(this, arguments);
}

function deleteRequest(_x8) {
  return _deleteRequest.apply(this, arguments);
}

function _deleteRequest() {
  _deleteRequest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(_ref4) {
    var target, _ref4$query, query, token, value, hubId, settings, req;

    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            target = _ref4.target, _ref4$query = _ref4.query, query = _ref4$query === void 0 ? {} : _ref4$query, token = _ref4.token, value = _ref4.value, hubId = _ref4.hubId, settings = _ref4.settings;
            req = new Request("" + makeUrl(settings) + target + "?" + formatParams(query), _extends({}, ApiRequestInit, {
              method: "DELETE",
              body: value ? JSON.stringify(value) : undefined,
              credentials: settings && settings.credentials ? settings.credentials : undefined
            }));
            return _context5.abrupt("return", makeRequest(req, token, hubId, settings));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _deleteRequest.apply(this, arguments);
}

var request = {
  __proto__: null,
  ApiRequestInit: ApiRequestInit,
  makeUrl: makeUrl,
  getRequest: getRequest,
  postRequest: postRequest,
  patchRequest: patchRequest,
  deleteRequest: deleteRequest
};



var error = {
  __proto__: null
};

/**
 * All possible endpoints of Cycle's API
 */
var links = {
  // Account
  account: function account() {
    return {
      single: function single() {
        return "/account";
      },
      invites: function invites() {
        return {
          collection: function collection() {
            return "/account/invites";
          },
          invite: function invite(id) {
            return "/account/invites/" + id;
          }
        };
      },
      memberships: function memberships() {
        return "/account/memberships";
      },
      logins: function logins() {
        return "/account/logins";
      }
    };
  },
  // Announcements
  announcements: function announcements() {
    return {
      collection: function collection() {
        return "/announcements";
      }
    };
  },
  // Audit
  audit: function audit() {
    return {
      entries: function entries() {
        return "/audit/entries";
      }
    };
  },
  // Billing
  billing: function billing() {
    return {
      orders: function orders() {
        return {
          collection: function collection() {
            return "/billing/orders";
          },
          single: function single(id) {
            return "/billing/orders/" + id;
          },
          tasks: function tasks(id) {
            return "/billing/orders/" + id + "/tasks";
          }
        };
      },
      plans: function plans() {
        return {
          support: function support() {
            return "/billing/plans/support";
          },
          tiers: function tiers() {
            return "/billing/plans/tiers";
          }
        };
      },
      methods: function methods() {
        return {
          collection: function collection() {
            return "/billing/methods";
          },
          single: function single(id) {
            return "/billing/methods/" + id;
          }
        };
      },
      invoices: function invoices() {
        return {
          collection: function collection() {
            return "/billing/invoices";
          },
          single: function single(id) {
            return "/billing/invoices/" + id;
          },
          tasks: function tasks(id) {
            return "/billing/invoices/" + id + "/tasks";
          }
        };
      },
      services: function services() {
        return {
          collection: function collection() {
            return "/billing/services";
          },
          single: function single(id) {
            return "/billing/services/" + id;
          },
          overage: function overage() {
            return "/billing/services/overages";
          }
        };
      },
      credits: function credits() {
        return {
          collection: function collection() {
            return "/billing/credits";
          },
          single: function single(id) {
            return "/billing/credits/" + id;
          }
        };
      }
    };
  },
  // Changelog
  changelog: function changelog() {
    return {
      single: function single(id) {
        return "/changelogs/" + id;
      },
      collection: function collection() {
        return "/changelogs";
      },
      tasks: function tasks(id) {
        return "/changelogs/" + id + "/tasks";
      }
    };
  },
  // Notification Channels
  channels: function channels() {
    return {
      account: function account() {
        return "/account/notifications";
      },
      hub: function hub() {
        return "/hubs/current/notifications";
      }
    };
  },
  // Containers
  containers: function containers() {
    return {
      collection: function collection() {
        return "/containers";
      },
      single: function single(id) {
        return "/containers/" + id;
      },
      tasks: function tasks(id) {
        return "/containers/" + id + "/tasks";
      },
      servers: function servers(id) {
        return {
          list: function list() {
            return "/containers/" + id + "/servers";
          },
          usable: function usable() {
            return "/containers/" + id + "/servers/usable";
          }
        };
      },
      events: function events(id) {
        return "/containers/" + id + "/events";
      },
      summary: function summary(id) {
        return "/containers/" + id + "/summary";
      },
      compatibleImages: function compatibleImages(id) {
        return "/containers/" + id + "/compatible-images";
      },
      instances: function instances() {
        return {
          collection: function collection(container) {
            return "/containers/" + container + "/instances";
          },
          single: function single(id, container) {
            return "/containers/" + container + "/instances/" + id;
          },
          console: function console(id, container) {
            return "/containers/" + container + "/instances/" + id + "/console";
          },
          ssh: function ssh(instance, container) {
            return "/containers/" + container + "/instances/" + instance + "/ssh";
          },
          volumes: function volumes(id, container) {
            return "/containers/" + container + "/instances/" + id + "/volumes";
          },
          tasks: function tasks(id, container) {
            return "/containers/" + container + "/instances/" + id + "/tasks";
          },
          telemetry: function telemetry() {
            return {
              resourcesReport: function resourcesReport(id, container) {
                return "/containers/" + container + "/instances/" + id + "/telemetry/resources/report";
              },
              resourcesStream: function resourcesStream(id, container) {
                return "/containers/" + container + "/instances/" + id + "/telemetry/resources/stream";
              }
            };
          }
        };
      },
      volumes: function volumes() {
        return {
          accounts: function accounts(container) {
            return "/containers/" + container + "/volumes/accounts";
          },
          account: function account(id, container) {
            return "/containers/" + container + "/volumes/accounts/" + id;
          }
        };
      },
      telemetry: function telemetry() {
        return {
          instances: function instances(id) {
            return "/containers/" + id + "/telemetry/instances";
          }
        };
      }
    };
  },
  // DNS
  dns: function dns() {
    return {
      zones: function zones() {
        return {
          collection: function collection() {
            return "/dns/zones";
          },
          single: function single(id) {
            return "/dns/zones/" + id;
          },
          tasks: function tasks(id) {
            return "/dns/zones/" + id + "/tasks";
          },
          records: function records(id) {
            return "/dns/zones/" + id + "/records";
          },
          record: function record(zoneId, id) {
            return "/dns/zones/" + zoneId + "/records/" + id;
          },
          recordTasks: function recordTasks(zoneId, id) {
            return "/dns/zones/" + zoneId + "/records/" + id + "/tasks";
          }
        };
      },
      domains: function domains() {
        return {
          collection: function collection() {
            return "/dns/domains";
          }
        };
      },
      tls: function tls() {
        return {
          collection: function collection() {
            return "/dns/tls/attempts";
          }
        };
      }
    };
  },
  // Environments
  environments: function environments() {
    return {
      collection: function collection() {
        return "/environments";
      },
      single: function single(id) {
        return "/environments/" + id;
      },
      events: function events(id) {
        return "/environments/" + id + "/events";
      },
      summary: function summary(id) {
        return "/environments/" + id + "/summary";
      },
      tasks: function tasks(id) {
        return "/environments/" + id + "/tasks";
      },
      services: function services() {
        return {
          lb: function lb() {
            return {
              info: function info(environment) {
                return "/environments/" + environment + "/services/lb";
              },
              tasks: function tasks(environment) {
                return "/environments/" + environment + "/services/lb/tasks";
              }
            };
          },
          vpn: function vpn() {
            return {
              details: function details(environment) {
                return "/environments/" + environment + "/services/vpn";
              },
              users: function users(environment) {
                return "/environments/" + environment + "/services/vpn/users";
              },
              user: function user(environment, _user) {
                return "/environments/" + environment + "/services/vpn/users/" + _user;
              },
              tasks: function tasks(environment) {
                return "/environments/" + environment + "/services/vpn/tasks";
              },
              logins: function logins(environment) {
                return "/environments/" + environment + "/services/vpn/logins";
              }
            };
          },
          discovery: function discovery() {
            return {
              tasks: function tasks(environment) {
                return "/environments/" + environment + "/services/discovery/tasks";
              }
            };
          }
        };
      },
      telemetry: function telemetry() {
        return {
          instances: function instances(id) {
            return "/environments/" + id + "/telemetry/instances";
          }
        };
      },
      scopedVariables: function scopedVariables(environment) {
        return {
          collection: function collection() {
            return "/environments/" + environment + "/scoped-variables";
          },
          single: function single(scopedVariableId) {
            return "/environments/" + environment + "/scoped-variables/" + scopedVariableId;
          }
        };
      }
    };
  },
  // Hubs
  hubs: function hubs() {
    return {
      collection: function collection() {
        return "/hubs";
      },
      single: function single() {
        return "/hubs/current";
      },
      tasks: function tasks() {
        return "/hubs/current/tasks";
      },
      activity: function activity() {
        return "/hubs/current/activity";
      },
      capabilities: function capabilities() {
        return "/hubs/capabilities";
      },
      tier: function tier() {
        return "/hubs/current/tier";
      },
      invites: function invites() {
        return {
          single: function single(id) {
            return "/hubs/current/invites/" + id;
          },
          collection: function collection() {
            return "/hubs/current/invites";
          }
        };
      },
      members: function members() {
        return {
          collection: function collection() {
            return "/hubs/current/members";
          },
          membership: function membership() {
            return "/hubs/current/membership";
          },
          single: function single(id) {
            return "/hubs/current/members/" + id;
          },
          account: function account(id) {
            return "/hubs/current/members/account/" + id;
          }
        };
      },
      keys: function keys() {
        return {
          collection: function collection() {
            return "/hubs/current/api-keys";
          },
          single: function single(id) {
            return "/hubs/current/api-keys/" + id;
          }
        };
      }
    };
  },
  // Images
  images: function images() {
    return {
      collection: function collection() {
        return "/images";
      },
      single: function single(id) {
        return "/images/" + id;
      },
      containers: function containers(id) {
        return "/images/" + id + "/containers";
      },
      buildLog: function buildLog(id) {
        return "/images/" + id + "/build-log";
      },
      collectionTasks: function collectionTasks() {
        return "/images/tasks";
      },
      imageTasks: function imageTasks(id) {
        return "/images/" + id + "/tasks";
      },
      sources: function sources() {
        return {
          collection: function collection() {
            return "/images/sources";
          },
          single: function single(id) {
            return "/images/sources/" + id;
          },
          tasks: function tasks(id) {
            return "/images/sources/" + id + "/tasks";
          }
        };
      }
    };
  },
  // Infrastructure
  infrastructure: function infrastructure() {
    return {
      summary: function summary() {
        return "/infrastructure/summary";
      },
      servers: function servers() {
        return {
          collection: function collection() {
            return "/infrastructure/servers";
          },
          single: function single(id) {
            return "/infrastructure/servers/" + id;
          },
          console: function console(id) {
            return "/infrastructure/servers/" + id + "/console";
          },
          telemetry: function telemetry(id) {
            return "/infrastructure/servers/" + id + "/telemetry";
          },
          instances: function instances(id) {
            return "/infrastructure/servers/" + id + "/instances";
          },
          tasks: function tasks(id) {
            return "/infrastructure/servers/" + id + "/tasks";
          },
          tags: function tags() {
            return "/infrastructure/servers/tags";
          },
          clusters: function clusters() {
            return "/infrastructure/servers/clusters";
          },
          usage: function usage() {
            return "/infrastructure/servers/usage";
          }
        };
      },
      providers: function providers() {
        return {
          collection: function collection() {
            return "/infrastructure/providers";
          },
          servers: function servers(provider) {
            return "/infrastructure/providers/" + provider + "/servers";
          },
          locations: function locations(provider) {
            return "/infrastructure/providers/" + provider + "/locations";
          },
          features: function features() {
            return "/infrastructure/locations/features";
          }
        };
      },
      ips: function ips() {
        return {
          pools: function pools() {
            return {
              collection: function collection() {
                return "/infrastructure/ips/pools";
              },
              single: function single(id) {
                return "/infrastructure/ips/pools/" + id;
              },
              ips: function ips(id) {
                return "/infrastructure/ips/pools/" + id + "/ips";
              }
            };
          }
        };
      },
      strategies: function strategies() {
        return "/infrastructure/deployment-strategies";
      }
    };
  },
  // Jobs
  jobs: function jobs() {
    return {
      collection: function collection() {
        return "/jobs";
      },
      single: function single(id) {
        return "/jobs/" + id;
      },
      latest: function latest() {
        return "/jobs/latest";
      }
    };
  },
  // SDN
  sdn: function sdn() {
    return {
      networks: function networks() {
        return {
          collection: function collection() {
            return "/sdn/networks";
          },
          single: function single(id) {
            return "/sdn/networks/" + id;
          },
          tasks: function tasks(id) {
            return "/sdn/networks/" + id + "/tasks";
          }
        };
      }
    };
  },
  // Stacks
  stacks: function stacks() {
    return {
      collection: function collection() {
        return "/stacks";
      },
      single: function single(id) {
        return "/stacks/" + id;
      },
      tasks: function tasks(id) {
        return "/stacks/" + id + "/tasks";
      },
      buildLookup: function buildLookup(build) {
        return "/stacks/builds/" + build;
      },
      builds: function builds(stack) {
        return {
          collection: function collection() {
            return "/stacks/" + stack + "/builds";
          },
          single: function single(id) {
            return "/stacks/" + stack + "/builds/" + id;
          },
          tasks: function tasks(id) {
            return "/stacks/" + stack + "/builds/" + id + "/tasks";
          }
        };
      }
    };
  },
  // Pipelines
  pipelines: function pipelines() {
    return {
      collection: function collection() {
        return "/pipelines";
      },
      single: function single(id) {
        return "/pipelines/" + id;
      },
      runs: function runs(id) {
        return "/pipelines/" + id + "/runs";
      },
      tasks: function tasks(id) {
        return "/pipelines/" + id + "/tasks";
      },
      trigger: function trigger(id) {
        return "/pipelines/" + id + "/trigger";
      },
      keys: function keys(pipeline) {
        return {
          collection: function collection() {
            return "/pipelines/" + pipeline + "/keys";
          },
          single: function single(key) {
            return "/pipelines/" + pipeline + "/keys/" + key;
          }
        };
      }
    };
  },
  // Surveys
  surveys: function surveys() {
    return {
      single: function single(id) {
        return "/survey/" + id;
      },
      response: function response(id) {
        return "/survey/" + id + "/response";
      }
    };
  }
};

var links$1 = {
  __proto__: null,
  links: links
};

function connectToSocket(_x) {
  return _connectToSocket.apply(this, arguments);
}

function _connectToSocket() {
  _connectToSocket = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var target, token, settings, onMessage, noJsonDecode, ws;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target = _ref.target, token = _ref.token, settings = _ref.settings, onMessage = _ref.onMessage, noJsonDecode = _ref.noJsonDecode;
            _context.prev = 1;
            ws = new WS("" + makeUrl(settings, true) + target + "?token=" + token);
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](1);
            return _context.abrupt("return", {
              ok: false,
              error: {
                code: "0.network_error",
                title: _context.t0.reason
              }
            });

          case 8:
            if (onMessage) {
              // @ts-ignore
              ws.onmessage = function (e) {
                var payload = noJsonDecode ? e.data : JSON.parse(e.data);
                onMessage(payload);
              };
            } // @ts-ignore


            return _context.abrupt("return", {
              ok: true,
              value: ws
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 5]]);
  }));
  return _connectToSocket.apply(this, arguments);
}

var websocket = {
  __proto__: null,
  connectToSocket: connectToSocket
};

function getMemberships(_x) {
  return _getMemberships.apply(this, arguments);
}

function _getMemberships() {
  _getMemberships = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.account().memberships()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getMemberships.apply(this, arguments);
}

var membership = {
  __proto__: null,
  getMemberships: getMemberships
};

function getCollection(_x) {
  return _getCollection.apply(this, arguments);
}

function _getCollection() {
  _getCollection = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.account().invites().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection.apply(this, arguments);
}

function update(_x2) {
  return _update.apply(this, arguments);
}

function _update() {
  _update = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", patchRequest(_extends({}, params, {
              target: links.account().invites().invite(params.inviteId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _update.apply(this, arguments);
}

var invite = {
  __proto__: null,
  getCollection: getCollection,
  update: update
};

function getCollection$1(_x) {
  return _getCollection$1.apply(this, arguments);
}

function _getCollection$1() {
  _getCollection$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.account().logins()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$1.apply(this, arguments);
}

var logins = {
  __proto__: null,
  getCollection: getCollection$1
};

function getSingle(_x) {
  return _getSingle.apply(this, arguments);
}

function _getSingle() {
  _getSingle = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.account().single()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSingle.apply(this, arguments);
}

function update$1(_x2) {
  return _update$1.apply(this, arguments);
}

function _update$1() {
  _update$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", patchRequest(_extends({}, params, {
              target: links.account().single()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _update$1.apply(this, arguments);
}

function remove(_x3) {
  return _remove.apply(this, arguments);
}

function _remove() {
  _remove = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.account().single()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _remove.apply(this, arguments);
}



var index = {
  __proto__: null,
  Memberships: membership,
  Invites: invite,
  Logins: logins,
  getSingle: getSingle,
  update: update$1,
  remove: remove
};

function getCollection$2(_x) {
  return _getCollection$2.apply(this, arguments);
}

function _getCollection$2() {
  _getCollection$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.announcements().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$2.apply(this, arguments);
}



var index$1 = {
  __proto__: null,
  getCollection: getCollection$2
};

var EntryComponentType;

(function (EntryComponentType) {
  EntryComponentType["ENVIRONMENT"] = "environments.Environment";
})(EntryComponentType || (EntryComponentType = {}));

var EntryCode;

(function (EntryCode) {
  EntryCode["ENVIRONMENT_CREATED"] = "environment.created";
})(EntryCode || (EntryCode = {}));

function getEntries(_x) {
  return _getEntries.apply(this, arguments);
}

function _getEntries() {
  _getEntries = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.audit().entries()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getEntries.apply(this, arguments);
}

var entry = {
  __proto__: null,
  get EntryComponentType () { return EntryComponentType; },
  get EntryCode () { return EntryCode; },
  getEntries: getEntries
};



var index$2 = {
  __proto__: null,
  Entries: entry
};

var DEFAULT_AUTH_URL = "auth.cycle.io";

/**
 * Retrieves an access code using the http-only cookie for a direct browser authentication
 */

function getBrowserAccessToken(_x) {
  return _getBrowserAccessToken.apply(this, arguments);
}
/**
 * Retrieves an access code using the server-side flow
 */

function _getBrowserAccessToken() {
  _getBrowserAccessToken = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", postRequest(_extends({}, params, {
              target: "/auth/token/browser",
              settings: _extends({}, params.settings, {
                credentials: "include",
                url: params.settings && params.settings.url ? params.settings.url : DEFAULT_AUTH_URL
              })
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getBrowserAccessToken.apply(this, arguments);
}

function getGrantAccessToken(_x2) {
  return _getGrantAccessToken.apply(this, arguments);
}

function _getGrantAccessToken() {
  _getGrantAccessToken = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: "/auth/token/grant",
              settings: _extends({}, params.settings, {
                credentials: "include",
                url: params.settings && params.settings.url ? params.settings.url : DEFAULT_AUTH_URL
              })
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getGrantAccessToken.apply(this, arguments);
}

function revokeAuth(_x3) {
  return _revokeAuth.apply(this, arguments);
}

function _revokeAuth() {
  _revokeAuth = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: "/auth/revoke",
              value: {},
              settings: _extends({}, params.settings, {
                credentials: "include",
                url: params.settings && params.settings.url ? params.settings.url : DEFAULT_AUTH_URL
              })
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _revokeAuth.apply(this, arguments);
}

/**
 * **You probably don't need this, you most likely want the clientCredentialsGrant() or to pass in an API key for your token directly**
 *
 * Make a request to the Cycle OAuth server using password grant in order to obtain an access token.
 * This will return a grant code that can be used with the getGrantAccessToken() function,
 * and an http-only cookie that can be used with the getBrowserAccessToken() function.
 *
 * @param auth The PasswordAuth object containing authorization credentials
 * @param settings Optional Settings object to control the request
 */

function passwordGrant(_x) {
  return _passwordGrant.apply(this, arguments);
}

function _passwordGrant() {
  _passwordGrant = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", postRequest(_extends({}, params, {
              target: "/auth/password",
              settings: _extends({}, params.settings, {
                credentials: "include",
                url: params.settings && params.settings.url ? params.settings.url : DEFAULT_AUTH_URL
              })
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _passwordGrant.apply(this, arguments);
}

// export * from "./client";

var index$3 = {
  __proto__: null,
  getBrowserAccessToken: getBrowserAccessToken,
  getGrantAccessToken: getGrantAccessToken,
  revokeAuth: revokeAuth,
  passwordGrant: passwordGrant
};

function getCollection$3(_x) {
  return _getCollection$3.apply(this, arguments);
}

function _getCollection$3() {
  _getCollection$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().credits().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$3.apply(this, arguments);
}

function getSingle$1(_x2) {
  return _getSingle$1.apply(this, arguments);
}

function _getSingle$1() {
  _getSingle$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().credits().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$1.apply(this, arguments);
}



var index$4 = {
  __proto__: null,
  getCollection: getCollection$3,
  getSingle: getSingle$1
};

function getCollection$4(_x) {
  return _getCollection$4.apply(this, arguments);
}

function _getCollection$4() {
  _getCollection$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().invoices().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$4.apply(this, arguments);
}

function getSingle$2(_x2) {
  return _getSingle$2.apply(this, arguments);
}

function _getSingle$2() {
  _getSingle$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().invoices().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$2.apply(this, arguments);
}

function pay(_x) {
  return _pay.apply(this, arguments);
}

function _pay() {
  _pay = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task(_extends({}, params, {
              value: {
                action: "pay"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _pay.apply(this, arguments);
}

function task(_x2) {
  return _task.apply(this, arguments);
}

function _task() {
  _task = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.billing().invoices().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task.apply(this, arguments);
}



var index$5 = {
  __proto__: null,
  getCollection: getCollection$4,
  getSingle: getSingle$2,
  pay: pay,
  task: task
};

function getCollection$5(_x) {
  return _getCollection$5.apply(this, arguments);
}

function _getCollection$5() {
  _getCollection$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().methods().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$5.apply(this, arguments);
}

function getSingle$3(_x2) {
  return _getSingle$3.apply(this, arguments);
}

function _getSingle$3() {
  _getSingle$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().methods().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$3.apply(this, arguments);
}

function create(_x3) {
  return _create.apply(this, arguments);
}

function _create() {
  _create = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.billing().methods().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create.apply(this, arguments);
}

function update$2(_x4) {
  return _update$2.apply(this, arguments);
}

function _update$2() {
  _update$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.billing().methods().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$2.apply(this, arguments);
}

function remove$1(_x) {
  return _remove$1.apply(this, arguments);
}

function _remove$1() {
  _remove$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.billing().methods().single(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _remove$1.apply(this, arguments);
}



var index$6 = {
  __proto__: null,
  getCollection: getCollection$5,
  getSingle: getSingle$3,
  create: create,
  update: update$2,
  remove: remove$1
};

function getCollection$6(_x) {
  return _getCollection$6.apply(this, arguments);
}

function _getCollection$6() {
  _getCollection$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().orders().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$6.apply(this, arguments);
}

function getSingle$4(_x2) {
  return _getSingle$4.apply(this, arguments);
}

function _getSingle$4() {
  _getSingle$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().orders().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$4.apply(this, arguments);
}

function create$1(_x3) {
  return _create$1.apply(this, arguments);
}

function _create$1() {
  _create$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.billing().orders().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$1.apply(this, arguments);
}

function update$3(_x4) {
  return _update$3.apply(this, arguments);
}

function _update$3() {
  _update$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.billing().orders().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$3.apply(this, arguments);
}

function confirm(_x) {
  return _confirm.apply(this, arguments);
}

function _confirm() {
  _confirm = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$1(_extends({}, params, {
              value: {
                action: "confirm"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _confirm.apply(this, arguments);
}

function task$1(_x2) {
  return _task$1.apply(this, arguments);
}

function _task$1() {
  _task$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.billing().orders().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$1.apply(this, arguments);
}



var index$7 = {
  __proto__: null,
  getCollection: getCollection$6,
  getSingle: getSingle$4,
  create: create$1,
  update: update$3,
  confirm: confirm,
  task: task$1
};

function getCollection$7(_x) {
  return _getCollection$7.apply(this, arguments);
}

function _getCollection$7() {
  _getCollection$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().plans().support()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$7.apply(this, arguments);
}

var support = {
  __proto__: null,
  getCollection: getCollection$7
};

function getCollection$8(_x) {
  return _getCollection$8.apply(this, arguments);
}

function _getCollection$8() {
  _getCollection$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().plans().tiers()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$8.apply(this, arguments);
}

var tiers = {
  __proto__: null,
  getCollection: getCollection$8
};



var index$8 = {
  __proto__: null,
  Support: support,
  Tiers: tiers
};

function getSingle$5(_x) {
  return _getSingle$5.apply(this, arguments);
}

function _getSingle$5() {
  _getSingle$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().services().single(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSingle$5.apply(this, arguments);
}

function getCollection$9(_x2) {
  return _getCollection$9.apply(this, arguments);
}

function _getCollection$9() {
  _getCollection$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().services().collection()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCollection$9.apply(this, arguments);
}

function getOverages(_x) {
  return _getOverages.apply(this, arguments);
}

function _getOverages() {
  _getOverages = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.billing().services().overage()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getOverages.apply(this, arguments);
}



var index$9 = {
  __proto__: null,
  getSingle: getSingle$5,
  getCollection: getCollection$9,
  getOverages: getOverages
};



var index$a = {
  __proto__: null
};



var index$b = {
  __proto__: null,
  Credits: index$4,
  Invoices: index$5,
  Methods: index$6,
  Orders: index$7,
  Services: index$9,
  Plans: index$8,
  PromoCodes: index$a
};

/****************************** Functions ******************************/

/** Helper to change the url as this lives on a diff url */

var externalURL = "marketing-api.internal.cycle.io";
function getCollection$a(_x) {
  return _getCollection$a.apply(this, arguments);
}

function _getCollection$a() {
  _getCollection$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var _params$settings$url, _params$settings;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url = (_params$settings = params.settings) == null ? void 0 : _params$settings.url) != null ? _params$settings$url : externalURL
              }, params.settings),
              target: links.changelog().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$a.apply(this, arguments);
}

function create$2(_x2) {
  return _create$2.apply(this, arguments);
}

function _create$2() {
  _create$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    var _params$settings$url2, _params$settings2;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url2 = (_params$settings2 = params.settings) == null ? void 0 : _params$settings2.url) != null ? _params$settings$url2 : externalURL
              }, params.settings),
              target: links.changelog().collection()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _create$2.apply(this, arguments);
}

function getSingle$6(_x3) {
  return _getSingle$6.apply(this, arguments);
}

function _getSingle$6() {
  _getSingle$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    var _params$settings$url3, _params$settings3;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url3 = (_params$settings3 = params.settings) == null ? void 0 : _params$settings3.url) != null ? _params$settings$url3 : externalURL
              }, params.settings),
              target: links.changelog().single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getSingle$6.apply(this, arguments);
}

function update$4(_x4) {
  return _update$4.apply(this, arguments);
}

function _update$4() {
  _update$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    var _params$settings$url4, _params$settings4;

    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url4 = (_params$settings4 = params.settings) == null ? void 0 : _params$settings4.url) != null ? _params$settings$url4 : externalURL
              }, params.settings),
              target: links.changelog().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$4.apply(this, arguments);
}

/** Helper to change the url as this lives on a diff url */

var externalURL$1 = "marketing-api.internal.cycle.io";
function remove$2(_x) {
  return _remove$2.apply(this, arguments);
}

function _remove$2() {
  _remove$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var _params$settings$url, _params$settings;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", deleteRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url = (_params$settings = params.settings) == null ? void 0 : _params$settings.url) != null ? _params$settings$url : externalURL$1
              }, params.settings),
              target: links.changelog().single(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _remove$2.apply(this, arguments);
}

function publish(_x2) {
  return _publish.apply(this, arguments);
}

function _publish() {
  _publish = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    var _params$settings$url2, _params$settings2;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url2 = (_params$settings2 = params.settings) == null ? void 0 : _params$settings2.url) != null ? _params$settings$url2 : externalURL$1
              }, params.settings),
              value: _extends({
                action: "publish"
              }, params.value),
              target: links.changelog().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _publish.apply(this, arguments);
}

function sendEmail(_x3) {
  return _sendEmail.apply(this, arguments);
}

function _sendEmail() {
  _sendEmail = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    var _params$settings$url3, _params$settings3;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url3 = (_params$settings3 = params.settings) == null ? void 0 : _params$settings3.url) != null ? _params$settings$url3 : externalURL$1
              }, params.settings),
              value: _extends({
                action: "send-email"
              }, params.value),
              target: links.changelog().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendEmail.apply(this, arguments);
}

function hide(_x4) {
  return _hide.apply(this, arguments);
}

function _hide() {
  _hide = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    var _params$settings$url4, _params$settings4;

    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              settings: _extends({
                url: (_params$settings$url4 = (_params$settings4 = params.settings) == null ? void 0 : _params$settings4.url) != null ? _params$settings$url4 : externalURL$1
              }, params.settings),
              value: _extends({
                action: "hide"
              }, params.value),
              target: links.changelog().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _hide.apply(this, arguments);
}



var index$c = {
  __proto__: null,
  getCollection: getCollection$a,
  create: create$2,
  getSingle: getSingle$6,
  update: update$4,
  remove: remove$2,
  publish: publish,
  sendEmail: sendEmail,
  hide: hide
};

function getCollection$b(_x) {
  return _getCollection$b.apply(this, arguments);
}

function _getCollection$b() {
  _getCollection$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().servers(params.containerId).list()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$b.apply(this, arguments);
}

function usable(_x2) {
  return _usable.apply(this, arguments);
}

function _usable() {
  _usable = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().servers(params.containerId).usable()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _usable.apply(this, arguments);
}



var index$d = {
  __proto__: null,
  getCollection: getCollection$b,
  usable: usable
};

function getInstanceResourcesTelemetryReport(_x) {
  return _getInstanceResourcesTelemetryReport.apply(this, arguments);
}

function _getInstanceResourcesTelemetryReport() {
  _getInstanceResourcesTelemetryReport = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().instances().telemetry().resourcesReport(params.id, params.containerId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getInstanceResourcesTelemetryReport.apply(this, arguments);
}

function getInstanceResourceTelemetryStream(_x2) {
  return _getInstanceResourceTelemetryStream.apply(this, arguments);
}

function _getInstanceResourceTelemetryStream() {
  _getInstanceResourceTelemetryStream = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    var target, authResp;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            target = links.containers().instances().telemetry().resourcesStream(params.id, params.containerId);
            _context2.next = 3;
            return getRequest({
              target: target,
              hubId: params.hubId,
              token: params.token,
              settings: params.settings
            });

          case 3:
            authResp = _context2.sent;

            if (authResp.ok) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("return", authResp);

          case 6:
            return _context2.abrupt("return", connectToSocket({
              target: "",
              token: authResp.value.data.token,
              settings: {
                url: "" + authResp.value.data.address,
                noVersion: true
              },
              onMessage: params.onMessage
            }));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getInstanceResourceTelemetryStream.apply(this, arguments);
}



var index$e = {
  __proto__: null,
  getInstanceResourcesTelemetryReport: getInstanceResourcesTelemetryReport,
  getInstanceResourceTelemetryStream: getInstanceResourceTelemetryStream
};

function getCollection$c(_x) {
  return _getCollection$c.apply(this, arguments);
}

function _getCollection$c() {
  _getCollection$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().instances().volumes(params.instanceId, params.containerId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$c.apply(this, arguments);
}

var volume = {
  __proto__: null,
  getCollection: getCollection$c
};

function getCollection$d(_x) {
  return _getCollection$d.apply(this, arguments);
}

function _getCollection$d() {
  _getCollection$d = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().instances().collection(params.containerId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$d.apply(this, arguments);
}

function getSingle$7(_x2) {
  return _getSingle$7.apply(this, arguments);
}

function _getSingle$7() {
  _getSingle$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().instances().single(params.id, params.containerId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$7.apply(this, arguments);
}

function create$3(_x3) {
  return _create$3.apply(this, arguments);
}

function _create$3() {
  _create$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.containers().instances().collection(params.containerId)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$3.apply(this, arguments);
}

function remove$3(_x4) {
  return _remove$3.apply(this, arguments);
}

function _remove$3() {
  _remove$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.containers().instances().single(params.id, params.containerId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _remove$3.apply(this, arguments);
}

function removeMultiple(_x5) {
  return _removeMultiple.apply(this, arguments);
}

function _removeMultiple() {
  _removeMultiple = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.containers().instances().collection(params.containerId)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _removeMultiple.apply(this, arguments);
}

function connectToConsole(_x) {
  return _connectToConsole.apply(this, arguments);
}

function _connectToConsole() {
  _connectToConsole = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var target, authResp;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target = links.containers().instances().console(params.id, params.containerId);
            _context.next = 3;
            return getRequest({
              target: target,
              hubId: params.hubId,
              token: params.token,
              settings: params.settings
            });

          case 3:
            authResp = _context.sent;

            if (authResp.ok) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", authResp);

          case 6:
            return _context.abrupt("return", connectToSocket({
              target: "",
              token: authResp.value.data.token,
              settings: {
                url: "" + authResp.value.data.address,
                noVersion: true
              },
              onMessage: params.onMessage,
              noJsonDecode: true
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _connectToConsole.apply(this, arguments);
}

function getSSHConnection(_x) {
  return _getSSHConnection.apply(this, arguments);
}

function _getSSHConnection() {
  _getSSHConnection = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().instances().ssh(params.instanceId, params.containerId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSSHConnection.apply(this, arguments);
}

function expireInstanceSSHTokens(_x2) {
  return _expireInstanceSSHTokens.apply(this, arguments);
}

function _expireInstanceSSHTokens() {
  _expireInstanceSSHTokens = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.containers().instances().ssh(params.instanceId, params.containerId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _expireInstanceSSHTokens.apply(this, arguments);
}

function migrate(_x) {
  return _migrate.apply(this, arguments);
}

function _migrate() {
  _migrate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$2(_extends({}, params, {
              value: {
                action: "migrate",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _migrate.apply(this, arguments);
}

function revertMigration(_x2) {
  return _revertMigration.apply(this, arguments);
}

function _revertMigration() {
  _revertMigration = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", task$2(_extends({}, params, {
              value: {
                action: "migrate_revert"
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _revertMigration.apply(this, arguments);
}

function task$2(_x3) {
  return _task$2.apply(this, arguments);
}

function _task$2() {
  _task$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.containers().instances().tasks(params.id, params.containerId)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _task$2.apply(this, arguments);
}



var index$f = {
  __proto__: null,
  Telemetry: index$e,
  Volumes: volume,
  getCollection: getCollection$d,
  getSingle: getSingle$7,
  create: create$3,
  remove: remove$3,
  removeMultiple: removeMultiple,
  connectToConsole: connectToConsole,
  getSSHConnection: getSSHConnection,
  expireInstanceSSHTokens: expireInstanceSSHTokens,
  migrate: migrate,
  revertMigration: revertMigration,
  task: task$2
};

function getCompatibleImages(_x) {
  return _getCompatibleImages.apply(this, arguments);
}

function _getCompatibleImages() {
  _getCompatibleImages = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().compatibleImages(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCompatibleImages.apply(this, arguments);
}



var index$g = {
  __proto__: null,
  getCompatibleImages: getCompatibleImages
};

function getInstancesTelemetry(_x) {
  return _getInstancesTelemetry.apply(this, arguments);
}

function _getInstancesTelemetry() {
  _getInstancesTelemetry = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().telemetry().instances(params.containerId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getInstancesTelemetry.apply(this, arguments);
}

var instances = {
  __proto__: null,
  getInstancesTelemetry: getInstancesTelemetry
};



var index$h = {
  __proto__: null,
  Instances: instances
};



var volume$1 = {
  __proto__: null
};

var RestartCondition;

(function (RestartCondition) {
  RestartCondition["RSTRC_ALWAYS"] = "always";
  RestartCondition["RSTRC_NEVER"] = "never";
  RestartCondition["RSTRC_FAILURE"] = "failure";
})(RestartCondition || (RestartCondition = {}));



var index$i = {
  __proto__: null,
  Volumes: volume$1,
  get RestartCondition () { return RestartCondition; }
};

function getCollection$e(_x) {
  return _getCollection$e.apply(this, arguments);
}

function _getCollection$e() {
  _getCollection$e = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$e.apply(this, arguments);
}

function getSingle$8(_x2) {
  return _getSingle$8.apply(this, arguments);
}

function _getSingle$8() {
  _getSingle$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$8.apply(this, arguments);
}

function create$4(_x3) {
  return _create$4.apply(this, arguments);
}

function _create$4() {
  _create$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.containers().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$4.apply(this, arguments);
}

function update$5(_x4) {
  return _update$5.apply(this, arguments);
}

function _update$5() {
  _update$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.containers().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$5.apply(this, arguments);
}

function start(_x) {
  return _start.apply(this, arguments);
}

function _start() {
  _start = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "start"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _start.apply(this, arguments);
}

function stop(_x2) {
  return _stop.apply(this, arguments);
}

function _stop() {
  _stop = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "stop"
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _stop.apply(this, arguments);
}

function reconfigure(_x3) {
  return _reconfigure.apply(this, arguments);
}

function _reconfigure() {
  _reconfigure = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "reconfigure",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _reconfigure.apply(this, arguments);
}

function reconfigureVolumes(_x4) {
  return _reconfigureVolumes.apply(this, arguments);
}

function _reconfigureVolumes() {
  _reconfigureVolumes = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "reconfigure.volumes",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _reconfigureVolumes.apply(this, arguments);
}

function reimage(_x5) {
  return _reimage.apply(this, arguments);
}

function _reimage() {
  _reimage = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "reimage",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _reimage.apply(this, arguments);
}

function scale(_x6) {
  return _scale.apply(this, arguments);
}

function _scale() {
  _scale = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(params) {
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", task$3(_extends({}, params, {
              value: {
                action: "scale",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _scale.apply(this, arguments);
}

function remove$4(_x7) {
  return _remove$4.apply(this, arguments);
}

function _remove$4() {
  _remove$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(params) {
    return runtime_1.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.containers().single(params.id)
            })));

          case 1:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _remove$4.apply(this, arguments);
}

function task$3(_x8) {
  return _task$3.apply(this, arguments);
}

function _task$3() {
  _task$3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(params) {
    return runtime_1.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", postRequest(_extends({}, params, {
              target: links.containers().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _task$3.apply(this, arguments);
}

/**
 * Types of service containers
 */
var Service;

(function (Service) {
  Service["SRVC_DISCOVERY"] = "discovery";
  Service["SRVC_VPN"] = "vpn";
  Service["SRVC_LOADBALANCER"] = "loadbalancer";
})(Service || (Service = {}));

function getSummary(_x) {
  return _getSummary.apply(this, arguments);
}

function _getSummary() {
  _getSummary = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.containers().summary(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSummary.apply(this, arguments);
}



var index$j = {
  __proto__: null,
  Servers: index$d,
  Instances: index$f,
  CompatibleImages: index$g,
  Telemetry: index$h,
  Config: index$i,
  getCollection: getCollection$e,
  getSingle: getSingle$8,
  create: create$4,
  update: update$5,
  start: start,
  stop: stop,
  reconfigure: reconfigure,
  reconfigureVolumes: reconfigureVolumes,
  reimage: reimage,
  scale: scale,
  remove: remove$4,
  task: task$3,
  get Service () { return Service; },
  getSummary: getSummary
};

function getCollection$f(_x) {
  return _getCollection$f.apply(this, arguments);
}

function _getCollection$f() {
  _getCollection$f = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.dns().zones().records(params.zoneId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$f.apply(this, arguments);
}

function create$5(_x2) {
  return _create$5.apply(this, arguments);
}

function _create$5() {
  _create$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.dns().zones().records(params.zoneId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _create$5.apply(this, arguments);
}

function update$6(_x3) {
  return _update$6.apply(this, arguments);
}

function _update$6() {
  _update$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", patchRequest(_extends({}, params, {
              target: links.dns().zones().record(params.zoneId, params.recordId)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _update$6.apply(this, arguments);
}

function remove$5(_x4) {
  return _remove$5.apply(this, arguments);
}

function _remove$5() {
  _remove$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.dns().zones().record(params.zoneId, params.recordId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _remove$5.apply(this, arguments);
}

function generateCert(_x) {
  return _generateCert.apply(this, arguments);
}

function _generateCert() {
  _generateCert = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$4(_extends({}, params, {
              value: {
                action: "cert.generate"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateCert.apply(this, arguments);
}

function task$4(_x2) {
  return _task$4.apply(this, arguments);
}

function _task$4() {
  _task$4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.dns().zones().recordTasks(params.zoneId, params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$4.apply(this, arguments);
}



var index$k = {
  __proto__: null,
  getCollection: getCollection$f,
  create: create$5,
  update: update$6,
  remove: remove$5,
  generateCert: generateCert,
  task: task$4
};

function verify(_x) {
  return _verify.apply(this, arguments);
}

function _verify() {
  _verify = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$5(_extends({}, params, {
              value: {
                action: "verify"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _verify.apply(this, arguments);
}

function task$5(_x2) {
  return _task$5.apply(this, arguments);
}

function _task$5() {
  _task$5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.dns().zones().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$5.apply(this, arguments);
}

function getCollection$g(_x) {
  return _getCollection$g.apply(this, arguments);
}

function _getCollection$g() {
  _getCollection$g = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.dns().zones().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$g.apply(this, arguments);
}

function getSingle$9(_x2) {
  return _getSingle$9.apply(this, arguments);
}

function _getSingle$9() {
  _getSingle$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.dns().zones().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$9.apply(this, arguments);
}

function create$6(_x3) {
  return _create$6.apply(this, arguments);
}

function _create$6() {
  _create$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.dns().zones().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$6.apply(this, arguments);
}

function update$7(_x4) {
  return _update$7.apply(this, arguments);
}

function _update$7() {
  _update$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.dns().zones().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$7.apply(this, arguments);
}

function remove$6(_x5) {
  return _remove$6.apply(this, arguments);
}

function _remove$6() {
  _remove$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.dns().zones().single(params.zoneId)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _remove$6.apply(this, arguments);
}

var zone = {
  __proto__: null,
  Records: index$k,
  getCollection: getCollection$g,
  getSingle: getSingle$9,
  create: create$6,
  update: update$7,
  remove: remove$6,
  verify: verify,
  task: task$5
};

function getAttempts(_x) {
  return _getAttempts.apply(this, arguments);
}

function _getAttempts() {
  _getAttempts = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.dns().tls().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getAttempts.apply(this, arguments);
}



var index$l = {
  __proto__: null,
  getAttempts: getAttempts
};



var index$m = {
  __proto__: null,
  Zones: zone,
  TLS: index$l
};

function getCollection$h(_x) {
  return _getCollection$h.apply(this, arguments);
}

function _getCollection$h() {
  _getCollection$h = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$h.apply(this, arguments);
}

function getSingle$a(_x2) {
  return _getSingle$a.apply(this, arguments);
}

function _getSingle$a() {
  _getSingle$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$a.apply(this, arguments);
}

function create$7(_x3) {
  return _create$7.apply(this, arguments);
}

function _create$7() {
  _create$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$7.apply(this, arguments);
}

function update$8(_x4) {
  return _update$8.apply(this, arguments);
}

function _update$8() {
  _update$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.environments().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$8.apply(this, arguments);
}

function getSummary$1(_x) {
  return _getSummary$1.apply(this, arguments);
}

function _getSummary$1() {
  _getSummary$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().summary(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSummary$1.apply(this, arguments);
}

function start$1(_x) {
  return _start$1.apply(this, arguments);
}

function _start$1() {
  _start$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$6(_extends({}, params, {
              value: {
                action: "start"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _start$1.apply(this, arguments);
}

function stop$1(_x2) {
  return _stop$1.apply(this, arguments);
}

function _stop$1() {
  _stop$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", task$6(_extends({}, params, {
              value: {
                action: "stop"
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _stop$1.apply(this, arguments);
}

function initialize(_x3) {
  return _initialize.apply(this, arguments);
}

function _initialize() {
  _initialize = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", task$6(_extends({}, params, {
              value: {
                action: "initialize"
              }
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _initialize.apply(this, arguments);
}

function remove$7(_x4) {
  return _remove$7.apply(this, arguments);
}

function _remove$7() {
  _remove$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.environments().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _remove$7.apply(this, arguments);
}

function task$6(_x5) {
  return _task$6.apply(this, arguments);
}

function _task$6() {
  _task$6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _task$6.apply(this, arguments);
}

/****************************** Regular Functions ******************************/

function getCollection$i(_x) {
  return _getCollection$i.apply(this, arguments);
}

function _getCollection$i() {
  _getCollection$i = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().scopedVariables(params.environmentId).collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$i.apply(this, arguments);
}

function getSingle$b(_x2) {
  return _getSingle$b.apply(this, arguments);
}

function _getSingle$b() {
  _getSingle$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().scopedVariables(params.environmentId).single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$b.apply(this, arguments);
}

function create$8(_x3) {
  return _create$8.apply(this, arguments);
}

function _create$8() {
  _create$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().scopedVariables(params.environmentId).collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$8.apply(this, arguments);
}

function update$9(_x4) {
  return _update$9.apply(this, arguments);
}
/****************************** Task Functions ******************************/

function _update$9() {
  _update$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.environments().scopedVariables(params.environmentId).single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$9.apply(this, arguments);
}

function remove$8(_x5) {
  return _remove$8.apply(this, arguments);
}

function _remove$8() {
  _remove$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.environments().scopedVariables(params.environmentId).single(params.id)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _remove$8.apply(this, arguments);
}

var scopedVariables = {
  __proto__: null,
  getCollection: getCollection$i,
  getSingle: getSingle$b,
  create: create$8,
  update: update$9,
  remove: remove$8
};

function getInstancesTelemetry$1(_x) {
  return _getInstancesTelemetry$1.apply(this, arguments);
}

function _getInstancesTelemetry$1() {
  _getInstancesTelemetry$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().telemetry().instances(params.environmentId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getInstancesTelemetry$1.apply(this, arguments);
}

var instances$1 = {
  __proto__: null,
  getInstancesTelemetry: getInstancesTelemetry$1
};



var index$n = {
  __proto__: null,
  Instances: instances$1
};

function reconfigureDiscovery(_x) {
  return _reconfigureDiscovery.apply(this, arguments);
}

function _reconfigureDiscovery() {
  _reconfigureDiscovery = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().services().discovery().tasks(params.environmentId),
              value: {
                action: "reconfigure",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _reconfigureDiscovery.apply(this, arguments);
}

function getVPNInfo(_x) {
  return _getVPNInfo.apply(this, arguments);
}

function _getVPNInfo() {
  _getVPNInfo = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().services().vpn().details(params.environmentId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getVPNInfo.apply(this, arguments);
}

function getVPNLogins(_x2) {
  return _getVPNLogins.apply(this, arguments);
}

function _getVPNLogins() {
  _getVPNLogins = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().services().vpn().logins(params.environmentId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getVPNLogins.apply(this, arguments);
}

function getVPNUsers(_x3) {
  return _getVPNUsers.apply(this, arguments);
}

function _getVPNUsers() {
  _getVPNUsers = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().services().vpn().users(params.environmentId)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getVPNUsers.apply(this, arguments);
}

function createVPNUser(_x4) {
  return _createVPNUser.apply(this, arguments);
}

function _createVPNUser() {
  _createVPNUser = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().services().vpn().users(params.environmentId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _createVPNUser.apply(this, arguments);
}

function deleteVPNUser(_x5) {
  return _deleteVPNUser.apply(this, arguments);
}

function _deleteVPNUser() {
  _deleteVPNUser = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.environments().services().vpn().user(params.environmentId, params.userId)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _deleteVPNUser.apply(this, arguments);
}

function reconfigureVPN(_x6) {
  return _reconfigureVPN.apply(this, arguments);
}

function _reconfigureVPN() {
  _reconfigureVPN = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(params) {
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().services().vpn().tasks(params.environmentId),
              value: {
                action: "reconfigure",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _reconfigureVPN.apply(this, arguments);
}

function getLoadBalancerInfo(_x) {
  return _getLoadBalancerInfo.apply(this, arguments);
}
/** ### `reconfigureLoadBalancer()` 🚀
 *
 * ---
 *
 * ## Important Notes:
 * - 🚀 Use the cycle job tracker helper function with this function to help
 * you track jobs easier. Basic usage shown in example below
 *
 * - Please refer to `params.value.config` before submitting any values
 *  to make sure you are not resetting values to platform defaults which
 *  you do not intend too
 *
 * ---
 *
 * ### Params
 * @param params is an object containing standard necessary params to
 *  reconfigure the desired lb
 *
 * @param params.environmentId is the environment id of in which the lb you
 *  want to reconfigure lives
 *
 * @param params.value is is an object containing the possible values with
 *  which you can reconfigure the desired lb
 *
 * @param params.value.config __IMPORTANT:__ to keep the current settings with
 *  the config object, leave config as null: `config: null`. If you mark
 *  an individual item within config as null, the platform will set that
 *  items values to the defaults
 *
 * @param params.value.high_availability mark this item as true or false to
 *  to set the desired lb to be put into HA mode (`true`) or not (`false`)
 *
 * ---
 *
 * ### Usage
 * @example
 *  ```ts
 *  const params: Environments.Services.ReconfigureLoadBalancerParams = {
 *    ...YOUR_BASE_PARAMS,
 *    environmentId: SOME_ENV_ID,
 *    values: {
 *      // NOTE: leave the config object out if you do not want the platform to
 *      //  potential reset to the default values. Refer to the params declaration
 *      //  above for more info.
 *      config: {
 *        haproxy: { ... },
 *        ipv4: false,
 *        ipv6: true
 *      },
 *      high_availability: true
 *    }
 *  }
 *
 *  async function() {
 *    const job = await Environments.Services.reconfigureLoadBalancer(params);
 *
 *    try {
 *      // use our future helper lib job tracker here
 *      const jobData = await jobTrack(job);
 *    } catch(e) {
 *      // do something if job errors
 *     console.error(e);
 *    }
 *  }
 *  ```
 *
 * ---
 *
 * ### Cycle Info
 *
 * __Something doesn't look right or work as intended?__ \
 * Help us make a better TypeScript Platform Interface by submitting an issue on
 * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or
 * forking our repo and submitting a
 * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).
 *
 * [General Docs](https://docs.cycle.io) /
 * [Public API Docs](https://docs.cycle.io/api/introduction) /
 * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /
 * [Cycle's Website](https://cycle.io)
 *
 * ---
 *
 * Last Updated: 2021.01.11 — Grady S
 */

function _getLoadBalancerInfo() {
  _getLoadBalancerInfo = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.environments().services().lb().info(params.environmentId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getLoadBalancerInfo.apply(this, arguments);
}

function reconfigureLoadBalancer(_x2) {
  return _reconfigureLoadBalancer.apply(this, arguments);
}

function _reconfigureLoadBalancer() {
  _reconfigureLoadBalancer = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.environments().services().lb().tasks(params.environmentId),
              value: {
                action: "reconfigure",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _reconfigureLoadBalancer.apply(this, arguments);
}



var index$o = {
  __proto__: null,
  reconfigureDiscovery: reconfigureDiscovery,
  getVPNInfo: getVPNInfo,
  getVPNLogins: getVPNLogins,
  getVPNUsers: getVPNUsers,
  createVPNUser: createVPNUser,
  deleteVPNUser: deleteVPNUser,
  reconfigureVPN: reconfigureVPN,
  getLoadBalancerInfo: getLoadBalancerInfo,
  reconfigureLoadBalancer: reconfigureLoadBalancer
};



var index$p = {
  __proto__: null,
  Services: index$o,
  Telemetry: index$n,
  ScopedVariables: scopedVariables,
  getCollection: getCollection$h,
  getSingle: getSingle$a,
  create: create$7,
  update: update$8,
  getSummary: getSummary$1,
  start: start$1,
  stop: stop$1,
  initialize: initialize,
  remove: remove$7,
  task: task$6
};

/****************************** Functions ******************************/

function getCollection$j(_x) {
  return _getCollection$j.apply(this, arguments);
}

function _getCollection$j() {
  _getCollection$j = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().sources().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$j.apply(this, arguments);
}

function create$9(_x2) {
  return _create$9.apply(this, arguments);
}

function _create$9() {
  _create$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.images().sources().collection()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _create$9.apply(this, arguments);
}

function getSingle$c(_x3) {
  return _getSingle$c.apply(this, arguments);
}

function _getSingle$c() {
  _getSingle$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().sources().single(params.sourceId)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getSingle$c.apply(this, arguments);
}

function update$a(_x4) {
  return _update$a.apply(this, arguments);
}

function _update$a() {
  _update$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.images().sources().single(params.sourceId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$a.apply(this, arguments);
}

function remove$9(_x) {
  return _remove$9.apply(this, arguments);
}

function _remove$9() {
  _remove$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.images().sources().single(params.sourceId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _remove$9.apply(this, arguments);
}



var index$q = {
  __proto__: null,
  getCollection: getCollection$j,
  create: create$9,
  getSingle: getSingle$c,
  update: update$a,
  remove: remove$9
};

/****************************** Functions ******************************/

/** ### `getCollection(params: GetCollectionParams)`
 * Fetch a list of images
 *
 * __Capability:__ `images-view`
 */

function getCollection$k(_x) {
  return _getCollection$k.apply(this, arguments);
}
/** ### `getSingle(params: GetSingleParams)`
 * Fetch a single image
 * __Capability:__ `images-view`
 */

function _getCollection$k() {
  _getCollection$k = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$k.apply(this, arguments);
}

function getSingle$d(_x2) {
  return _getSingle$d.apply(this, arguments);
}
/** ### `create(params: CreateParams)`
 * Creates an image object.
 * __Capability:__ `images-import`
 *
 * ### Important Notes
 * Calling the `create()` function does not import an image. To
 * import an image call @see {importImage()}.
 */

function _getSingle$d() {
  _getSingle$d = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$d.apply(this, arguments);
}

function create$a(_x3) {
  return _create$a.apply(this, arguments);
}
/** ### `update(params: UpdateParams)`
 * Update basic image properties
 * __Capability:__ `images-update`
 */

function _create$a() {
  _create$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.images().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$a.apply(this, arguments);
}

function update$b(_x4) {
  return _update$b.apply(this, arguments);
}

function _update$b() {
  _update$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.images().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$b.apply(this, arguments);
}

function importImage(_x) {
  return _importImage.apply(this, arguments);
}

function _importImage() {
  _importImage = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", imageTask(_extends({}, params, {
              value: {
                action: "import"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _importImage.apply(this, arguments);
}

function pruneUnused(_x2) {
  return _pruneUnused.apply(this, arguments);
}

function _pruneUnused() {
  _pruneUnused = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", collectionTask(_extends({}, params, {
              value: {
                action: "prune",
                contents: {
                  source_ids: params.source_ids
                }
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _pruneUnused.apply(this, arguments);
}

function remove$a(_x3) {
  return _remove$a.apply(this, arguments);
}

function _remove$a() {
  _remove$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.images().single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _remove$a.apply(this, arguments);
}

function collectionTask(_x4) {
  return _collectionTask.apply(this, arguments);
}

function _collectionTask() {
  _collectionTask = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              target: links.images().collectionTasks()
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _collectionTask.apply(this, arguments);
}

function imageTask(_x5) {
  return _imageTask.apply(this, arguments);
}

function _imageTask() {
  _imageTask = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", postRequest(_extends({}, params, {
              target: links.images().imageTasks(params.id)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _imageTask.apply(this, arguments);
}

/****************************** Functions ******************************/

function getContainers(_x) {
  return _getContainers.apply(this, arguments);
}

function _getContainers() {
  _getContainers = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().containers(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getContainers.apply(this, arguments);
}

/****************************** Functions ******************************/

/** ### `getSingle(params: GetSingleParams)`
 * Fetch a single build log
 * __Capability:__ `images-view`
 */

function getBuildLog(_x) {
  return _getBuildLog.apply(this, arguments);
}

function _getBuildLog() {
  _getBuildLog = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.images().buildLog(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getBuildLog.apply(this, arguments);
}



var index$r = {
  __proto__: null,
  Sources: index$q,
  getCollection: getCollection$k,
  getSingle: getSingle$d,
  create: create$a,
  update: update$b,
  importImage: importImage,
  pruneUnused: pruneUnused,
  remove: remove$a,
  collectionTask: collectionTask,
  imageTask: imageTask,
  getContainers: getContainers,
  getBuildLog: getBuildLog
};

function getCollection$l(_x) {
  return _getCollection$l.apply(this, arguments);
}

function _getCollection$l() {
  _getCollection$l = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().providers().locations(params.provider)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$l.apply(this, arguments);
}

function getFeatures(_x2) {
  return _getFeatures.apply(this, arguments);
}

function _getFeatures() {
  _getFeatures = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().providers().features()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getFeatures.apply(this, arguments);
}

var location = {
  __proto__: null,
  getCollection: getCollection$l,
  getFeatures: getFeatures
};

function getCollection$m(_x) {
  return _getCollection$m.apply(this, arguments);
}

function _getCollection$m() {
  _getCollection$m = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().providers().servers(params.provider)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$m.apply(this, arguments);
}

var server = {
  __proto__: null,
  getCollection: getCollection$m
};

function getCollection$n(_x) {
  return _getCollection$n.apply(this, arguments);
}

function _getCollection$n() {
  _getCollection$n = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().providers().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$n.apply(this, arguments);
}



var index$s = {
  __proto__: null,
  Locations: location,
  Servers: server,
  getCollection: getCollection$n
};

function getServerUsage(_x) {
  return _getServerUsage.apply(this, arguments);
}

function _getServerUsage() {
  _getServerUsage = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().usage()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getServerUsage.apply(this, arguments);
}

var usage = {
  __proto__: null,
  getServerUsage: getServerUsage
};

function getServerInstances(_x) {
  return _getServerInstances.apply(this, arguments);
}

function _getServerInstances() {
  _getServerInstances = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().instances(params.serverId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getServerInstances.apply(this, arguments);
}

var instances$2 = {
  __proto__: null,
  getServerInstances: getServerInstances
};

function getCollection$o(_x) {
  return _getCollection$o.apply(this, arguments);
}

function _getCollection$o() {
  _getCollection$o = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().telemetry(params.serverId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$o.apply(this, arguments);
}

var telemetry = {
  __proto__: null,
  getCollection: getCollection$o
};

function getCollection$p(_x) {
  return _getCollection$p.apply(this, arguments);
}

function _getCollection$p() {
  _getCollection$p = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$p.apply(this, arguments);
}

function getSingle$e(_x2) {
  return _getSingle$e.apply(this, arguments);
}

function _getSingle$e() {
  _getSingle$e = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$e.apply(this, arguments);
}

function getTags(_x3) {
  return _getTags.apply(this, arguments);
}

function _getTags() {
  _getTags = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().tags()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getTags.apply(this, arguments);
}

function getClusters(_x4) {
  return _getClusters.apply(this, arguments);
}

function _getClusters() {
  _getClusters = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().servers().clusters()
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getClusters.apply(this, arguments);
}

function create$b(_x5) {
  return _create$b.apply(this, arguments);
}
/**
 * Advanced server create allows you to specify reservation ids or if deploying to AWS
 * allows you to specify EBS volume size under the advanced object
 *
 * @see AdvancedServerCreate struct <br/>
 *
 * @example
 * ```ts
 * servers: [
 *  {
 *    provider: "aws",
 *    model_id: "<resource_id>",
 *    location_id: "<resource_id>",
 *    quantity: 2,
 *    advanced: [
 *      {
 *        provision_options: {
 *          aws_ebs_size: 90,
 *          reservation_id: "<resource_id>",
 *        }
 *      }
 *    ]
 *  }
 * ],
 * cluster: "advanced"
 * ```
 */

function _create$b() {
  _create$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", postRequest(_extends({}, params, {
              target: links.infrastructure().servers().collection()
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _create$b.apply(this, arguments);
}

function advancedCreate(_x6) {
  return _advancedCreate.apply(this, arguments);
}

function _advancedCreate() {
  _advancedCreate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(params) {
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", postRequest(_extends({}, params, {
              target: links.infrastructure().servers().collection()
            })));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _advancedCreate.apply(this, arguments);
}

function update$c(_x7) {
  return _update$c.apply(this, arguments);
}

function _update$c() {
  _update$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(params) {
    return runtime_1.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", patchRequest(_extends({}, params, {
              target: links.infrastructure().servers().single(params.id)
            })));

          case 1:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _update$c.apply(this, arguments);
}

function remove$b(_x8) {
  return _remove$b.apply(this, arguments);
}

function _remove$b() {
  _remove$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(params) {
    return runtime_1.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.infrastructure().servers().single(params.id)
            })));

          case 1:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _remove$b.apply(this, arguments);
}

function connectToConsole$1(_x) {
  return _connectToConsole$1.apply(this, arguments);
}

function _connectToConsole$1() {
  _connectToConsole$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var target, secretResp;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target = links.infrastructure().servers().console(params.id);
            _context.next = 3;
            return getRequest(_extends({}, params, {
              target: target
            }));

          case 3:
            secretResp = _context.sent;

            if (secretResp.ok) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", secretResp);

          case 6:
            return _context.abrupt("return", connectToSocket({
              target: "",
              token: secretResp.value.data.token,
              settings: {
                url: "" + secretResp.value.data.address,
                noVersion: true
              },
              onMessage: params.onMessage,
              noJsonDecode: true
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _connectToConsole$1.apply(this, arguments);
}

function reconfigureFeatures(_x) {
  return _reconfigureFeatures.apply(this, arguments);
}

function _reconfigureFeatures() {
  _reconfigureFeatures = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$7(_extends({}, params, {
              value: {
                action: "reconfigure.features",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _reconfigureFeatures.apply(this, arguments);
}

function task$7(_x2) {
  return _task$7.apply(this, arguments);
}

function _task$7() {
  _task$7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.infrastructure().servers().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$7.apply(this, arguments);
}



var index$t = {
  __proto__: null,
  Usage: usage,
  Instances: instances$2,
  Telemetry: telemetry,
  getCollection: getCollection$p,
  getSingle: getSingle$e,
  getTags: getTags,
  getClusters: getClusters,
  create: create$b,
  advancedCreate: advancedCreate,
  update: update$c,
  remove: remove$b,
  connectToConsole: connectToConsole$1,
  reconfigureFeatures: reconfigureFeatures,
  task: task$7
};

function getCollection$q(_x) {
  return _getCollection$q.apply(this, arguments);
}

function _getCollection$q() {
  _getCollection$q = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().ips().pools().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$q.apply(this, arguments);
}

function getSingle$f(_x2) {
  return _getSingle$f.apply(this, arguments);
}

function _getSingle$f() {
  _getSingle$f = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().ips().pools().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$f.apply(this, arguments);
}

function remove$c(_x3) {
  return _remove$c.apply(this, arguments);
}

function _remove$c() {
  _remove$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.infrastructure().ips().pools().single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _remove$c.apply(this, arguments);
}

function getPoolIPs(_x4) {
  return _getPoolIPs.apply(this, arguments);
}

function _getPoolIPs() {
  _getPoolIPs = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().ips().pools().ips(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getPoolIPs.apply(this, arguments);
}



var index$u = {
  __proto__: null,
  getCollection: getCollection$q,
  getSingle: getSingle$f,
  remove: remove$c,
  getPoolIPs: getPoolIPs
};

function getSummary$2(_x) {
  return _getSummary$2.apply(this, arguments);
}

function _getSummary$2() {
  _getSummary$2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().summary()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSummary$2.apply(this, arguments);
}



var index$v = {
  __proto__: null,
  getSummary: getSummary$2
};

function getSingle$g(_x) {
  return _getSingle$g.apply(this, arguments);
}

function _getSingle$g() {
  _getSingle$g = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.infrastructure().strategies()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSingle$g.apply(this, arguments);
}



var index$w = {
  __proto__: null,
  getSingle: getSingle$g
};



var index$x = {
  __proto__: null,
  Providers: index$s,
  Servers: index$t,
  IPs: index$u,
  Summary: index$v,
  Strategies: index$w
};

function getCollection$r(_x) {
  return _getCollection$r.apply(this, arguments);
}

function _getCollection$r() {
  _getCollection$r = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.jobs().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$r.apply(this, arguments);
}

function getSingle$h(_x2) {
  return _getSingle$h.apply(this, arguments);
}

function _getSingle$h() {
  _getSingle$h = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.jobs().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$h.apply(this, arguments);
}

function lookup(_x3) {
  return _lookup.apply(this, arguments);
}

function _lookup() {
  _lookup = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    var _extends2;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              query: _extends({}, params.query, (_extends2 = {}, _extends2["task-object-id"] = params.lookupId, _extends2)),
              target: links.jobs().latest()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _lookup.apply(this, arguments);
}



var index$y = {
  __proto__: null,
  getCollection: getCollection$r,
  getSingle: getSingle$h,
  lookup: lookup
};

function remove$d(_x) {
  return _remove$d.apply(this, arguments);
}

function _remove$d() {
  _remove$d = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.hubs().invites().single(params.inviteId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _remove$d.apply(this, arguments);
}

function getCollection$s(_x2) {
  return _getCollection$s.apply(this, arguments);
}

function _getCollection$s() {
  _getCollection$s = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().invites().collection()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCollection$s.apply(this, arguments);
}

function create$c(_x3) {
  return _create$c.apply(this, arguments);
}

function _create$c() {
  _create$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.hubs().invites().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$c.apply(this, arguments);
}

var invite$1 = {
  __proto__: null,
  remove: remove$d,
  getCollection: getCollection$s,
  create: create$c
};

/**
 * Membership role information
 */

var Role;

(function (Role) {
  Role[Role["OWNER"] = 1] = "OWNER";
  Role[Role["ADMIN"] = 2] = "ADMIN";
  Role[Role["DEVELOPER"] = 4] = "DEVELOPER";
  Role[Role["ANALYST"] = 8] = "ANALYST";
  Role[Role["DEFAULT"] = 0] = "DEFAULT";
})(Role || (Role = {}));

function getCollection$t(_x) {
  return _getCollection$t.apply(this, arguments);
}

function _getCollection$t() {
  _getCollection$t = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().members().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$t.apply(this, arguments);
}

function getCurrentMembership(_x2) {
  return _getCurrentMembership.apply(this, arguments);
}

function _getCurrentMembership() {
  _getCurrentMembership = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().members().membership()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCurrentMembership.apply(this, arguments);
}

function getHubMember(_x3) {
  return _getHubMember.apply(this, arguments);
}

function _getHubMember() {
  _getHubMember = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().members().single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getHubMember.apply(this, arguments);
}

function getHubMemberByAccountId(_x4) {
  return _getHubMemberByAccountId.apply(this, arguments);
}

function _getHubMemberByAccountId() {
  _getHubMemberByAccountId = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().members().account(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getHubMemberByAccountId.apply(this, arguments);
}

function update$d(_x5) {
  return _update$d.apply(this, arguments);
}

function _update$d() {
  _update$d = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", patchRequest(_extends({}, params, {
              target: links.hubs().members().single(params.id)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _update$d.apply(this, arguments);
}

function revoke(_x6) {
  return _revoke.apply(this, arguments);
}

function _revoke() {
  _revoke = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(params) {
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.hubs().members().single(params.id)
            })));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _revoke.apply(this, arguments);
}

var membership$1 = {
  __proto__: null,
  get Role () { return Role; },
  getCollection: getCollection$t,
  getCurrentMembership: getCurrentMembership,
  getHubMember: getHubMember,
  getHubMemberByAccountId: getHubMemberByAccountId,
  update: update$d,
  revoke: revoke
};

function getCollection$u(_x) {
  return _getCollection$u.apply(this, arguments);
}

function _getCollection$u() {
  _getCollection$u = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().keys().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$u.apply(this, arguments);
}

function getSingle$i(_x2) {
  return _getSingle$i.apply(this, arguments);
}

function _getSingle$i() {
  _getSingle$i = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().keys().single(params.apiKeyId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$i.apply(this, arguments);
}

function create$d(_x3) {
  return _create$d.apply(this, arguments);
}

function _create$d() {
  _create$d = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.hubs().keys().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$d.apply(this, arguments);
}

function update$e(_x4) {
  return _update$e.apply(this, arguments);
}

function _update$e() {
  _update$e = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.hubs().keys().single(params.keyId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$e.apply(this, arguments);
}

function remove$e(_x5) {
  return _remove$e.apply(this, arguments);
}

function _remove$e() {
  _remove$e = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.hubs().keys().single(params.keyId)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _remove$e.apply(this, arguments);
}

var apikey = {
  __proto__: null,
  getCollection: getCollection$u,
  getSingle: getSingle$i,
  create: create$d,
  update: update$e,
  remove: remove$e
};

function getCollection$v(_x) {
  return _getCollection$v.apply(this, arguments);
}

function _getCollection$v() {
  _getCollection$v = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().activity()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$v.apply(this, arguments);
}

var activity = {
  __proto__: null,
  getCollection: getCollection$v
};

function getCapabilities(_x) {
  return _getCapabilities.apply(this, arguments);
}

function _getCapabilities() {
  _getCapabilities = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var query, settings;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            query = _ref.query, settings = _ref.settings;
            return _context.abrupt("return", getRequest({
              query: query,
              settings: settings,
              target: links.hubs().capabilities()
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCapabilities.apply(this, arguments);
}

function getCollection$w(_x) {
  return _getCollection$w.apply(this, arguments);
}

function _getCollection$w() {
  _getCollection$w = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$w.apply(this, arguments);
}

function getSingle$j(_x2) {
  return _getSingle$j.apply(this, arguments);
}

function _getSingle$j() {
  _getSingle$j = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().single()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$j.apply(this, arguments);
}

function getCurrentTier(_x3) {
  return _getCurrentTier.apply(this, arguments);
}

function _getCurrentTier() {
  _getCurrentTier = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", getRequest(_extends({}, params, {
              target: links.hubs().tier()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getCurrentTier.apply(this, arguments);
}

function create$e(_x4) {
  return _create$e.apply(this, arguments);
}

function _create$e() {
  _create$e = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              target: links.hubs().collection()
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _create$e.apply(this, arguments);
}

function update$f(_x5) {
  return _update$f.apply(this, arguments);
}

function _update$f() {
  _update$f = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", patchRequest(_extends({}, params, {
              target: links.hubs().single()
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _update$f.apply(this, arguments);
}

function remove$f(_x6) {
  return _remove$f.apply(this, arguments);
}

function _remove$f() {
  _remove$f = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(params) {
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.hubs().single()
            })));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _remove$f.apply(this, arguments);
}

function leave(_x) {
  return _leave.apply(this, arguments);
}

function _leave() {
  _leave = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$8(_extends({}, params, {
              value: {
                action: "leave"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _leave.apply(this, arguments);
}

function task$8(_x2) {
  return _task$8.apply(this, arguments);
}

function _task$8() {
  _task$8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.hubs().tasks()
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$8.apply(this, arguments);
}



var index$z = {
  __proto__: null,
  Invites: invite$1,
  Members: membership$1,
  ApiKeys: apikey,
  Activity: activity,
  getCapabilities: getCapabilities,
  getCollection: getCollection$w,
  getSingle: getSingle$j,
  getCurrentTier: getCurrentTier,
  create: create$e,
  update: update$f,
  remove: remove$f,
  leave: leave,
  task: task$8
};

function reconfigure$1(_x) {
  return _reconfigure$1.apply(this, arguments);
}

function _reconfigure$1() {
  _reconfigure$1 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$9(_extends({}, params, {
              value: {
                action: "reconfigure",
                contents: params.value
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _reconfigure$1.apply(this, arguments);
}

function task$9(_x2) {
  return _task$9.apply(this, arguments);
}

function _task$9() {
  _task$9 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.sdn().networks().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _task$9.apply(this, arguments);
}

function getCollection$x(_x) {
  return _getCollection$x.apply(this, arguments);
}

function _getCollection$x() {
  _getCollection$x = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.sdn().networks().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$x.apply(this, arguments);
}

function getSingle$k(_x2) {
  return _getSingle$k.apply(this, arguments);
}

function _getSingle$k() {
  _getSingle$k = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.sdn().networks().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$k.apply(this, arguments);
}

function create$f(_x3) {
  return _create$f.apply(this, arguments);
}

function _create$f() {
  _create$f = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.sdn().networks().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$f.apply(this, arguments);
}

function update$g(_x4) {
  return _update$g.apply(this, arguments);
}

function _update$g() {
  _update$g = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.sdn().networks().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$g.apply(this, arguments);
}

function remove$g(_x5) {
  return _remove$g.apply(this, arguments);
}

function _remove$g() {
  _remove$g = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(params) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.sdn().networks().single(params.id)
            })));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _remove$g.apply(this, arguments);
}

var networks = {
  __proto__: null,
  getCollection: getCollection$x,
  getSingle: getSingle$k,
  create: create$f,
  update: update$g,
  remove: remove$g,
  reconfigure: reconfigure$1,
  task: task$9
};



var index$A = {
  __proto__: null,
  Networks: networks
};



var index$B = {
  __proto__: null
};



var log = {
  __proto__: null
};

function deploy(_x) {
  return _deploy.apply(this, arguments);
}

function _deploy() {
  _deploy = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$a(_extends({}, params, {
              value: {
                action: "deploy",
                contents: params.contents
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _deploy.apply(this, arguments);
}

function generate(_x2) {
  return _generate.apply(this, arguments);
}

function _generate() {
  _generate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", task$a(_extends({}, params, {
              value: {
                action: "generate"
              }
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _generate.apply(this, arguments);
}

function remove$h(_x3) {
  return _remove$h.apply(this, arguments);
}

function _remove$h() {
  _remove$h = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.stacks().builds(params.stackId).single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _remove$h.apply(this, arguments);
}

function task$a(_x4) {
  return _task$a.apply(this, arguments);
}

function _task$a() {
  _task$a = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              target: links.stacks().builds(params.stackId).tasks(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _task$a.apply(this, arguments);
}

function getCollection$y(_x) {
  return _getCollection$y.apply(this, arguments);
}
/**
 * If a stack id is not know it can be omitted, however this behavior is not
 * recommended unless absolutely necessary.
 */

function _getCollection$y() {
  _getCollection$y = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.stacks().builds(params.stackId).collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$y.apply(this, arguments);
}

function getSingle$l(_x2) {
  return _getSingle$l.apply(this, arguments);
}

function _getSingle$l() {
  _getSingle$l = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (params.stackId) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.stacks().buildLookup(params.id)
            })));

          case 4:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.stacks().builds(params.stackId).single(params.id)
            })));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$l.apply(this, arguments);
}

function create$g(_x3) {
  return _create$g.apply(this, arguments);
}

function _create$g() {
  _create$g = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.stacks().builds(params.stackId).collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$g.apply(this, arguments);
}



var index$C = {
  __proto__: null,
  Logs: log,
  getCollection: getCollection$y,
  getSingle: getSingle$l,
  create: create$g,
  deploy: deploy,
  generate: generate,
  remove: remove$h,
  task: task$a
};



var index$D = {
  __proto__: null
};

/****************************** Functions ******************************/

function getCollection$z(_x) {
  return _getCollection$z.apply(this, arguments);
}

function _getCollection$z() {
  _getCollection$z = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.stacks().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$z.apply(this, arguments);
}

function getSingle$m(_x2) {
  return _getSingle$m.apply(this, arguments);
}

function _getSingle$m() {
  _getSingle$m = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.stacks().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$m.apply(this, arguments);
}

function create$h(_x3) {
  return _create$h.apply(this, arguments);
}

function _create$h() {
  _create$h = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.stacks().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$h.apply(this, arguments);
}

function update$h(_x4) {
  return _update$h.apply(this, arguments);
}

function _update$h() {
  _update$h = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.stacks().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$h.apply(this, arguments);
}

/** Removes all builds that are not in use and have not been created in the last 30 minutes */

function pruneBuilds(_x) {
  return _pruneBuilds.apply(this, arguments);
}

function _pruneBuilds() {
  _pruneBuilds = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$b(_extends({}, params, {
              value: {
                action: "prune"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _pruneBuilds.apply(this, arguments);
}

function remove$i(_x2) {
  return _remove$i.apply(this, arguments);
}

function _remove$i() {
  _remove$i = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.stacks().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _remove$i.apply(this, arguments);
}

function task$b(_x3) {
  return _task$b.apply(this, arguments);
}

function _task$b() {
  _task$b = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.stacks().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _task$b.apply(this, arguments);
}



var index$E = {
  __proto__: null,
  Builds: index$C,
  Spec: index$D,
  getCollection: getCollection$z,
  getSingle: getSingle$m,
  create: create$h,
  update: update$h,
  pruneBuilds: pruneBuilds,
  remove: remove$i,
  task: task$b
};

var DataSizeUnits;

(function (DataSizeUnits) {
  DataSizeUnits["KB"] = "K";
  DataSizeUnits["MB"] = "M";
  DataSizeUnits["GB"] = "G";
  DataSizeUnits["TB"] = "T";
})(DataSizeUnits || (DataSizeUnits = {}));

var BaseCapabilities;

(function (BaseCapabilities) {
  BaseCapabilities["CAP_CHOWN"] = "CAP_CHOWN";
  BaseCapabilities["CAP_FSETID"] = "CAP_FSETID";
  BaseCapabilities["CAP_DAC_OVERRIDE"] = "CAP_DAC_OVERRIDE";
  BaseCapabilities["CAP_FOWNER"] = "CAP_FOWNER";
  BaseCapabilities["CAP_SETFCAP"] = "CAP_SETFCAP";
  BaseCapabilities["CAP_SETGID"] = "CAP_SETGID";
  BaseCapabilities["CAP_SETUID"] = "CAP_SETUID";
  BaseCapabilities["CAP_KILL"] = "CAP_KILL";
  BaseCapabilities["CAP_MKNOD"] = "CAP_MKNOD";
  BaseCapabilities["CAP_NET_BIND_SERVICE"] = "CAP_NET_BIND_SERVICE";
  BaseCapabilities["CAP_NET_RAW"] = "CAP_NET_RAW";
  BaseCapabilities["CAP_AUDIT_WRITE"] = "CAP_AUDIT_WRITE";
  BaseCapabilities["CAP_SYS_CHROOT"] = "CAP_SYS_CHROOT";
})(BaseCapabilities || (BaseCapabilities = {}));

var PrivilegedCapabilities;

(function (PrivilegedCapabilities) {
  PrivilegedCapabilities["CAP_SETPCAP"] = "CAP_SETPCAP";
  PrivilegedCapabilities["CAP_DAC_READ_SEARCH"] = "CAP_DAC_READ_SEARCH";
  PrivilegedCapabilities["CAP_NET_ADMIN"] = "CAP_NET_ADMIN";
  PrivilegedCapabilities["CAP_NET_BROADCAST"] = "CAP_NET_BROADCAST";
  PrivilegedCapabilities["CAP_SYS_ADMIN"] = "CAP_SYS_ADMIN";
  PrivilegedCapabilities["CAP_SYS_MODULE"] = "CAP_SYS_MODULE";
  PrivilegedCapabilities["CAP_SYS_NICE"] = "CAP_SYS_NICE";
  PrivilegedCapabilities["CAP_SYS_PACCT"] = "CAP_SYS_PACCT";
  PrivilegedCapabilities["CAP_SYS_PTRACE"] = "CAP_SYS_PTRACE";
  PrivilegedCapabilities["CAP_SYS_RAWIO"] = "CAP_SYS_RAWIO";
  PrivilegedCapabilities["CAP_SYS_RESOURCE"] = "CAP_SYS_RESOURCE";
  PrivilegedCapabilities["CAP_SYS_TTY_CONFIG"] = "CAP_SYS_TTY_CONFIG";
  PrivilegedCapabilities["CAP_SYSLOG"] = "CAP_SYSLOG";
  PrivilegedCapabilities["CAP_AUDIT_CONTROL"] = "CAP_AUDIT_CONTROL";
  PrivilegedCapabilities["CAP_AUDIT_READ"] = "CAP_AUDIT_READ";
  PrivilegedCapabilities["CAP_IPC_LOCK"] = "CAP_IPC_LOCK";
  PrivilegedCapabilities["CAP_IPC_OWNER"] = "CAP_IPC_OWNER";
  PrivilegedCapabilities["CAP_LINUX_IMMUTABLE"] = "CAP_LINUX_IMMUTABLE";
  PrivilegedCapabilities["CAP_MAC_ADMIN"] = "CAP_MAC_ADMIN";
  PrivilegedCapabilities["CAP_MAC_OVERRIDE"] = "CAP_MAC_OVERRIDE";
  PrivilegedCapabilities["CAP_BLOCK_SUSPEND"] = "CAP_BLOCK_SUSPEND";
})(PrivilegedCapabilities || (PrivilegedCapabilities = {}));

var Namespaces;

(function (Namespaces) {
  Namespaces["IPC"] = "ipc";
  Namespaces["PID"] = "pid";
  Namespaces["UTS"] = "uts";
  Namespaces["NETWORK"] = "network";
  Namespaces["MOUNT"] = "mount";
  Namespaces["USER"] = "user";
})(Namespaces || (Namespaces = {}));



var index$F = {
  __proto__: null,
  get DataSizeUnits () { return DataSizeUnits; },
  get BaseCapabilities () { return BaseCapabilities; },
  get PrivilegedCapabilities () { return PrivilegedCapabilities; },
  get Namespaces () { return Namespaces; }
};

/**
 * Opens connection to account channel. First, requests an access token using
 * the authorization token from OAuth. Then, takes that response and appends it to the URL,
 * which will return a websocket we can listen on.
 * @param params Credentials to connect to pipeline
 */

function connectToAccountChannel(_x) {
  return _connectToAccountChannel.apply(this, arguments);
}

function _connectToAccountChannel() {
  _connectToAccountChannel = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var target, secretResp;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target = links.channels().account();
            _context.next = 3;
            return getRequest({
              target: target,
              token: params.token,
              settings: params.settings
            });

          case 3:
            secretResp = _context.sent;

            if (secretResp.ok) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", secretResp);

          case 6:
            return _context.abrupt("return", connectToSocket({
              target: target,
              token: secretResp.value.data.token,
              settings: params.settings,
              onMessage: params.onMessage
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _connectToAccountChannel.apply(this, arguments);
}

function connectToHubChannel(_x) {
  return _connectToHubChannel.apply(this, arguments);
}

function _connectToHubChannel() {
  _connectToHubChannel = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var target, secretResp;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            target = links.channels().hub();
            _context.next = 3;
            return getRequest(_extends({}, params, {
              target: target
            }));

          case 3:
            secretResp = _context.sent;

            if (secretResp.ok) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", secretResp);

          case 6:
            return _context.abrupt("return", connectToSocket({
              target: target,
              token: secretResp.value.data.token,
              settings: params.settings,
              onMessage: params.onMessage
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _connectToHubChannel.apply(this, arguments);
}



var index$G = {
  __proto__: null,
  connectToAccountChannel: connectToAccountChannel,
  connectToHubChannel: connectToHubChannel
};

function postResponse(_x) {
  return _postResponse.apply(this, arguments);
}

function _postResponse() {
  _postResponse = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", postRequest(_extends({}, params, {
              target: links.surveys().single(params.value.survey_id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _postResponse.apply(this, arguments);
}

function getResponse(_x2) {
  return _getResponse.apply(this, arguments);
}

function _getResponse() {
  _getResponse = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.surveys().response(params.survey_id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getResponse.apply(this, arguments);
}

var response = {
  __proto__: null,
  postResponse: postResponse,
  getResponse: getResponse
};

function getSingle$n(_x) {
  return _getSingle$n.apply(this, arguments);
}

function _getSingle$n() {
  _getSingle$n = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.surveys().single(params.id)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getSingle$n.apply(this, arguments);
}

var survey = {
  __proto__: null,
  getSingle: getSingle$n
};



var index$H = {
  __proto__: null,
  Response: response,
  Survey: survey
};

function getCollection$A(_x) {
  return _getCollection$A.apply(this, arguments);
}

function _getCollection$A() {
  _getCollection$A = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.pipelines().collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$A.apply(this, arguments);
}

function getSingle$o(_x2) {
  return _getSingle$o.apply(this, arguments);
}

function _getSingle$o() {
  _getSingle$o = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.pipelines().single(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$o.apply(this, arguments);
}

function create$i(_x3) {
  return _create$i.apply(this, arguments);
}

function _create$i() {
  _create$i = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.pipelines().collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$i.apply(this, arguments);
}

function update$i(_x4) {
  return _update$i.apply(this, arguments);
}

function _update$i() {
  _update$i = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.pipelines().single(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$i.apply(this, arguments);
}



var other = {
  __proto__: null
};



var container = {
  __proto__: null
};



var source = {
  __proto__: null
};



var index$I = {
  __proto__: null,
  Source: source
};



var build = {
  __proto__: null
};



var index$J = {
  __proto__: null,
  Build: build
};



var environment = {
  __proto__: null
};



var index$K = {
  __proto__: null,
  Other: other,
  Container: container,
  Image: index$I,
  Stack: index$J,
  Environment: environment
};

/****************************** Functions ******************************/

function trigger(_x) {
  return _trigger.apply(this, arguments);
}
/** ### `triggerWithSecret()` 🚀
 *
 * Used to trigger a pipeline with a secret created
 *  from generating a trigger key. This function does not require
 *  authentication
 *
 * ---
 *
 * ## Important Notes:
 * - 🚀 Use the cycle job tracker helper function with this function to help
 * you track jobs easier. Basic usage shown in example below
 *
 * ---
 *
 * ### Params
 * @param params is an object for which to put necessary parameters
 *  for triggering a pipeline go
 *
 * @param id id of the pipeline to trigger. This can be found on
 *  the settings page of pipelines
 *
 * @param params.secret the secret from a trigger key. If you have not
 *  yet created a trigger, this can be done easily though the
 *  [Cycle portal](https://portal.cycle.io) or via our api using the
 *  create trigger key function (`Pipelines.TriggerKeys.create()`)
 *
 * ---
 *
 * ### Usage
 * @example
 *  ```ts
 *  const params: Pipelines.TriggerWithSecretParams = {
 *    ...YOUR_BASE_PARAMS,
 *    secret: YOUR_TRIGGER_KEY_SECRET
 *  }
 *
 *  async function() {
 *    const job = await Pipelines.triggerWithSecret(params);
 *
 *    try {
 *     // use our future helper lib job tracker here
 *      await jobTracker(job);
 *    } catch(e) {
 *      // do something if job errors
 *      console.error(e);
 *    }
 *  }
 *  ```
 * For more information on what a tasks returns refer to
 *  [tasks descriptor in Cycle Docs](https://docs.cycle.io/api/jobs/task-descriptor/) for more
 *  information on tasks and how to handle them
 * ---
 *
 * ### Cycle Info
 * __Something doesn't look right or work as intended?__ \
 * Help us make a better TypeScript Platform Interface by submitting an issue on
 * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or
 * forking our repo and submitting a
 * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).
 *
 * [General Docs](https://docs.cycle.io) /
 * [Public API Docs](https://docs.cycle.io/api/introduction) /
 * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /
 * [Cycle's Website](https://cycle.io)
 *
 * ---
 *
 * Last Updated: 2021.01.11 — Grady S
 */

function _trigger() {
  _trigger = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", task$c(_extends({}, params, {
              value: {
                action: "trigger"
              }
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _trigger.apply(this, arguments);
}

function triggerWithSecret(_x2) {
  return _triggerWithSecret.apply(this, arguments);
}

function _triggerWithSecret() {
  _triggerWithSecret = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", postRequest(_extends({}, params, {
              target: links.pipelines().trigger(params.id)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _triggerWithSecret.apply(this, arguments);
}

function remove$j(_x3) {
  return _remove$j.apply(this, arguments);
}

function _remove$j() {
  _remove$j = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.pipelines().single(params.id)
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _remove$j.apply(this, arguments);
}

function task$c(_x4) {
  return _task$c.apply(this, arguments);
}

function _task$c() {
  _task$c = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", postRequest(_extends({}, params, {
              target: links.pipelines().tasks(params.id)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _task$c.apply(this, arguments);
}

/****************************** Functions ******************************/

function getCollection$B(_x) {
  return _getCollection$B.apply(this, arguments);
}

function _getCollection$B() {
  _getCollection$B = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.pipelines().runs(params.pipelineId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$B.apply(this, arguments);
}



var index$L = {
  __proto__: null,
  getCollection: getCollection$B
};

/****************************** Functions ******************************/

/** Get pipeline keys as a collection
 * @summary get a collection of keys in a given pipeline
 * @param params object containing the target pipelineId to fetch keys for
 */

function getCollection$C(_x) {
  return _getCollection$C.apply(this, arguments);
}

function _getCollection$C() {
  _getCollection$C = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", getRequest(_extends({}, params, {
              target: links.pipelines().keys(params.pipelineId).collection()
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getCollection$C.apply(this, arguments);
}

function getSingle$p(_x2) {
  return _getSingle$p.apply(this, arguments);
}

function _getSingle$p() {
  _getSingle$p = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", getRequest(_extends({}, params, {
              target: links.pipelines().keys(params.pipelineId).single(params.keyId)
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSingle$p.apply(this, arguments);
}

function create$j(_x3) {
  return _create$j.apply(this, arguments);
}

function _create$j() {
  _create$j = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", postRequest(_extends({}, params, {
              target: links.pipelines().keys(params.pipelineId).collection()
            })));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create$j.apply(this, arguments);
}

function update$j(_x4) {
  return _update$j.apply(this, arguments);
}

function _update$j() {
  _update$j = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", patchRequest(_extends({}, params, {
              target: links.pipelines().keys(params.pipelineId).single(params.keyId)
            })));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _update$j.apply(this, arguments);
}

/****************************** Functions ******************************/

function remove$k(_x) {
  return _remove$k.apply(this, arguments);
}

function _remove$k() {
  _remove$k = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", deleteRequest(_extends({}, params, {
              target: links.pipelines().keys(params.pipelineId).single(params.keyId)
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _remove$k.apply(this, arguments);
}



var index$M = {
  __proto__: null,
  getCollection: getCollection$C,
  getSingle: getSingle$p,
  create: create$j,
  update: update$j,
  remove: remove$k
};



var index$N = {
  __proto__: null,
  Runs: index$L,
  TriggerKeys: index$M,
  Steps: index$K,
  getCollection: getCollection$A,
  getSingle: getSingle$o,
  create: create$i,
  update: update$i,
  trigger: trigger,
  triggerWithSecret: triggerWithSecret,
  remove: remove$j,
  task: task$c
};

export { index as Account, index$1 as Announcements, index$2 as Audit, index$3 as Auth, index$b as Billing, index$c as ChangeLog, index$j as Containers, index$m as DNS, links$1 as Endpoints, index$p as Environments, error as Errors, index$z as Hubs, index$r as Images, index$x as Infrastructure, index$y as Jobs, index$G as Notifications, index$N as Pipelines, request as Request, index$A as SDN, index$B as Secrets, index$E as Stacks, index$F as Structs, index$H as Surveys, websocket as Websocket };
//# sourceMappingURL=cycle-api.esm.js.map
