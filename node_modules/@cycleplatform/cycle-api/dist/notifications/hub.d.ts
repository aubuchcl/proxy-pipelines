import * as Request from "../common/api/request";
import { StandardParams } from "../common/api";
import { Notification } from "./notification";
/**
 * Possible event types that can be received
 * on the hub notification channel
 */
export declare type HubTopic = "billing.credit.created" | "billing.credit.state.changed" | "billing.credit.error" | "billing.discount.state.changed" | "billing.discount.error" | "billing.invoice.created" | "billing.invoice.updated" | "billing.invoice.state.changed" | "billing.invoice.error" | "billing.method.created" | "billing.method.state.changed" | "billing.method.updated" | "billing.method.error" | "billing.order.created" | "billing.order.state.changed" | "billing.order.error" | "billing.order.updated" | "billing.service.state.changed" | "billing.service.error" | "container.created" | "container.updated" | "container.reconfigured" | "container.state.changed" | "container.desired_state.changed" | "container.error" | "container.instance.state.changed" | "container.instance.error" | "container.instances.reconfigured" | "container.instance.migration.update" | "container.instance.health.status.changed" | "dns.certificate.state.changed" | "dns.certificate.error" | "dns.zone.state.changed" | "dns.zone.error" | "dns.zone.created" | "dns.zone.verified" | "dns.zone.reconfigured" | "dns.zone.certificate.ready" | "dns.zone.record.state.changed" | "dns.zone.records.reconfigured" | "environment.started" | "environment.stopped" | "environment.created" | "environment.updated" | "environment.error" | "environment.state.changed" | "environment.services.reconfigured" | "environment.services.vpn.users.updated" | "environment.services.lb.ip.acquired" | "environment.scoped-variable.created" | "environment.scoped-variable.updated" | "environment.scoped-variable.state.changed" | "hub.activity.new" | "hub.state.changed" | "hub.error" | "hub.updated" | "hub.api_key.created" | "hub.api_key.updated" | "hub.api_key.state.changed" | "hub.api_key.error" | "hub.membership.state.changed" | "hub.membership.error" | "hub.membership.updated" | "hub.membership.new" | "image.created" | "image.state.changed" | "image.updated" | "image.error" | "image.source.state.changed" | "image.source.error" | "image.source.updated" | "image.source.created" | "infrastructure.ips.assignment.state.changed" | "infrastructure.ips.assignment.error" | "ips_pool.state.changed" | "ips_pool.error" | "infrastructure.server.state.changed" | "infrastructure.server.error" | "infrastructure.server.new" | "infrastructure.server.reconfigured" | "job.created" | "job.state.changed" | "pipeline.state.changed" | "pipeline.error" | "pipeline.updated" | "pipeline.created" | "pipeline.key.state.changed" | "pipeline.key.error" | "pipeline.key.updated" | "pipeline.key.created" | "pipeline.run.state.changed" | "pipeline.run.error" | "pipeline.run.created" | "sdn.network.created" | "sdn.network.error" | "sdn.network.reconfigured" | "sdn.network.state.changed" | "sdn.network.updated" | "secret.state.changed" | "secret.error" | "stack.state.changed" | "stack.error" | "stack.created" | "stack.updated" | "stack.build.created" | "stack.build.state.changed" | "stack.build.error" | "stack.build.deployed";
export declare type HubNotification = Notification<HubTopic>;
export interface HubPipelineParams extends StandardParams {
    onMessage?: (v: HubNotification) => void;
}
export interface HubSecretResponse {
    data: {
        token: string;
    };
}
export declare function connectToHubChannel(params: HubPipelineParams): Promise<Request.ApiResult<WebSocket>>;
