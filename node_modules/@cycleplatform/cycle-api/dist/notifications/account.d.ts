import { Token } from "../auth";
import * as Request from "../common/api/request";
import { Settings } from "../common/api";
import { Notification } from "./notification";
/**
 * Possible event types that can be received
 * on the account notification channel
 */
export declare type AccountTopic = "account.state.changed" | "account.error" | "employee.state.changed" | "employee.error" | "hub.created" | "hub.membership.state.changed" | "hub.membership.error" | "hub.membership.updated" | "hub.invite.new" | "announcement.created" | "announcement.updated" | "announcement.state.changed" | "job.created" | "job.state.changed";
export declare type AccountNotification = Notification<AccountTopic>;
/**
 * Parameters required to initiate an account channel connection
 */
export interface AccountChannelParams {
    token: Token;
    settings: Settings;
    onMessage?: (v: AccountNotification) => void;
}
/**
 * Response from request to initiate account channel.
 * Use the token as a parameter to upgrade connection
 */
export interface AccountChannelSecretResponse {
    data: {
        token: string;
    };
}
/**
 * Opens connection to account channel. First, requests an access token using
 * the authorization token from OAuth. Then, takes that response and appends it to the URL,
 * which will return a websocket we can listen on.
 * @param params Credentials to connect to pipeline
 */
export declare function connectToAccountChannel(params: AccountChannelParams): Promise<Request.ApiResult<WebSocket>>;
