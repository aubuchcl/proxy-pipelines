{"version":3,"file":"cycle-api.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/api/query.ts","../src/common/api/version.ts","../src/common/api/request.ts","../src/common/api/links.ts","../src/common/api/websocket.ts","../src/resources/accounts/membership.ts","../src/resources/accounts/invite.ts","../src/resources/accounts/logins.ts","../src/resources/accounts/account.ts","../src/resources/announcements/announcement.ts","../src/resources/audits/entry.ts","../src/auth/common.ts","../src/auth/token.ts","../src/auth/password.ts","../src/auth/index.ts","../src/resources/billing/credits/credit.ts","../src/resources/billing/invoices/invoice.ts","../src/resources/billing/invoices/tasks.ts","../src/resources/billing/methods/method.ts","../src/resources/billing/methods/tasks/method.ts","../src/resources/billing/orders/order.ts","../src/resources/billing/orders/tasks/order.ts","../src/resources/billing/plans/support.ts","../src/resources/billing/plans/tiers.ts","../src/resources/billing/services/service.ts","../src/resources/billing/services/overages.ts","../src/resources/changelog/changelog.ts","../src/resources/changelog/tasks.ts","../src/resources/containers/servers/server.ts","../src/resources/containers/instances/telemetry/resources.ts","../src/resources/containers/instances/volume.ts","../src/resources/containers/instances/instance.ts","../src/resources/containers/instances/console.ts","../src/resources/containers/instances/ssh.ts","../src/resources/containers/instances/tasks.ts","../src/resources/containers/compatible-images/compatible-image.ts","../src/resources/containers/telemetry/instances.ts","../src/resources/stacks/spec/v1/deploy.ts","../src/resources/containers/container.ts","../src/resources/containers/tasks.ts","../src/resources/containers/services.ts","../src/resources/containers/summary.ts","../src/resources/dns/records/record.ts","../src/resources/dns/records/tasks.ts","../src/resources/dns/tasks/zone.ts","../src/resources/dns/zone.ts","../src/resources/dns/tls/attempts.ts","../src/resources/environments/environment.ts","../src/resources/environments/summary.ts","../src/resources/environments/tasks.ts","../src/resources/environments/scoped-variables.ts","../src/resources/environments/telemetry/instances.ts","../src/resources/environments/services/discovery.ts","../src/resources/environments/services/vpn.ts","../src/resources/environments/services/loadbalancer/loadbalancer.ts","../src/resources/images/sources/sources.ts","../src/resources/images/sources/tasks.ts","../src/resources/images/image.ts","../src/resources/images/tasks.ts","../src/resources/images/containers.ts","../src/resources/images/build-log.ts","../src/resources/infrastructure/provider/location.ts","../src/resources/infrastructure/provider/server.ts","../src/resources/infrastructure/provider/provider.ts","../src/resources/infrastructure/servers/usage.ts","../src/resources/infrastructure/servers/instances.ts","../src/resources/infrastructure/stats/telemetry.ts","../src/resources/infrastructure/servers/server.ts","../src/resources/infrastructure/servers/console.ts","../src/resources/infrastructure/servers/tasks.ts","../src/resources/infrastructure/ips/pool.ts","../src/resources/infrastructure/summary/summary.ts","../src/resources/infrastructure/deployment/strategies.ts","../src/resources/jobs/job.ts","../src/resources/hubs/invite.ts","../src/resources/hubs/membership.ts","../src/resources/hubs/apikey.ts","../src/resources/hubs/activity.ts","../src/resources/hubs/capability.ts","../src/resources/hubs/hub.ts","../src/resources/hubs/tasks/hub.ts","../src/resources/sdn/tasks.ts","../src/resources/sdn/networks.ts","../src/resources/stacks/builds/tasks/build.ts","../src/resources/stacks/builds/build.ts","../src/resources/stacks/stack.ts","../src/resources/stacks/tasks/stack.ts","../src/common/structs/spec.ts","../src/notifications/account.ts","../src/notifications/hub.ts","../src/resources/surveys/response.ts","../src/resources/surveys/survey.ts","../src/resources/pipelines/pipeline.ts","../src/resources/pipelines/tasks.ts","../src/resources/pipelines/runs/run.ts","../src/resources/pipelines/trigger-keys/trigger-key.ts","../src/resources/pipelines/trigger-keys/tasks.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/**\n * Parameters used to narrow down a query,\n * passed into an API request function\n */\nexport interface QueryParams<\n  /** Includes */\n  I extends string = string,\n  /** Meta */\n  M extends string = string,\n  /** Filters */\n  F extends string = string\n> {\n  /**\n   * Optional fields to expand.\n   * Injects into an 'includes' field at root of document return\n   */\n  include?: I[];\n\n  /**\n   * Optional related data not included in the doc.\n   * Injected into the 'meta' field of an individual resource\n   */\n  meta?: M[];\n\n  /**\n   * Specify a list of properties to sort by. Signify descending with a '-',\n   * i.e. ['-id']\n   */\n  sort?: string[];\n\n  /**\n   * Filter by specific params, i.e. {name: 'Website'}\n   */\n  filter?: Partial<\n    Record<F | \"search\", string | string[] | Record<string, any>>\n  >;\n\n  /**\n   * Pagination. Specify number of resources for the 'page' and which\n   * page number you wish to return.\n   */\n  page?: Page;\n}\n\ntype Page = pageWithSize | pageWithOffset;\n\ninterface pageWithSize {\n  number: number;\n  size?: number;\n  offset?: never;\n}\n\ninterface pageWithOffset {\n  number: number;\n  size?: never;\n  offset: number;\n}\n\n/**\n * Format query parameters into a URL string for the API call\n * @param q QueryParams object\n */\nexport function formatParams(q: QueryParams | undefined) {\n  if (!q) {\n    return \"\";\n  }\n\n  const result = {};\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      (result as any)[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      (result as any)[prop] = cur.join(\",\");\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if (!cur.hasOwnProperty(p)) {\n          continue;\n        }\n        isEmpty = false;\n        recurse(cur[p], prop ? `${prop}[${p}]` : p);\n      }\n      if (isEmpty && prop) {\n        (result as any)[prop] = {};\n      }\n    }\n  }\n  recurse(q, \"\");\n\n  return Object.keys(result)\n    .map(\n      (k) =>\n        `${encodeURIComponent(k)}=${encodeURIComponent((result as any)[k])}`,\n    )\n    .join(\"&\");\n}\n","export const VERSION = \"v1\";\n","import { Token } from \"../../auth\";\nimport { ErrorResource } from \"./error\";\nimport { formatParams, QueryParams } from \"./query\";\nimport { CreatedTask, ResourceId, Task } from \"../structs\";\nimport { Settings } from \"./settings\";\nimport { VERSION } from \"./version\";\n\n/**\n * The result structure of an API request. Can be success or failure\n */\nexport type ApiResult<T> = ResultSuccess<T> | ResultFail<ErrorResource>;\n\nexport type BaseParams<T = QueryParams> = {\n  query?: T;\n  settings?: Settings;\n};\n\nexport type StandardParams<T = QueryParams> = BaseParams<T> & {\n  token: Token | string;\n  hubId: ResourceId;\n};\n\nexport type PostParams<T = object> = {\n  value: T;\n};\n\nexport type PatchParams<T = object> = {\n  value: T;\n};\n\nexport type OptionalPostParam<T = object> = Partial<PostParams<T>>;\n\nexport type TaskParams<A extends string, T = {}> = {\n  value: Task<A, T>;\n};\n\n/** The result of a successful API call */\nexport interface ResultSuccess<T> {\n  ok: true;\n  value: T;\n}\n\n/** The result of a failed API call */\nexport interface ResultFail<T> {\n  ok: false;\n  error: T;\n}\n\n/** Standard settings for API call */\nexport const ApiRequestInit: RequestInit = {\n  method: \"GET\",\n  headers: new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  }),\n  mode: \"cors\",\n  credentials: \"omit\",\n  cache: \"no-cache\",\n};\n\n/** Take a settings bag and turn it into a valid API URL endpoint */\nexport function makeUrl(settings?: Settings, websocket?: boolean) {\n  let secure = true;\n  let version = `/${VERSION}`;\n\n  if (settings && settings.noVersion) {\n    version = \"\";\n  }\n\n  if (settings && settings.useHttp) {\n    secure = false;\n  }\n\n  if (settings && settings.url && settings.url.indexOf(\"://\") > -1) {\n    return settings.url;\n  }\n\n  const prefix = websocket\n    ? `ws${secure ? \"s\" : \"\"}://`\n    : `http${secure ? \"s\" : \"\"}://`;\n\n  if (settings && settings.url) {\n    return `${prefix}${settings.url}${version}`;\n  }\n\n  // Default URL returned. Version will be updated here if changed\n  return `${prefix}api.cycle.io${version}`;\n}\n\n/** Make the request */\nasync function makeRequest<T>(\n  req: Request,\n  token?: Token | string,\n  hubId?: ResourceId,\n  settings?: Settings,\n): Promise<ApiResult<T>> {\n  if (token) {\n    req.headers.append(\n      \"Authorization\",\n      `Bearer ${typeof token === \"string\" ? token : token.token}`,\n    );\n  }\n\n  if (hubId) {\n    req.headers.append(\"X-Hub-Id\", hubId);\n  }\n\n  try {\n    const resp = await fetch(req, {\n      signal: settings && settings.signal,\n    });\n    if (!resp.ok) {\n      const error = await resp.json();\n      return {\n        ok: false,\n        error: error.error,\n      };\n    }\n\n    try {\n      const result: T = await resp.json();\n      return {\n        ok: true,\n        value: result,\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        error: {\n          status: 0,\n          title: \"Error parsing response\",\n          detail: \"API returned a non-JSON response\",\n          code: \"0.parse_error\",\n        },\n      };\n    }\n  } catch (e) {\n    return {\n      ok: false,\n      error: {\n        status: 0,\n        title: \"Unable to reach server\",\n        detail: \"There was an error attempting to fetch data from server.\",\n        code: \"0.network_error\",\n      },\n    };\n  }\n}\n\nexport async function getRequest<T>({\n  target,\n  query = {},\n  token,\n  hubId,\n  settings,\n}: {\n  target: string;\n  query?: QueryParams;\n  token?: Token | string;\n  hubId?: ResourceId;\n  settings?: Settings;\n}): Promise<ApiResult<T>> {\n  const req = new Request(\n    `${makeUrl(settings)}${target}?${formatParams(query)}`,\n    {\n      ...ApiRequestInit,\n      credentials:\n        settings && settings.credentials ? settings.credentials : undefined,\n    },\n  );\n  return makeRequest<T>(req, token, hubId, settings);\n}\n\nexport async function postRequest<T>({\n  target,\n  value,\n  query = {},\n  token,\n  hubId,\n  settings,\n}: {\n  target: string;\n  value?: object;\n  query?: QueryParams;\n  hubId?: ResourceId;\n  token?: Token | string;\n  settings?: Settings;\n}): Promise<ApiResult<T>> {\n  const req = new Request(\n    `${makeUrl(settings)}${target}?${formatParams(query)}`,\n    {\n      ...ApiRequestInit,\n      ...{\n        method: \"POST\",\n        body: JSON.stringify(value),\n        credentials:\n          settings && settings.credentials ? settings.credentials : undefined,\n      },\n    },\n  );\n\n  return makeRequest<T>(req, token, hubId, settings);\n}\n\nexport async function patchRequest<T>({\n  target,\n  value,\n  query = {},\n  hubId,\n  token,\n  settings,\n}: {\n  target: string;\n  value: object;\n  query?: QueryParams;\n  hubId?: ResourceId;\n  token?: Token | string;\n  settings?: Settings;\n}): Promise<ApiResult<T>> {\n  const req = new Request(\n    `${makeUrl(settings)}${target}?${formatParams(query)}`,\n    {\n      ...ApiRequestInit,\n      ...{\n        method: \"PATCH\",\n        body: JSON.stringify(value),\n        credentials:\n          settings && settings.credentials ? settings.credentials : undefined,\n      },\n    },\n  );\n\n  return makeRequest<T>(req, token, hubId, settings);\n}\n\nexport async function deleteRequest<T = CreatedTask<\"delete\">>({\n  target,\n  query = {},\n  token,\n  value,\n  hubId,\n  settings,\n}: {\n  target: string;\n  query?: QueryParams;\n  token?: Token | string;\n  hubId?: ResourceId;\n  value?: object;\n  settings?: Settings;\n}): Promise<ApiResult<T>> {\n  const req = new Request(\n    `${makeUrl(settings)}${target}?${formatParams(query)}`,\n    {\n      ...ApiRequestInit,\n      ...{\n        method: \"DELETE\",\n        body: value ? JSON.stringify(value) : undefined,\n        credentials:\n          settings && settings.credentials ? settings.credentials : undefined,\n      },\n    },\n  );\n\n  return makeRequest<T>(req, token, hubId, settings);\n}\n","import { ResourceId } from \"../structs\";\n\n/**\n * All possible endpoints of Cycle's API\n */\nexport const links = {\n  // Account\n  account: () => ({\n    single: () => `/account`,\n    invites: () => ({\n      collection: () => `/account/invites`,\n      invite: (id: ResourceId) => `/account/invites/${id}`,\n    }),\n    memberships: () => `/account/memberships`,\n    logins: () => `/account/logins`,\n  }),\n\n  // Announcements\n  announcements: () => ({\n    collection: () => `/announcements`,\n  }),\n\n  // Audit\n  audit: () => ({\n    entries: () => `/audit/entries`,\n  }),\n\n  // Billing\n  billing: () => ({\n    orders: () => ({\n      collection: () => `/billing/orders`,\n      single: (id: ResourceId) => `/billing/orders/${id}`,\n      tasks: (id: ResourceId) => `/billing/orders/${id}/tasks`,\n    }),\n    plans: () => ({\n      support: () => `/billing/plans/support`,\n      tiers: () => `/billing/plans/tiers`,\n    }),\n    methods: () => ({\n      collection: () => `/billing/methods`,\n      single: (id: ResourceId) => `/billing/methods/${id}`,\n    }),\n    invoices: () => ({\n      collection: () => `/billing/invoices`,\n      single: (id: ResourceId) => `/billing/invoices/${id}`,\n      tasks: (id: ResourceId) => `/billing/invoices/${id}/tasks`,\n    }),\n    services: () => ({\n      collection: () => `/billing/services`,\n      single: (id: ResourceId) => `/billing/services/${id}`,\n      overage: () => `/billing/services/overages`,\n    }),\n    credits: () => ({\n      collection: () => `/billing/credits`,\n      single: (id: ResourceId) => `/billing/credits/${id}`,\n    }),\n  }),\n\n  // Changelog\n  changelog: () => ({\n    single: (id: ResourceId) => `/changelogs/${id}`,\n    collection: () => \"/changelogs\",\n    tasks: (id: ResourceId) => `/changelogs/${id}/tasks`,\n  }),\n\n  // Notification Channels\n  channels: () => ({\n    account: () => \"/account/notifications\",\n    hub: () => \"/hubs/current/notifications\",\n  }),\n\n  // Containers\n  containers: () => ({\n    collection: () => `/containers`,\n    single: (id: ResourceId) => `/containers/${id}`,\n    tasks: (id: ResourceId) => `/containers/${id}/tasks`,\n    servers: (id: ResourceId) => ({\n      list: () => `/containers/${id}/servers`,\n      usable: () => `/containers/${id}/servers/usable`,\n    }),\n    events: (id: ResourceId) => `/containers/${id}/events`,\n    summary: (id: ResourceId) => `/containers/${id}/summary`,\n    compatibleImages: (id: ResourceId) => `/containers/${id}/compatible-images`,\n    instances: () => ({\n      collection: (container: ResourceId) =>\n        `/containers/${container}/instances`,\n      single: (id: ResourceId, container: ResourceId) =>\n        `/containers/${container}/instances/${id}`,\n      console: (id: ResourceId, container: ResourceId) =>\n        `/containers/${container}/instances/${id}/console`,\n      ssh: (instance: ResourceId, container: ResourceId) =>\n        `/containers/${container}/instances/${instance}/ssh`,\n      volumes: (id: ResourceId, container: ResourceId) =>\n        `/containers/${container}/instances/${id}/volumes`,\n      tasks: (id: ResourceId, container: ResourceId) =>\n        `/containers/${container}/instances/${id}/tasks`,\n      telemetry: () => ({\n        resourcesReport: (id: ResourceId, container: ResourceId) =>\n          `/containers/${container}/instances/${id}/telemetry/resources/report`,\n        resourcesStream: (id: ResourceId, container: ResourceId) =>\n          `/containers/${container}/instances/${id}/telemetry/resources/stream`,\n      }),\n    }),\n    volumes: () => ({\n      accounts: (container: ResourceId) =>\n        `/containers/${container}/volumes/accounts`,\n      account: (id: ResourceId, container: ResourceId) =>\n        `/containers/${container}/volumes/accounts/${id}`,\n    }),\n    telemetry: () => ({\n      instances: (id: ResourceId) => `/containers/${id}/telemetry/instances`,\n    }),\n  }),\n\n  // DNS\n  dns: () => ({\n    zones: () => ({\n      collection: () => `/dns/zones`,\n      single: (id: ResourceId) => `/dns/zones/${id}`,\n      tasks: (id: ResourceId) => `/dns/zones/${id}/tasks`,\n      records: (id: ResourceId) => `/dns/zones/${id}/records`,\n      record: (zoneId: ResourceId, id: ResourceId) =>\n        `/dns/zones/${zoneId}/records/${id}`,\n      recordTasks: (zoneId: ResourceId, id: ResourceId) =>\n        `/dns/zones/${zoneId}/records/${id}/tasks`,\n    }),\n    domains: () => ({\n      collection: () => `/dns/domains`,\n    }),\n    tls: () => ({\n      collection: () => `/dns/tls/attempts`,\n    }),\n  }),\n\n  // Environments\n  environments: () => ({\n    collection: () => `/environments`,\n    single: (id: ResourceId) => `/environments/${id}`,\n    events: (id: ResourceId) => `/environments/${id}/events`,\n    summary: (id: ResourceId) => `/environments/${id}/summary`,\n    tasks: (id: ResourceId) => `/environments/${id}/tasks`,\n    services: () => ({\n      lb: () => ({\n        info: (environment: ResourceId) =>\n          `/environments/${environment}/services/lb`,\n        tasks: (environment: ResourceId) =>\n          `/environments/${environment}/services/lb/tasks`,\n      }),\n      vpn: () => ({\n        details: (environment: ResourceId) =>\n          `/environments/${environment}/services/vpn`,\n        users: (environment: ResourceId) =>\n          `/environments/${environment}/services/vpn/users`,\n        user: (environment: ResourceId, user: ResourceId) =>\n          `/environments/${environment}/services/vpn/users/${user}`,\n        tasks: (environment: ResourceId) =>\n          `/environments/${environment}/services/vpn/tasks`,\n        logins: (environment: ResourceId) =>\n          `/environments/${environment}/services/vpn/logins`,\n      }),\n      discovery: () => ({\n        tasks: (environment: ResourceId) =>\n          `/environments/${environment}/services/discovery/tasks`,\n      }),\n    }),\n    telemetry: () => ({\n      instances: (id: ResourceId) => `/environments/${id}/telemetry/instances`,\n    }),\n    scopedVariables: (environment: ResourceId) => ({\n      collection: () => `/environments/${environment}/scoped-variables`,\n      single: (scopedVariableId: ResourceId) => `/environments/${environment}/scoped-variables/${scopedVariableId}`,\n    })\n  }),\n\n  // Hubs\n  hubs: () => ({\n    collection: () => `/hubs`,\n    single: () => `/hubs/current`,\n    tasks: () => `/hubs/current/tasks`,\n    activity: () => `/hubs/current/activity`,\n    capabilities: () => `/hubs/capabilities`,\n    tier: () => `/hubs/current/tier`,\n    invites: () => ({\n      single: (id: ResourceId) => `/hubs/current/invites/${id}`,\n      collection: () => `/hubs/current/invites`,\n    }),\n    members: () => ({\n      collection: () => `/hubs/current/members`,\n      membership: () => `/hubs/current/membership`,\n      single: (id: ResourceId) => `/hubs/current/members/${id}`,\n      account: (id: ResourceId) => `/hubs/current/members/account/${id}`,\n    }),\n    keys: () => ({\n      collection: () => `/hubs/current/api-keys`,\n      single: (id: ResourceId) => `/hubs/current/api-keys/${id}`,\n    }),\n  }),\n\n  // Images\n  images: () => ({\n    collection: () => `/images`,\n    single: (id: ResourceId) => `/images/${id}`,\n    containers: (id: ResourceId) => `/images/${id}/containers`,\n    buildLog: (id: ResourceId) => `/images/${id}/build-log`,\n    collectionTasks: () => `/images/tasks`,\n    imageTasks: (id: ResourceId) => `/images/${id}/tasks`,\n    sources: () => ({\n      collection: () => `/images/sources`,\n      single: (id: ResourceId) => `/images/sources/${id}`,\n      tasks: (id: ResourceId) => `/images/sources/${id}/tasks`,\n    }),\n  }),\n\n  // Infrastructure\n  infrastructure: () => ({\n    summary: () => `/infrastructure/summary`,\n    servers: () => ({\n      collection: () => `/infrastructure/servers`,\n      single: (id: ResourceId) => `/infrastructure/servers/${id}`,\n      console: (id: ResourceId) => `/infrastructure/servers/${id}/console`,\n      telemetry: (id: ResourceId) => `/infrastructure/servers/${id}/telemetry`,\n      instances: (id: ResourceId) => `/infrastructure/servers/${id}/instances`,\n      tasks: (id: ResourceId) => `/infrastructure/servers/${id}/tasks`,\n      tags: () => `/infrastructure/servers/tags`,\n      clusters: () => `/infrastructure/servers/clusters`,\n      usage: () => `/infrastructure/servers/usage`,\n    }),\n    providers: () => ({\n      collection: () => `/infrastructure/providers`,\n      servers: (provider: ResourceId) =>\n        `/infrastructure/providers/${provider}/servers`,\n      locations: (provider: ResourceId) =>\n        `/infrastructure/providers/${provider}/locations`,\n      features: () => `/infrastructure/locations/features`,\n    }),\n    ips: () => ({\n      pools: () => ({\n        collection: () => `/infrastructure/ips/pools`,\n        single: (id: ResourceId) => `/infrastructure/ips/pools/${id}`,\n        ips: (id: ResourceId) => `/infrastructure/ips/pools/${id}/ips`,\n      }),\n    }),\n    strategies: () => `/infrastructure/deployment-strategies`,\n  }),\n\n  // Jobs\n  jobs: () => ({\n    collection: () => `/jobs`,\n    single: (id: ResourceId) => `/jobs/${id}`,\n    latest: () => `/jobs/latest`,\n  }),\n\n  // SDN\n  sdn: () => ({\n    networks: () => ({\n      collection: () => `/sdn/networks`,\n      single: (id: ResourceId) => `/sdn/networks/${id}`,\n      tasks: (id: ResourceId) => `/sdn/networks/${id}/tasks`,\n    }),\n  }),\n\n  // Stacks\n  stacks: () => ({\n    collection: () => `/stacks`,\n    single: (id: ResourceId) => `/stacks/${id}`,\n    tasks: (id: ResourceId) => `/stacks/${id}/tasks`,\n    buildLookup: (build: ResourceId) => `/stacks/builds/${build}`,\n    builds: (stack: ResourceId) => ({\n      collection: () => `/stacks/${stack}/builds`,\n      single: (id: ResourceId) => `/stacks/${stack}/builds/${id}`,\n      tasks: (id: ResourceId) => `/stacks/${stack}/builds/${id}/tasks`,\n    }),\n  }),\n\n  // Pipelines\n  pipelines: () => ({\n    collection: () => `/pipelines`,\n    single: (id: ResourceId) => `/pipelines/${id}`,\n    runs: (id: ResourceId) => `/pipelines/${id}/runs`,\n    tasks: (id: ResourceId) => `/pipelines/${id}/tasks`,\n    trigger: (id: ResourceId) => `/pipelines/${id}/trigger`,\n    keys: (pipeline: ResourceId) => ({\n      collection: () => `/pipelines/${pipeline}/keys`,\n      single: (key: ResourceId) => `/pipelines/${pipeline}/keys/${key}`,\n    }),\n  }),\n\n  // Surveys\n  surveys: () => ({\n    single: (id: ResourceId) => `/survey/${id}`,\n    response: (id: ResourceId) => `/survey/${id}/response`,\n  }),\n};\n","import { ApiResult, makeUrl } from \"./request\";\nimport { Settings } from \"./settings\";\nimport WS from \"isomorphic-ws\";\n\nexport interface SocketConnectParams<T> {\n  target: string;\n  token: string; // provided by accompanying socket auth\n  settings?: Settings;\n  onMessage?: (v: T) => void;\n  noJsonDecode?: boolean;\n}\n\nexport async function connectToSocket<T>({\n  target,\n  token,\n  settings,\n  onMessage,\n  noJsonDecode,\n}: SocketConnectParams<T>): Promise<ApiResult<WebSocket>> {\n  let ws;\n  try {\n    ws = new WS(`${makeUrl(settings, true)}${target}?token=${token}`);\n  } catch (e) {\n    return {\n      ok: false,\n      error: {\n        code: \"0.network_error\",\n        title: (e as CloseEvent).reason,\n      },\n    };\n  }\n\n  if (onMessage) {\n    // @ts-ignore\n    ws.onmessage = (e: MessageEvent) => {\n      const payload: T = noJsonDecode ? e.data : JSON.parse(e.data as string);\n      onMessage(payload);\n    };\n  }\n\n  // @ts-ignore\n  return { ok: true, value: ws as WebSocket };\n}\n","import * as Request from \"../../common/api/request\";\r\nimport { links, StandardParams } from \"../../common/api\";\r\nimport { CollectionDoc } from \"../../common/structs\";\r\nimport * as Memberships from \"../hubs/membership\";\r\n\r\nexport async function getMemberships(params: StandardParams) {\r\n  return Request.getRequest<\r\n    CollectionDoc<Memberships.Membership, Memberships.MembershipIncludes>\r\n  >({\r\n    ...params,\r\n    target: links.account().memberships(),\r\n  });\r\n}\r\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { CollectionDoc, ResourceId, SingleDoc } from \"../../common/structs\";\nimport * as Memberships from \"../hubs/membership\";\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<\n    CollectionDoc<Memberships.Membership, Memberships.MembershipIncludes>\n  >({\n    ...params,\n    target: links.account().invites().collection(),\n  });\n}\n\n/**\n * Information on an invites state\n */\nexport interface InviteUpdateParams {\n  /** A boolean where true means the invite was accepted */\n  accept?: true;\n  /** A boolean where true means the invite was declined */\n  decline?: true;\n}\n\nexport async function update(\n  params: StandardParams & {\n    inviteId: ResourceId;\n    value: InviteUpdateParams;\n  },\n) {\n  return Request.patchRequest<\n    SingleDoc<Memberships.Membership, Memberships.MembershipIncludes>\n  >({\n    ...params,\n    target: links.account().invites().invite(params.inviteId),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  Time,\n  ResourceId,\n} from \"../../common/structs\";\nimport { PublicAccount } from \"./account\";\n\nexport type Collection = CollectionDoc<Login, LoginIncludes>;\n/**\n * The type of login used\n */\nexport type LoginType = \"password\" | \"employee\";\nexport type LoginQuery = QueryParams<keyof LoginIncludes>;\n\n/**\n * Information about a login event\n */\nexport interface BaseLogin extends Resource {\n  account: AccountInfo;\n  time: Time;\n  type: LoginType;\n  /** A boolean where true represents a successful login */\n  success: boolean;\n}\n\nexport interface PasswordLogin extends BaseLogin {\n  type: \"password\";\n}\n\nexport interface EmployeeLogin extends BaseLogin {\n  type: \"employee\";\n  employee: PublicAccount;\n}\n\nexport type Login = PasswordLogin | EmployeeLogin;\n\n/**\n * Account information\n */\nexport interface AccountInfo {\n  /** The account ID */\n  id: ResourceId;\n  /** The IP of the computer used during login */\n  ip: string;\n}\n\nexport interface LoginIncludes {\n  accounts: {\n    [key: string]: PublicAccount;\n  };\n}\n\nexport async function getCollection(params: StandardParams<LoginQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.account().logins(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Time,\n  Events,\n  State,\n} from \"../../common/structs\";\n\nexport type Collection = CollectionDoc<Account>;\nexport type Single = SingleDoc<Account>;\n/**\n * Information about the last login for the account.\n */\nexport type AccountEvent = \"last_login\";\n/**\n * The different states an account can be in.\n */\nexport type AccountState =\n  | \"new\"\n  | \"live\"\n  | \"suspending\"\n  | \"purging\"\n  | \"deleting\"\n  | \"deleted\";\n\nexport interface Account extends Resource {\n  name: Name;\n  email: Email;\n  two_factor_auth: TwoFactorAuth | null;\n  allow_support_login: boolean;\n  events: Events<AccountEvent>;\n  state: State<AccountState>;\n}\n\n/**\n * Publicly available information about the account\n */\nexport interface PublicAccount extends Resource {\n  name: Name;\n  email: Email;\n  events: PublicAccountEvents;\n}\n\n/**\n * All combined events for public account\n */\nexport type PublicAccountEvents = Events<PublicAccountEvent>;\n\n/**\n * Additional events for a Public account which extend on top of default events\n */\nexport type PublicAccountEvent = \"last_login\";\n\n/**\n * The first and last name of the account owner\n */\nexport interface Name {\n  /**\n   * The first name of the account owner\n   */\n  first: string;\n  /**\n   * The last name of the account owner\n   */\n  last: string;\n}\n/**\n * Email information for the account\n */\nexport interface Email {\n  /** The email address */\n  address: string;\n  /** A boolean representing if the email has been verified */\n  verified: boolean;\n  /** A Time resource showing when the email was added */\n  added: Time;\n}\n/**\n * Two factor auth verification information\n */\nexport interface TwoFactorAuth {\n  /**\n   * A boolean representing if the account has verified with TwoFA\n   */\n  verified: boolean;\n}\n\nexport async function getSingle(params: StandardParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.account().single(),\n  });\n}\n\nexport interface UpdateParams {\n  name?: {\n    first?: string;\n    last?: string;\n  };\n  allow_support_login?: boolean;\n}\n\nexport async function update(\n  params: StandardParams & {\n    value: UpdateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.account().single(),\n  });\n}\n\nexport async function remove(params: StandardParams) {\n  return Request.deleteRequest({\n    ...params,\n    target: links.account().single(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport {\n  Resource,\n  ResourceId,\n  UserScope,\n  State,\n  CollectionDoc,\n  SingleDoc,\n  Events,\n  Time,\n} from \"../../common/structs\";\nimport { StandardParams, links } from \"../../common/api\";\nimport { ProviderIdentifier } from \"../infrastructure/provider\";\n\nexport type Collection = CollectionDoc<Announcement>;\nexport type Single = SingleDoc<Announcement>;\n/**\n * The announcement state\n */\nexport type AnnouncementState = \"live\" | \"deleted\";\n/**\n * The announcement priority\n */\nexport type AnnouncementPriority =\n  | \"notice\"\n  | \"low\"\n  | \"medium\"\n  | \"high\"\n  | \"severe\";\n\n/**\n * The announcement resource\n */\nexport interface Announcement extends Resource {\n  id: ResourceId;\n  title: string;\n  description: string;\n  updates: Update[];\n  affected_providers: ProviderIdentifier[];\n  priority: AnnouncementPriority;\n  events: Events<\"resolved\">;\n  creator: UserScope;\n  state: State<AnnouncementState>;\n}\n\n/**\n * Information about an update made to the announcement\n */\nexport interface Update {\n  id: ResourceId;\n  message: string;\n  creator: UserScope;\n  time: Time;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.announcements().collection(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  Events,\n  UserScope,\n  ResourceId,\n  SingleDoc,\n  IP,\n} from \"../../common/structs\";\n\nexport interface EntrySession {\n  ip: IP;\n  scope: string[];\n}\n\nexport type EntryType = \"success\";\nexport enum EntryComponentType {\n  ENVIRONMENT = \"environments.Environment\",\n}\nexport enum EntryCode {\n  ENVIRONMENT_CREATED = \"environment.created\",\n}\n\nexport interface EntryComponent {\n  type: EntryComponentType;\n  id: ResourceId;\n}\n\nexport interface Entry extends Resource {\n  hub_id: ResourceId;\n  environment_id: ResourceId;\n  creator: UserScope;\n  session: EntrySession;\n  type: EntryType;\n  events: Events;\n  component: EntryComponent;\n  message: string;\n  code: EntryCode;\n}\n\nexport type Collection = CollectionDoc<Entry>;\nexport type Single = SingleDoc<Entry>;\n\nexport async function getEntries(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.audit().entries(),\n  });\n}\n","export const DEFAULT_AUTH_URL = \"auth.cycle.io\";\n","import { BaseParams, PostParams, postRequest } from \"../common/api\";\nimport { DEFAULT_AUTH_URL } from \"./common\";\nimport { Time } from \"../common/structs\";\n\n/**\n * An OAuth 2.0 token\n */\nexport interface Token {\n  token: string;\n  expires: Time;\n}\n\ninterface BrowserAccessTokenParams {\n  application_id: string;\n}\n\n/**\n * Retrieves an access code using the http-only cookie for a direct browser authentication\n */\nexport async function getBrowserAccessToken(\n  params: BaseParams & PostParams<BrowserAccessTokenParams>,\n) {\n  return postRequest<{ data: Token }>({\n    ...params,\n    target: \"/auth/token/browser\",\n    settings: {\n      ...params.settings,\n      credentials: \"include\",\n      url:\n        params.settings && params.settings.url\n          ? params.settings.url\n          : DEFAULT_AUTH_URL,\n    },\n  });\n}\n\ninterface GrantAccessTokenParams {\n  application_id: string;\n  application_auth: string;\n  grant_code: string;\n}\n\n/**\n * Retrieves an access code using the server-side flow\n */\nexport async function getGrantAccessToken(\n  params: BaseParams & PostParams<GrantAccessTokenParams>,\n) {\n  return postRequest<{ data: Token }>({\n    ...params,\n    target: \"/auth/token/grant\",\n    settings: {\n      ...params.settings,\n      credentials: \"include\",\n      url:\n        params.settings && params.settings.url\n          ? params.settings.url\n          : DEFAULT_AUTH_URL,\n    },\n  });\n}\n\nexport async function revokeAuth(params: BaseParams) {\n  return postRequest({\n    ...params,\n    target: \"/auth/revoke\",\n    value: {},\n    settings: {\n      ...params.settings,\n      credentials: \"include\",\n      url:\n        params.settings && params.settings.url\n          ? params.settings.url\n          : DEFAULT_AUTH_URL,\n    },\n  });\n}\n","import { postRequest, BaseParams, PostParams } from \"../common/api\";\nimport { DEFAULT_AUTH_URL } from \"./common\";\nimport { Time } from \"../common/structs\";\n\n/**\n * Parameters for creating a password grant request\n */\nexport interface PasswordAuth {\n  email: string;\n  password: string;\n  application_id: string;\n  totp_code?: string;\n  remember_me?: boolean;\n}\n\nexport interface PasswordAuthReturn {\n  redirect_url?: string;\n  application_id: string;\n  expires: Time;\n  grant_code: string;\n}\n\n/**\n * **You probably don't need this, you most likely want the clientCredentialsGrant() or to pass in an API key for your token directly**\n *\n * Make a request to the Cycle OAuth server using password grant in order to obtain an access token.\n * This will return a grant code that can be used with the getGrantAccessToken() function,\n * and an http-only cookie that can be used with the getBrowserAccessToken() function.\n *\n * @param auth The PasswordAuth object containing authorization credentials\n * @param settings Optional Settings object to control the request\n */\nexport async function passwordGrant(\n  params: BaseParams & PostParams<PasswordAuth>,\n) {\n  return postRequest<{ data: PasswordAuthReturn }>({\n    ...params,\n    target: \"/auth/password\",\n    settings: {\n      ...params.settings,\n      credentials: \"include\",\n      url:\n        params.settings && params.settings.url\n          ? params.settings.url\n          : DEFAULT_AUTH_URL,\n    },\n  });\n}\n","export * from \"./token\";\nexport * from \"./password\";\n// export * from \"./client\";\n","import {\n  ResourceId,\n  UserScope,\n  Events,\n  State,\n  CollectionDoc,\n  SingleDoc,\n  Time,\n} from \"../../../common/structs\";\nimport * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\n\nexport type Collection = CollectionDoc<Credit>;\nexport type Single = SingleDoc<Credit>;\nexport type CreditState = \"new\" | \"live\" | \"expired\";\nexport type CreditEvent = \"expires\";\n\nexport interface Credit {\n  id: ResourceId;\n  hub_id: ResourceId;\n  description: string;\n  creator: UserScope;\n  account_id: ResourceId;\n  amount: number;\n  amount_remaining: number;\n  expires: Expires | null;\n  events: Events<CreditEvent>;\n  state: State<CreditState>;\n}\n\nexport interface AssociatedCredit {\n  id: ResourceId;\n  amount: number;\n}\n\nexport interface Expires {\n  date: Time;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().credits().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.billing().credits().single(params.id),\n  });\n}\n","import {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Events,\n  ResourceId,\n  State,\n  Time,\n} from \"../../../common/structs\";\nimport * as Request from \"../../../common/api/request\";\nimport { links, StandardParams, QueryParams } from \"../../../common/api\";\nimport { Payment } from \"./payment\";\nimport { Credit } from \"./credit\";\nimport { LateFee } from \"./latefee\";\nimport { Summary as ServiceSummary } from \"../services\";\n\nexport type Collection = CollectionDoc<Invoice>;\nexport type Single = SingleDoc<Invoice>;\nexport type InvoiceQuery = QueryParams<\"\", keyof InvoiceMeta>;\nexport type InvoiceState =\n  | \"new\"\n  | \"billing\"\n  | \"billed\"\n  | \"processing\"\n  | \"partially-paid\"\n  | \"paid\"\n  | \"refunding\"\n  | \"refunded\"\n  | \"crediting\"\n  | \"credited\"\n  | \"voiding\"\n  | \"voided\"\n  | \"uncollectible\";\nexport type InvoiceEvent =\n  | \"billed\"\n  | \"paid\"\n  | \"payment_attempt\"\n  | \"credited\"\n  | \"voided\";\n\nexport interface Invoice extends Resource<InvoiceMeta> {\n  hub_id: ResourceId;\n  approved: boolean;\n  services: ServiceSummary[];\n  payments: Payment[];\n  credits: Credit[];\n  late_fees: LateFee[];\n  charges: number;\n  due?: Time;\n  overdue?: Time;\n  events: Events<InvoiceEvent>;\n  state: State<InvoiceState>;\n}\n\nexport interface InvoiceMeta {\n  due?: number;\n}\n\nexport async function getCollection(params: StandardParams<InvoiceQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().invoices().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<InvoiceQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.billing().invoices().single(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\n\nexport type InvoiceAction = \"pay\";\n\nexport async function pay(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"pay\",\n    },\n  });\n}\n\nexport async function task(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<InvoiceAction>;\n  },\n) {\n  return Request.postRequest<CreatedTask<InvoiceAction>>({\n    ...params,\n    target: links\n      .billing()\n      .invoices()\n      .tasks(params.id),\n  });\n}\n","import {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Events,\n  State,\n  UserScope,\n  ResourceId,\n} from \"../../../common/structs\";\nimport * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\n\nexport type Collection = CollectionDoc<Method>;\nexport type Single = SingleDoc<Method>;\nexport type MethodState = \"live\" | \"deleting\" | \"deleted\";\n\nexport interface Method extends Resource {\n  name: string;\n  primary: boolean;\n  address: Address;\n  creator: UserScope;\n  credit_card: CreditCard;\n  state: State<MethodState>;\n  events: Events;\n}\n\nexport interface Address {\n  country: string;\n  zip: string;\n}\n\nexport interface CreditCard {\n  name: string;\n  brand: string;\n  expiration: {\n    month: number;\n    year: number;\n  };\n  last_4: string;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().methods().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.billing().methods().single(params.id),\n  });\n}\n\nexport interface CreateParams {\n  name: string;\n  primary: boolean;\n  address: Address;\n  credit_card: {\n    name: string;\n    number: string;\n    cvv: string;\n    expiration: {\n      month: number;\n      year: number;\n    };\n  };\n}\n\nexport async function create(\n  params: StandardParams & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.billing().methods().collection(),\n  });\n}\n\nexport interface UpdateParams {\n  name?: string;\n  primary?: boolean;\n  address?: Address;\n}\n\nexport async function update(\n  params: StandardParams & {\n    id: ResourceId;\n    value: UpdateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.billing().methods().single(params.id),\n  });\n}\n","import * as Request from \"../../../../common/api/request\";\nimport { links, StandardParams } from \"../../../../common/api\";\nimport { ResourceId, CreatedTask } from \"../../../../common/structs\";\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links\n      .billing()\n      .methods()\n      .single(params.id),\n  });\n}\n","import {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Events,\n  ResourceId,\n  UserScope,\n  Mills,\n  State,\n} from \"../../../common/structs\";\nimport * as Request from \"../../../common/api/request\";\nimport { links, StandardParams, QueryParams } from \"../../../common/api\";\nimport { Item as ServiceItem } from \"../services/item\";\nimport { Amount } from \"../amount\";\nimport { AssociatedDiscount } from \"../discounts\";\nimport { Term, TermLength } from \"../term\";\nimport { PromoCode } from \"../promocodes\";\n\nexport type Collection = CollectionDoc<Order, OrderIncludes>;\nexport type Single = SingleDoc<Order, OrderIncludes>;\nexport type OrderState = \"new\" | \"processed\" | \"deleting\" | \"deleted\";\nexport type OrderEvent = \"expires\";\nexport type OrderQuery = QueryParams<keyof OrderIncludes, keyof OrderMeta>;\n\nexport interface Order extends Resource<OrderMeta> {\n  hub_id: ResourceId;\n  creator: UserScope;\n  promo_code_id: string | null;\n  term: Term;\n  approved: boolean;\n  items: Item[];\n  total_price: Mills;\n  events: Events<OrderEvent>;\n  state: State<OrderState>;\n}\n\nexport interface OrderIncludes {\n  promo_codes: {\n    [key: string]: PromoCode;\n  };\n}\n\nexport interface CreateParams {\n  tier_plan_id?: ResourceId;\n  support_plan_id?: ResourceId;\n  term_length?: TermLength;\n  promo_code?: string;\n}\n\nexport interface OrderMeta {\n  due?: {\n    term: Term;\n    amount: Mills;\n  };\n}\n\nexport interface Item {\n  id: ResourceId;\n  service: ServiceItem;\n  description: string;\n  price: Amount;\n  discount?: AssociatedDiscount;\n  net_price: Mills;\n}\n\nexport async function getCollection(params: StandardParams<OrderQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().orders().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<OrderQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.billing().orders().single(params.id),\n  });\n}\n\nexport async function create(\n  params: StandardParams<OrderQuery> & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.billing().orders().collection(),\n  });\n}\n\nexport async function update(\n  params: StandardParams<OrderQuery> & {\n    id: ResourceId;\n    value: CreateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.billing().orders().single(params.id),\n  });\n}\n","import { ResourceId, Task, CreatedTask } from \"../../../../common/structs\";\nimport * as Request from \"../../../../common/api/request\";\nimport { links, StandardParams } from \"../../../../common/api\";\n\nexport type OrderAction = \"confirm\";\n\nexport async function confirm(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"confirm\",\n    },\n  });\n}\n\nexport async function task(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<OrderAction>;\n  },\n) {\n  return Request.postRequest<CreatedTask<OrderAction>>({\n    ...params,\n    target: links\n      .billing()\n      .orders()\n      .tasks(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../../common/api\";\nimport { CollectionDoc, Resource, SingleDoc } from \"../../../common/structs\";\nimport { Amount } from \"../../billing\";\n\nexport type Collection = CollectionDoc<SupportPlan>;\nexport type Single = SingleDoc<SupportPlan>;\n\nexport interface SupportPlan extends Resource {\n  name: string;\n  price: Amount;\n  description: string;\n  features: Features;\n  contract: boolean;\n  default?: true;\n}\n\nexport interface Features {\n  engineering_support: boolean;\n  uptime_sla: boolean;\n  guaranteed_response_time: string | null;\n}\n\nexport async function getCollection(params: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().plans().support(),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Gigabytes,\n} from \"../../../common/structs\";\nimport { Amount } from \"../../billing\";\nimport { Builds } from \"resources/stacks\";\nimport { DeploymentStrategy } from \"../../stacks/spec/v1/deploy\";\n\nexport type Collection = CollectionDoc<TierPlan>;\nexport type Single = SingleDoc<TierPlan>;\n\nexport type CapabilititiesLevel = \"limited\" | \"standard\" | \"advanced\";\n\nexport interface TierPlan extends Resource {\n  name: string;\n  code: string;\n  price: Amount;\n  max_nodes: number | null;\n  max_members: number | null;\n  max_daily_api_requests: number | null;\n  ram: RAM;\n  image_storage: ImageStorage;\n  builds: Builds;\n  features: Features;\n  hidden: boolean;\n  description: string;\n  default?: true;\n}\n\nexport interface RAM {\n  included_gb: Gigabytes;\n  additional_gb: Amount;\n  hard_cap: boolean;\n}\n\nexport interface ImageStorage {\n  included_gb: Gigabytes;\n}\n\nexport interface Builds {\n  parallel: number;\n  cpu_cores: number;\n  ram_gb: Gigabytes;\n  max_daily_builds: number | null;\n}\n\nexport interface Features {\n  performance_builds: TierFeature;\n  infrastructure: InfrastructureFeatures;\n  monitoring: MonitoringFeatures;\n  support: SupportFeatures;\n  security: SecurityFeatures;\n  automated_backups: TierFeature;\n  deployment_pipelines: TierFeature;\n}\n\nexport interface TierFeature {\n  enabled: boolean;\n  capabilities?: CapabilititiesLevel;\n}\n\nexport interface InfrastructureFeatures {\n  multi_provider: TierFeature;\n  clustering: TierFeature;\n  sdn: TierFeature;\n  dedicated_cluster: TierFeature;\n  deployment_strategies: DeploymentStrategiesFeature;\n}\n\nexport interface DeploymentStrategiesFeature extends TierFeature {\n  strategies: DeploymentStrategy[];\n}\n\nexport interface MonitoringFeatures {\n  infrastructure: TierFeature;\n  advanced: TierFeature;\n}\n\nexport interface SupportFeatures {\n  live_chat: LiveChatFeature;\n  phone_support: TierFeature;\n  slack_community: TierFeature;\n}\n\nexport interface LiveChatFeature extends TierFeature {\n  days?: number;\n}\n\nexport interface SecurityFeatures {\n  audit_log: TierFeature;\n  two_factor_auth: TierFeature;\n}\n\nexport async function getCollection(params: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().plans().tiers(),\n  });\n}\n","import {\n  ResourceId,\n  Events,\n  State,\n  UserScope,\n  Mills,\n  Resource,\n  CollectionDoc,\n  SingleDoc,\n} from \"../../../common/structs\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\nimport { Term } from \"../term\";\nimport { Item } from \"./item\";\nimport { Amount } from \"../amount\";\nimport { AssociatedDiscount } from \"../discounts\";\nimport { PlanType } from \"../../billing/plans\";\n\nexport type Collection = CollectionDoc<Service>;\nexport type Single = SingleDoc<Service>;\n\nexport type ServiceEvent = \"last_billed\";\nexport type ServiceState = \"active\";\n\nexport interface Service extends Resource {\n  creator: UserScope;\n  hub_id: ResourceId;\n  title: string;\n  order: Order;\n  item: Item;\n  events: Events<ServiceEvent>;\n  discount: AssociatedDiscount | null;\n  price: Amount;\n  term: Term;\n  state: State<ServiceState>;\n}\n\nexport interface Order {\n  id: ResourceId;\n  item_id: ResourceId;\n}\n\nexport interface Summary {\n  service_id: ResourceId;\n  title: string;\n  type: PlanType;\n  term: Term;\n  price: Mills;\n  discount: Mills;\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.billing().services().single(params.id),\n  });\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.billing().services().collection(),\n  });\n}\n","import { links, StandardParams } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\nimport { Term } from \"../term\";\n\nexport interface Overage {\n  term: Term;\n  ram: {\n    gb_hours: number;\n    cost: number;\n  };\n}\n\nexport async function getOverages(params: StandardParams) {\n  return Request.getRequest<{ data: Overage }>({\n    ...params,\n    target: links\n      .billing()\n      .services()\n      .overage(),\n  });\n}\n","/**\n * @internal\n */\nimport * as Request from \"../../common/api/request\";\nimport {\n  Resource,\n  CollectionDoc,\n  SingleDoc,\n  ResourceId,\n} from \"../../common/structs\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { State as StateBase } from \"../../common/structs\";\n\n/** ### `interface Release`\n * A Changelog release that when published goes to the marketing website, portal, status page\n *\n * Last Updated: 2021.03.29 — Kevin C\n */\nexport interface Release extends Resource {\n  /**\n   * @example\n   * <year>.<month>.<day>.<build-number>\n   * 2021.03.01.1\n   * */\n  version: string;\n  date: string;\n\n  /** Main title of the post for marketing website */\n  title: string;\n  hero?: Hero;\n  changes: Change[];\n  state: State;\n  email_state?: EmailState;\n}\n\n/****************************** Changelog Struct Sub Types ******************************/\nexport interface Hero {\n  /** The intro will be displayed as the main overview of the post */\n  intro: string;\n  image_url: string;\n  image_alt: string;\n}\n\nexport interface Change {\n  title: string;\n  description: string;\n  notes: string[];\n  showcase: boolean;\n  type: ChangeType;\n  codebase: CodebaseType;\n  external_url?: string;\n}\n\nexport type ChangeType =\n  | \"added\"\n  | \"fixed\"\n  | \"improvement\"\n  | \"security\"\n  | \"removed\"\n  | \"changed\"\n  | \"deprecated\";\n\nexport type CodebaseType =\n  | \"platform\"\n  | \"portal\"\n  | \"cycleos\"\n  | \"api-node-client\";\n\n/** ### `type States`\n * Possible changelog release states.\n * Possible states can be the following:\n * - `hidden`\n * - `published`\n * - `deleted`\n *\n *\n * Last Updated: 2021.03.29 — Kevin C\n */\nexport type States = \"hidden\" | \"published\" | \"deleted\";\nexport type State = StateBase<States>;\n\nexport type EmailStates = \"not-sent\" | \"sent-internal\" | \"sent-external\";\nexport type EmailState = StateBase<EmailStates>;\n\n/****************************** Metas, Includes, Query, Docs ******************************/\nexport type Single = SingleDoc<Release>;\nexport type Collection = CollectionDoc<Release>;\n\n/****************************** Params ******************************/\n/** Changelog exists outside of the context of the portal, no hubid needed  */\ntype StandardParamsNoHubId = Omit<StandardParams, \"hubId\">;\n\n/** Base Single Params */\ntype BSP = StandardParamsNoHubId & {\n  id: ResourceId;\n};\n/** Base Collection Params */\ntype BCP = StandardParamsNoHubId;\n\ntype GetSingleParams = BSP;\ntype GetCollectionParams = BCP;\ntype CreateParams = BCP & Request.PostParams<CreateValues>;\ntype UpdateParams = BSP & Request.PatchParams<UpdateValues>;\n\n/****************************** Values ******************************/\n\nexport type CreateValues = {\n  version: Release[\"version\"];\n  title: Release[\"title\"];\n  hero?: Hero;\n  changes: Change[];\n  publish: boolean;\n};\n\nexport type UpdateValues = Partial<CreateValues>;\n\n/****************************** Functions ******************************/\n\n/** Helper to change the url as this lives on a diff url */\nconst externalURL = \"marketing-api.internal.cycle.io\";\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    target: links.changelog().collection(),\n  });\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    target: links.changelog().collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    target: links.changelog().single(params.id),\n  });\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    target: links.changelog().single(params.id),\n  });\n}\n","/**\n * @internal\n */\nimport { links, StandardParams } from \"../../common/api\";\nimport { ResourceId } from \"../../common/structs\";\nimport * as Request from \"../../common/api/request\";\n\n/** Helper to change the url as this lives on a diff url */\nconst externalURL = \"marketing-api.internal.cycle.io\";\n\nexport type ChangelogActions = \"send-email\" | \"publish\" | \"hide\";\n\ninterface BSP extends StandardParams {\n  id: ResourceId;\n}\n\ntype BTP<T = {}> = StandardParams & {\n  id: ResourceId;\n  value?: T;\n};\n\nexport type SendEmailContentType = \"internal\" | \"external\" | \"single\";\n\nexport interface SendEmailContent {\n  type: SendEmailContentType;\n  /** Address will only be used to send test emails to a cycle email address */\n  address?: string;\n}\n\nexport interface RemoveParams extends BSP {}\nexport interface SendEmailParams extends BTP<SendEmailContent> {}\nexport interface PublishParams extends BTP {}\nexport interface HideParams extends BTP {}\n\nexport async function remove(params: RemoveParams) {\n  return Request.deleteRequest({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    target: links.changelog().single(params.id),\n  });\n}\n\nexport async function publish(params: PublishParams) {\n  return Request.postRequest({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    value: {\n      action: \"publish\",\n      ...params.value,\n    },\n    target: links.changelog().tasks(params.id),\n  });\n}\n\nexport async function sendEmail(params: SendEmailParams) {\n  return Request.postRequest({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    value: {\n      action: \"send-email\",\n      ...params.value,\n    },\n    target: links.changelog().tasks(params.id),\n  });\n}\n\nexport async function hide(params: HideParams) {\n  return Request.postRequest({\n    ...params,\n    settings: {\n      url: params.settings?.url ?? externalURL,\n      ...params.settings,\n    },\n    value: {\n      action: \"hide\",\n      ...params.value,\n    },\n    target: links.changelog().tasks(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  StatefulCounts,\n  ResourceId,\n  IP,\n} from \"../../../common/structs\";\nimport { InstanceState } from \"../../containers/instances\";\nimport { Server } from \"../../infrastructure/servers\";\n\nexport type ServerInstancesQuery = QueryParams<\n  string,\n  keyof ServerInstancesMeta\n>;\n\ntype BaseCollectionParams = StandardParams & { containerId: ResourceId };\n\n/**\n * Information about the instances on a server\n */\nexport interface ServerInstances extends Resource<ServerInstancesMeta> {\n  instances: StatefulCounts<InstanceState>;\n  /** the server hostname */\n  hostname: string;\n}\n\nexport interface ServerInstancesMeta {\n  primary_ip: IP;\n}\n\nexport type Collection = CollectionDoc<ServerInstances>;\nexport async function getCollection(params: BaseCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.containers().servers(params.containerId).list(),\n  });\n}\n\ntype UsableServerCollection = CollectionDoc<Server>;\nexport async function usable(params: BaseCollectionParams) {\n  return Request.getRequest<UsableServerCollection>({\n    ...params,\n    target: links.containers().servers(params.containerId).usable(),\n  });\n}\n","import { Time, ResourceId } from \"../../../../common/structs\";\nimport {\n  connectToSocket,\n  StandardParams,\n  links,\n  getRequest,\n} from \"../../../../common/api\";\n\n/**\n * A resource telemetry snapshot\n */\nexport interface ResourceSnapshot {\n  time: Time;\n  hub_id?: ResourceId;\n  container_id?: ResourceId;\n  instance_id?: ResourceId;\n  environment_id?: ResourceId;\n  cpu: CPUSnapshot;\n  memory: MemorySnapshot;\n  processes: ProcessesSnapshot;\n  hugetlb?: Record<string, HugeTLB>;\n}\n\n/**\n * CPU usage and throttling combined\n */\nexport interface CPUSnapshot {\n  usage: CPUUsage;\n  throttling: CPUThrottling;\n}\n\n/**\n * CPU usage statistics\n */\nexport interface CPUUsage {\n  /**  Total amount of CPU time since last restart */\n  total: number;\n  /** An array showing CPU core specific usage in nanoseconds since the last restart */\n  per_core: number[];\n  /** The amount of time in nanoseconds used by the kernel since last restart */\n  kernel: number;\n  /** The amount of time in nanoseconds taken up for user processes */\n  user: number;\n}\n/** CPU throttling information  */\nexport interface CPUThrottling {\n  /** The amount of periods that have passed since the last restart */\n  periods?: number;\n  /** How many times this instance has been throttled for using all its alloted CPU during a period */\n  throttled_periods?: number;\n  /** The amount of time in nanoseconds this instance has spent with throttled CPU resources */\n  throttled_time?: number;\n}\n\n/**\n * Memory usage statistics\n */\nexport interface MemorySnapshot {\n  /** The number of bytes of page cache memory being used by this instance */\n  cache?: number;\n  usage?: MemoryData;\n  swap_usage?: MemoryData;\n  kernel_usage?: MemoryData;\n  kernel_tcp_usage?: MemoryData;\n}\n\n/**\n * Information about the running processes in the instance\n */\nexport interface ProcessesSnapshot {\n  /** The current number of running processes in the instance */\n  current?: number;\n  /** The maximum number of running processes allowed in this instance */\n  limit?: number;\n}\n\n/**\n * Memory usage data\n */\nexport interface MemoryData {\n  /** The number of bytes of memory being used by this instance at the time of this report */\n  usage?: number;\n  /** The highest amount of memory usage since last restart */\n  max_usage?: number;\n  /** The # of times the memory limit was exceeded for this instance */\n  fail_count?: number;\n  /** The maximum # of bytes of memory this instance could use */\n  limit?: number;\n}\n\n/**\n * HugeTLB data\n */\nexport interface HugeTLB {\n  /** The number of bytes being consumed by huge pages of all sizes, for this instance at the time of this report */\n  usage?: number;\n  /** The maximum number of bytes allowed to be used for huge pages for this instance */\n  max?: number;\n  /** The number of times the hugeTLB memory limit has been exceeded by this instance */\n  fail_count?: number;\n}\n\n/**\n * Instance telemetry report request information\n */\nexport interface ReportRequest {\n  instance_id: ResourceId;\n  start: Time;\n  end: Time;\n}\n\n/**\n * Instance telemetry report\n */\nexport interface InstanceResourceTelemetryReport {\n  request: ReportRequest;\n  snapshots: ResourceSnapshot[];\n}\n\nexport async function getInstanceResourcesTelemetryReport(\n  params: StandardParams & {\n    id: ResourceId;\n    containerId: ResourceId;\n  },\n) {\n  return getRequest<{ data: InstanceResourceTelemetryReport }>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .telemetry()\n      .resourcesReport(params.id, params.containerId),\n  });\n}\n\nexport interface TelemetryStreamParams extends StandardParams {\n  id: ResourceId;\n  containerId: ResourceId;\n  /** optional typed onmessage handler */\n  onMessage?: (v: ResourceSnapshot) => void;\n}\n\n/**\n * An auth response including a token and address\n */\n\nexport interface TelemetryAuthResponse {\n  data: {\n    token: string;\n    address: string;\n  };\n}\n\nexport async function getInstanceResourceTelemetryStream(\n  params: TelemetryStreamParams,\n) {\n  const target = links\n    .containers()\n    .instances()\n    .telemetry()\n    .resourcesStream(params.id, params.containerId);\n\n  const authResp = await getRequest<TelemetryAuthResponse>({\n    target,\n    hubId: params.hubId,\n    token: params.token,\n    settings: params.settings,\n  });\n\n  if (!authResp.ok) {\n    return authResp;\n  }\n\n  return connectToSocket({\n    target: \"\",\n    token: authResp.value.data.token,\n    settings: {\n      url: `${authResp.value.data.address}`,\n      noVersion: true,\n    },\n    onMessage: params.onMessage,\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  Megabytes,\n  Time,\n} from \"../../../common/structs\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { Volumes } from \"../config\";\n\nexport type Collection = CollectionDoc<InstanceVolume>;\nexport type Single = SingleDoc<InstanceVolume>;\nexport type SecretState = \"live\" | \"deleting\" | \"deleted\";\n\n/**\n * Instance Volume resource information\n */\nexport interface InstanceVolume extends Resource {\n  config: Volumes.Volume;\n  deployed: DeployedVolume;\n  sftp: SFTP | null;\n}\n\n// TODO: (whats the diff between instance and deployed?)\nexport interface DeployedVolume {\n  server_id: ResourceId | null;\n  container_id: ResourceId;\n  container_volume_id: ResourceId;\n  instance_id: ResourceId;\n  hash: string;\n  path: string;\n  storage: Storage;\n  last_updated: Time;\n}\n\n/**\n * Instance volume storage information\n */\nexport interface Storage {\n  /** The amount of volume storage used in megabytes */\n  used: Megabytes;\n  /** The total amount of available space in megabytes */\n  total: Megabytes;\n}\n\n/**\n * SFTP connection information for the instance volume\n */\nexport interface SFTP {\n  /** Hostname for connecting to the volume through SFTP */\n  host: string;\n  /** The port number used to connect to the volume through SFTP */\n  port: number;\n  /** The username for the user connecting to the volume through SFTP */\n  username: string;\n  password: Volumes.VolumePassword;\n}\n\nexport async function getCollection(\n  params: StandardParams & {\n    instanceId: ResourceId;\n    containerId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection | { data: null }>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .volumes(params.instanceId, params.containerId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport {\n  QueryParams,\n  links,\n  StandardParams,\n  PostParams,\n} from \"../../../common/api\";\nimport { Server } from \"../../infrastructure/servers\";\nimport {\n  Locations,\n  ProviderIdentifier,\n  Provider,\n} from \"../../infrastructure/provider\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State as BaseState,\n  Events,\n  UserScope,\n  Includes,\n  UserIncludes,\n  Time,\n  CreatedTask,\n} from \"../../../common/structs\";\nimport { IPNet } from \"../../infrastructure/ips\";\nimport { Service } from \"../services\";\nimport { Container } from \"../container\";\nimport { Environment } from \"../../environments\";\n\nexport type Collection = CollectionDoc<Instance, InstanceIncludes>;\nexport type Single = SingleDoc<Instance, InstanceIncludes>;\n\n/**\n * The possible states an instance can be in\n */\nexport type InstanceState =\n  | \"new\"\n  | \"starting\"\n  | \"reimaging\"\n  | \"migrating\"\n  | \"running\"\n  | \"stopping\"\n  | \"stopped\"\n  | \"failed\"\n  | \"deleting\"\n  | \"deleted\";\n\n// This was done before did not change\n\n/**\n * Instance status\n * @param active this instance can be started/stopped &nbsp;\n * @param purge this instance should be deleted\n * @param hibernate this instance is active but not allowed to run\n */\nexport type ReadyState = \"active\" | \"purge\" | \"hibernate\";\n\n/**\n * An instance event type\n */\nexport type InstanceEvent = \"first_started\";\n/**\n * Instance specific query\n */\nexport type InstanceQuery = QueryParams<\n  keyof InstanceIncludes,\n  keyof InstanceMetas\n>;\n\n/**\n * Information about the Instance resource\n */\n\nexport interface Instance extends Resource<InstanceMetas> {\n  creator: UserScope;\n  hub_id: ResourceId;\n  container_id: ResourceId;\n  location_id: ResourceId;\n  environment: EnvironmentSummary;\n  stateful: Stateful | null;\n  provider: ProviderSummary;\n  server_id: ResourceId;\n  ready_state: ReadyState;\n  /** The hostname of the instance */\n  hostname: string;\n  migration: Migration | null;\n  purge_time?: Time;\n  service: Service | null;\n  state: State;\n  events: Events<InstanceEvent>;\n}\n\nexport interface State extends BaseState<InstanceState> {\n  health?: {\n    /** A boolean where true means the instance appears healthy */\n    healthy: boolean;\n    updated: Time;\n  }\n}\n\n/**\n * Information about the Environment Summary Resource\n */\nexport interface EnvironmentSummary {\n  id: ResourceId;\n  /** An octet representing the IPv6 subnet used for this environment */\n  subnet: string;\n  /** The MAC address of the instance */\n  mac_addr: string;\n  ipv6: IPNet | null;\n  legacy: Legacy | null;\n}\n\n/**\n * Information used to create stateful instances\n */\n\nexport interface Stateful {\n  /** The instance number */\n  id: number;\n  /** The base hostname */\n  base_hostname: string;\n}\n\n/**\n * Legacy networking information\n */\nexport interface Legacy {\n  /** The last octet (IPv4) that represents the instance in the containers cidr block */\n  host: number;\n  ipv4: IPNet | null;\n  /** The third octect (IPv4) that represents the containers private network subnet */\n  subnet: number;\n}\n\n/**\n * Provider information and location\n */\n\nexport interface ProviderSummary {\n  identifier: ProviderIdentifier;\n  /** A string representing the provider datacenter location city */\n  location: string;\n}\n\n/**\n * Instance migration information\n */\nexport interface Migration {\n  to?: MigrationInstance;\n  from?: MigrationInstance;\n  started?: Time;\n  completed?: Time;\n  key: string;\n  /** A boolean where true represents the migration should copy the contents of the volume to the destination server */\n  copy_volumes: boolean;\n}\n\n/**\n * Information about the instance that was migrated and its origin server\n */\nexport interface MigrationInstance {\n  instance_id: ResourceId;\n  server_id: ResourceId;\n}\n\n/**\n * Information about the instance\n */\nexport interface InstanceIncludes extends Includes {\n  creator: UserIncludes;\n  servers: Record<ResourceId, Server>;\n  locations: Record<ResourceId, Locations.Location>;\n  providers: Record<ProviderIdentifier, Provider>;\n  containers: Record<ResourceId, Container>;\n  environments: Record<ResourceId, Environment>;\n}\n\nexport interface InstanceMetas {}\n\nexport async function getCollection(\n  params: StandardParams<InstanceQuery> & {\n    containerId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.containers().instances().collection(params.containerId),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<InstanceQuery> & {\n    id: ResourceId;\n    containerId: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .single(params.id, params.containerId),\n  });\n}\n\nexport type CreateParams = [\n  {\n    server_id: ResourceId;\n    new_instances: number;\n  },\n];\n\nexport async function create(\n  params: StandardParams<InstanceQuery> & {\n    containerId: ResourceId;\n  } & PostParams<CreateParams>,\n) {\n  return Request.postRequest<CreatedTask<any>>({\n    ...params,\n    target: links.containers().instances().collection(params.containerId),\n  });\n}\n\nexport async function remove(\n  params: StandardParams<InstanceQuery> & {\n    id: ResourceId;\n    containerId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<any>>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .single(params.id, params.containerId),\n  });\n}\n\nexport async function removeMultiple(\n  params: StandardParams<InstanceQuery> & {\n    containerId: ResourceId;\n    value: {\n      instances_ids: ResourceId[];\n    };\n  },\n) {\n  return Request.deleteRequest<CreatedTask<any>>({\n    ...params,\n    target: links.containers().instances().collection(params.containerId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId } from \"../../../common/structs\";\nimport { connectToSocket } from \"../../../common/api/websocket\";\n\n/**\n * Parameters needed to connect to the console\n */\nexport interface ConsolePipelineParams extends StandardParams {\n  id: ResourceId;\n  containerId: ResourceId;\n  /** optional typed onmessage handler */\n  onMessage?: (v: string) => void;\n}\n\n/**\n * An auth response from console authentication\n */\nexport interface ConsoleAuthResponse {\n  /** Data - including a auth token and address */\n  data: {\n    /** An auth token for the console authentication */\n    token: string;\n    address: string;\n  };\n}\n\nexport async function connectToConsole(params: ConsolePipelineParams) {\n  const target = links\n    .containers()\n    .instances()\n    .console(params.id, params.containerId);\n\n  const authResp = await Request.getRequest<ConsoleAuthResponse>({\n    target,\n    hubId: params.hubId,\n    token: params.token,\n    settings: params.settings,\n  });\n\n  if (!authResp.ok) {\n    return authResp;\n  }\n\n  return connectToSocket({\n    target: \"\",\n    token: authResp.value.data.token,\n    settings: {\n      url: `${authResp.value.data.address}`,\n      noVersion: true,\n    },\n    onMessage: params.onMessage,\n    noJsonDecode: true,\n  });\n}\n","import { Resource, ResourceId, UserScope, Time } from \"../../../common/structs\";\nimport {\n  links,\n  getRequest,\n  StandardParams,\n  deleteRequest,\n} from \"../../../common/api\";\n\nexport type SSHConnectionDoc = { data: SSHConnectionResponse };\n\n/**\n * SSH connection response information\n */\nexport interface SSHConnectionResponse {\n  token: SSHToken;\n  /** SSH connection response secret */\n  secret: string;\n  /** SSH connection response address */\n  address: string;\n}\n\n/**\n * SSH token resource\n */\nexport interface SSHToken extends Resource {\n  instance_id: ResourceId;\n  container_id: ResourceId;\n  hub_id: ResourceId;\n  creator: UserScope;\n  /** specific ssh connection events */\n  events: {\n    created: Time;\n    used: Time;\n    expires: Time;\n  };\n  /** A boolean where true represents the token being valid */\n  valid: boolean;\n}\n\nexport async function getSSHConnection(\n  params: StandardParams & {\n    containerId: ResourceId;\n    instanceId: ResourceId;\n  },\n) {\n  return getRequest<SSHConnectionDoc>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .ssh(params.instanceId, params.containerId),\n  });\n}\n\nexport async function expireInstanceSSHTokens(\n  params: StandardParams & {\n    containerId: ResourceId;\n    instanceId: ResourceId;\n  },\n) {\n  return deleteRequest<{ data: { tokens: number } }>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .ssh(params.instanceId, params.containerId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\n\nexport type InstanceAction = \"migrate\" | \"migrate_revert\";\n\nexport interface MigrateParams {\n  destination_server_id: ResourceId;\n  stateful?: StatefulMigrationParams;\n}\n\nexport interface StatefulMigrationParams {\n  copy_volumes: boolean;\n}\n\nexport async function migrate(\n  params: StandardParams & {\n    id: ResourceId;\n    containerId: ResourceId;\n    value: MigrateParams;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"migrate\",\n      contents: params.value,\n    },\n  });\n}\n\nexport async function revertMigration(\n  params: StandardParams & {\n    id: ResourceId;\n    containerId: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"migrate_revert\",\n    },\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    containerId: ResourceId;\n    value: Task<InstanceAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<InstanceAction, K>>({\n    ...params,\n    target: links\n      .containers()\n      .instances()\n      .tasks(params.id, params.containerId),\n  });\n}\n","import { ResourceId, CollectionDoc } from \"../../../common/structs\";\nimport { StandardParams, links } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\nimport { Image } from \"../../images\";\n\nexport type Collection = CollectionDoc<Image>;\n\nexport async function getCompatibleImages(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.containers().compatibleImages(params.id),\n  });\n}\n","import { Time, ResourceId } from \"../../../common/structs\";\nimport { StandardParams, links } from \"../../../common/api\";\nimport { InstanceState } from \"../instances\";\nimport * as Request from \"../../../common/api/request\";\n\n//* A collection of telemetry points for an instance */\nexport type Collection = {\n  data: TelemetryPoint[];\n};\n/** A single telemetry point for an instance */\nexport interface TelemetryPoint {\n  time: Time;\n  // TODO: Need to figure out details\n  instances: Record<InstanceState, number>;\n}\n\nexport async function getInstancesTelemetry(\n  params: StandardParams & {\n    containerId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.containers().telemetry().instances(params.containerId),\n  });\n}\n","import { Emails, Webhook } from \"../../../../common/structs\";\nimport { RuntimeCommand } from \"./runtime\";\n\nexport type Signal = \"SIGTERM\" | \"SIGINT\" | \"SIGUSR1\" | \"SIGUSR2\" | \"SIGHUP\";\n\nexport interface Deploy {\n  instances: number;\n  strategy?: DeploymentStrategy;\n  stateful?: Stateful;\n  constraints?: Constraints;\n  shutdown?: ShutdownPolicy;\n  startup?: StartupPolicy;\n  restart?: RestartPolicy;\n  health_check?: HealthCheck;\n  telemetry?: Telemetry;\n  update?: UpdatePolicy;\n}\n\nexport interface Stateful {\n  instances: StatefulInstance[];\n}\n\nexport interface StatefulInstance {\n  match: Match;\n  first_start?: StatefulStart;\n  default_start?: StatefulStart;\n  auto_start?: StatefulStart;\n}\n\nexport interface Match {\n  hostname?: string;\n}\n\nexport interface StatefulStart {\n  command?: RuntimeCommand;\n  environment_vars?: Record<string, string>;\n  delay?: number;\n}\n\nexport interface ShutdownPolicy {\n  graceful_timeout: number;\n  signals: Signal[];\n}\n\nexport interface StartupPolicy {\n  delay?: number;\n}\n\nexport interface UpdatePolicy {\n  parallelism: number;\n  delay: number;\n}\n\nexport interface RestartPolicy {\n  condition: RestartCondition;\n  delay: number;\n  max_attempts: number;\n  notify?: Notify;\n}\n\nexport interface Constraints {\n  node?: NodeConstraints;\n  secrets?: string[];\n  containers?: string[];\n}\n\nexport interface NodeConstraints {\n  tags: Tags;\n}\n\nexport interface Tags {\n  /** can match any server that has at least one of these tags */\n  any?: string[];\n  /** can only match servers that have all of the tags listed */\n  all?: string[];\n}\n\nexport interface HealthCheck {\n  command: string;\n  retries: number;\n  interval: number;\n  timeout: number;\n  restart: boolean;\n}\n\nexport interface Telemetry {\n  retention: number;\n  web_hook?: Webhook;\n  interval: number;\n  disable: boolean;\n}\n\nexport enum RestartCondition {\n  RSTRC_ALWAYS = \"always\",\n  RSTRC_NEVER = \"never\",\n  RSTRC_FAILURE = \"failure\",\n}\n\n/**\n * The deployment strategy Cycle will use to decide wkhere to put container instances\n *\n * @param resource-density Cycle will try to balance based on resource usage of the servers that match the tags\n * @param high-availability Cycle will try to allocate in the best way to spread out the instances\n * @param first-available Cycle will allocate to any available server that matches the tags\n * @param manual Cycle will not attempt to create or manage any instances - it will be up to the user how instances are distributed\n * @param ephemeral [COMING SOON] Turn container execution into one off processes\n */\nexport type DeploymentStrategy =\n  | \"resource-density\"\n  | \"high-availability\"\n  | \"first-available\"\n  | \"manual\"\n  | \"ephemeral\";\n\nexport interface Notify {\n  emails?: Emails;\n  web_hook?: Webhook;\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport { Builds, Stack } from \"../stacks\";\nimport { Image } from \"../images\";\nimport { Zones } from \"../dns\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State,\n  Events,\n  UserScope,\n  UserIncludes,\n  StatefulCounts,\n  ContainerIdentifier,\n} from \"../../common/structs\";\nimport { IPNet } from \"../infrastructure/ips\";\nimport { InstanceState } from \"./instances\";\nimport { Service } from \"./services\";\nimport { Config, Volumes } from \"./config\";\nimport { IP } from \"../infrastructure/ips\";\nimport { ContainerRole } from \"../stacks/spec/v1/container\";\nimport { Environment } from \"../environments\";\n\nexport type Collection = CollectionDoc<Container, ContainerIncludes>;\nexport type Single = SingleDoc<Container, ContainerIncludes>;\n\n/**\n * Possible states the container can be in\n */\nexport type ContainerState =\n  | \"new\"\n  | \"starting\"\n  | \"running\"\n  | \"stopping\"\n  | \"stopped\"\n  | \"reimaging\"\n  | \"deleting\"\n  | \"deleted\";\n/**\n * Possible container events\n */\nexport type ContainerEvent = \"started\";\n\nexport type ContainerQuery = QueryParams<\n  keyof ContainerIncludes,\n  keyof ContainerMetas,\n  \"image\" | \"environment\" | \"state\"\n>;\n\n/** Container resource information */\nexport interface Container extends Resource<ContainerMetas> {\n  /** The name of the container */\n  name: string;\n\n  identifier: ContainerIdentifier;\n  creator: UserScope;\n  environment: EnvironmentSummary;\n  hub_id: ResourceId;\n  image: ImageSummary;\n  stack?: StackSummary;\n  config: Config;\n  /** The number of instances of this container */\n\n  instances: number;\n  volumes?: VolumeSummary[];\n  role: ContainerRole | null;\n  /** A boolean where true represents the container is stateful */\n  stateful: boolean;\n  requirements?: string[];\n  /** Annotation notes for this contianer */\n  annotations: Record<string, any> | null;\n  /** A boolean where true means the container is marked deprecated */\n  deprecate?: boolean;\n  state: State<ContainerState> & {\n    desired: ContainerState | \"\";\n  };\n  events: Events<ContainerEvent>;\n}\n\nexport interface ContainerIncludes {\n  creators?: UserIncludes;\n  images?: Record<ResourceId, Image>\n  stack_builds?: Record<ResourceId, Builds.BuildInclude>;\n  stacks?: Record<ResourceId, Stack>\n  environments?: Record<ResourceId, Environment>;\n}\n\nexport interface ContainerMetas {\n  instances_count?: StatefulCounts<InstanceState>;\n  domain?: string;\n  domains?: { fqdn: string; record: Zones.Records.Record | null }[];\n  ips?: IP[];\n}\n\n/**\n * Information about the stack\n */\nexport interface StackSummary {\n  id: ResourceId;\n  image: {\n    id: ResourceId;\n  };\n  build_id: ResourceId;\n  identifier: string;\n}\n/**\n * Information about the image used for the container\n */\nexport interface ImageSummary {\n  id?: ResourceId;\n  service: Service | null;\n}\n\n/** Information about the environment this container is deployed to  */\nexport interface EnvironmentSummary {\n  id: ResourceId;\n  /** The cluster this environment has access to resources from */\n  cluster: string;\n  /** The subnet used for this container */\n  container_subnet: string | null;\n  ipv6: IPNet | null;\n  legacy: Legacy | null;\n}\n\n/**\n * Legacy networking informaiton\n */\nexport interface Legacy {\n  subnet: number;\n  ipv4: IPNet | null;\n}\n\n/**\n * A summary of information about a volume\n */\nexport interface VolumeSummary {\n  id: string;\n  hash: string;\n  config: Volumes.Volume;\n}\n\nexport async function getCollection(params: StandardParams<ContainerQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.containers().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<ContainerQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.containers().single(params.id),\n  });\n}\n\nexport interface CreateParams {\n  name: string;\n  environment_id: ResourceId;\n  image_id: ResourceId;\n  stateful: boolean;\n  config: Config;\n  annotations?: Record<string, any>;\n  volumes: Volumes.Volume[];\n}\n\nexport async function create(\n  params: StandardParams<ContainerQuery> & { value: CreateParams },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.containers().collection(),\n  });\n}\n\nexport async function update(\n  params: StandardParams<ContainerQuery> & {\n    id: ResourceId;\n    value: Pick<CreateParams, \"name\" | \"annotations\">;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.containers().single(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../common/structs\";\nimport { Config } from \"./config\";\nimport { VolumeSummary } from \"./container\";\n\nexport type ContainerAction =\n  | \"start\"\n  | \"stop\"\n  | \"reconfigure\"\n  | \"reimage\"\n  | \"scale\"\n  | \"reconfigure.volumes\";\n\nexport async function start(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"start\",\n    },\n  });\n}\n\nexport async function stop(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"stop\",\n    },\n  });\n}\n\nexport async function reconfigure(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Config;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"reconfigure\",\n      contents: params.value,\n    },\n  });\n}\n\nexport async function reconfigureVolumes(\n  params: StandardParams & {\n    id: ResourceId;\n    value: VolumeSummary[];\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"reconfigure.volumes\",\n      contents: params.value,\n    },\n  });\n}\n\nexport interface ReimageParams {\n  image_id: string;\n  allow_incompatible?: boolean;\n  overwrite_runtime_config?: boolean;\n}\n\nexport async function reimage(\n  params: StandardParams & {\n    id: ResourceId;\n    value: ReimageParams;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"reimage\",\n      contents: params.value,\n    },\n  });\n}\n\nexport interface ScaleParams {\n  instances: number;\n}\n\nexport async function scale(\n  params: StandardParams & {\n    id: ResourceId;\n    value: ScaleParams;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"scale\",\n      contents: params.value,\n    },\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.containers().single(params.id),\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<ContainerAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<ContainerAction, K>>({\n    ...params,\n    target: links.containers().tasks(params.id),\n  });\n}\n","/**\n * Types of service containers\n */\nexport enum Service {\n  SRVC_DISCOVERY = \"discovery\",\n  SRVC_VPN = \"vpn\",\n  SRVC_LOADBALANCER = \"loadbalancer\",\n}\n","import {\n  Resource,\n  SingleDoc,\n  State,\n  ResourceId,\n  StatefulCounts,\n} from \"../../common/structs\";\nimport { ContainerState } from \"../containers/container\";\nimport { Location } from \"../infrastructure/provider/location\";\nimport { InstanceState } from \"./instances\";\nimport { StandardParams, links } from \"../../common/api\";\nimport * as Request from \"../../common/api/request\";\n\nexport type ContainerSummaryDoc = SingleDoc<ContainerSummary>;\n/**\n * A container summary resource\n */\nexport interface ContainerSummary extends Resource {\n  /** The containers name */\n  name: string;\n  state: State<ContainerState>;\n  stats: ContainerSummaryStats;\n}\n\n/**\n * A summary of container statistics\n */\nexport interface ContainerSummaryStats {\n  instances: ContainerSummaryInstances;\n}\n\n/**\n * A summary of information about a container instance\n */\nexport interface ContainerSummaryInstances {\n  geo: ContainerSummaryGeo[];\n  state: StatefulCounts<InstanceState>;\n  /** The number of instances */\n  total: number;\n  /** The available number that can be created */\n  available: number;\n}\n\n/**\n * A summary of geographic information about an instance\n */\nexport interface ContainerSummaryGeo {\n  location: Location;\n  datacenter_id: ResourceId;\n  available: number;\n  total: number;\n}\n\nexport async function getSummary(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<ContainerSummaryDoc>({\n    ...params,\n    target: links.containers().summary(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  Events,\n  UserScope,\n  ResourceId,\n  SingleDoc,\n  UserIncludes,\n  CreatedTask,\n  State,\n  Time,\n} from \"../../../common/structs\";\nimport { Container } from \"../../containers\";\n\nexport type Collection = CollectionDoc<Record, RecordIncludes>;\nexport type Single = SingleDoc<Record, RecordIncludes>;\n/**\n * Possible states a record can be in\n */\nexport type RecordState = \"pending\" | \"live\" | \"deleting\" | \"deleted\";\nexport type RecordQuery = QueryParams<keyof RecordIncludes>;\n\n/** DNS Record resource information */\nexport interface Record extends Resource {\n  hub_id: ResourceId;\n  creator: UserScope;\n  zone_id: ResourceId;\n  /** The name used for the record where @ is root */\n  name: string;\n  /** The string a request to a DNS server will return */\n  resolved_domain: string;\n  type: RecordType;\n  features: RecordFeatures | null;\n  state: State<RecordState>;\n  events: Events;\n}\n/**\n * Information about the features for the record\n */\nexport interface RecordFeatures {\n  certificate: Certificate | null;\n}\n\n/**\n * TLS certificate information\n */\nexport interface Certificate {\n  id: ResourceId;\n  generated: Time;\n  wildcard_child: boolean;\n}\n\n/**\n * Information about the types of records\n */\nexport interface RecordType {\n  a?: TypeA;\n  aaaa?: TypeAAAA;\n  cname?: TypeCNAME;\n  ns?: TypeNS;\n  mx?: TypeMX;\n  caa?: TypeCAA;\n  txt?: TypeTXT;\n  alias?: TypeALIAS;\n  srv?: TypeSRV;\n  linked?: TypeLinked;\n}\n\n/**\n * Information about an A record\n */\nexport interface TypeA {\n  /** The IPv4 address this record resolves to */\n  ip: string;\n}\n\n/**\n * Information about a AAAA record\n */\nexport interface TypeAAAA {\n  /** The IPv6 address this record resolves to  */\n  ip: string;\n}\n/**\n * Information about a CNAME record\n */\nexport interface TypeCNAME {\n  /** The domain string this record resolves to  */\n  domain: string;\n}\n\n/**\n * Information about a NS record\n */\nexport interface TypeNS {\n  /** The domain of the nameserver to be used by the zone */\n  domain: string;\n}\n\n/**\n * Information about a MX record\n */\nexport interface TypeMX {\n  /** The records setting for priority */\n  priority: number;\n  /** The domain this mx record points to */\n  domain: string;\n}\n/**\n * Information about a TXT record\n */\nexport interface TypeTXT {\n  /** The value returned by the DNS server when this TXT record is requested */\n  value: string;\n}\n/**\n * Information about a ALIAS record\n */\nexport interface TypeALIAS {\n  /** The domain string returned from the DNS server when this ALIAS record is requested */\n  domain: string;\n}\n/**\n * Information about a SRV record\n */\nexport interface TypeSRV {\n  /** The weight configured for this record - breaks ties for priority */\n  weight: number;\n  /** The priority configured for this record */\n  priority: number;\n  /**  The port number for the service */\n  port: number;\n  /** The domain for this record - can optionally include service and protocol information  */\n  domain: string;\n}\n/**\n * Information about a CAA record\n */\nexport interface TypeCAA {\n  /** An ASCII string that represents the identifier of the property represented by the record */\n  tag: string;\n  /** The value associated with the tag */\n  value: string;\n}\n/**\n * Information about a Linked record\n */\nexport interface TypeLinked {\n  /** The container ID this record is associated with  */\n  container_id?: ResourceId;\n\n  features: LinkFeatures;\n}\n\n/**\n * Information about advanced features\n */\nexport interface LinkFeatures {\n  /** TLS information  */\n  tls: {\n    /** A boolean where true means that TLS is enabled */\n    enable: boolean;\n  };\n}\n/**\n * Information on the values of a record\n */\nexport interface RecordValues {\n  /** IP information for the record */\n  ip?: string;\n  /** Domain information for the record */\n  domain?: string;\n  /** Priority information for the record */\n  priority?: number;\n  /** Text value information for the record */\n  text?: string;\n  /** Comment information for the record */\n  comment?: string;\n}\n\nexport interface RecordIncludes {\n  creators?: UserIncludes;\n  containers?: {\n    [key: string]: Container;\n  };\n}\n\nexport async function getCollection(\n  params: StandardParams & {\n    zoneId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.dns().zones().records(params.zoneId),\n  });\n}\n\nexport interface CreateParams {\n  type: RecordType;\n  name: string;\n}\n\nexport async function create(\n  params: StandardParams & {\n    zoneId: ResourceId;\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.dns().zones().records(params.zoneId),\n  });\n}\n\nexport async function update(\n  params: StandardParams & {\n    zoneId: ResourceId;\n    recordId: ResourceId;\n    value: Omit<CreateParams, \"name\">;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.dns().zones().record(params.zoneId, params.recordId),\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    zoneId: ResourceId;\n    recordId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.dns().zones().record(params.zoneId, params.recordId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\n\nexport type RecordAction = \"cert.generate\";\n\nexport async function generateCert(\n  params: StandardParams & {\n    id: ResourceId;\n    zoneId: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"cert.generate\",\n    },\n  });\n}\n\nexport async function task(\n  params: StandardParams & {\n    id: ResourceId;\n    zoneId: ResourceId;\n    value: Task<RecordAction>;\n  },\n) {\n  return Request.postRequest<CreatedTask<RecordAction>>({\n    ...params,\n    target: links.dns().zones().recordTasks(params.zoneId, params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\n\nexport type ZoneAction = \"verify\";\n\nexport async function verify(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"verify\",\n    },\n  });\n}\n\nexport async function task(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<ZoneAction>;\n  },\n) {\n  return Request.postRequest<CreatedTask<ZoneAction>>({\n    ...params,\n    target: links.dns().zones().tasks(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  State,\n  Events,\n  UserScope,\n  ResourceId,\n  SingleDoc,\n  UserIncludes,\n  CreatedTask,\n} from \"../../common/structs\";\nimport * as Records from \"./records\";\n\nexport * from \"./tasks/zone\";\nexport { Records };\n\nexport type Collection = CollectionDoc<Zone, ZoneIncludes>;\nexport type Single = SingleDoc<Zone, ZoneIncludes>;\n/**\n * The possible states a DNS zone can have\n */\nexport type ZoneState =\n  | \"new\"\n  | \"pending\"\n  | \"verifying\"\n  | \"live\"\n  | \"disabled\"\n  | \"deleting\"\n  | \"deleted\";\n\n/**\n * DNS Zone event types\n */\nexport type ZoneEvent = \"last_verification\" | \"verified\";\nexport type ZoneQuery = QueryParams<keyof ZoneIncludes>;\n\n/**\n * Information about a DNS Zone\n */\nexport interface Zone extends Resource {\n  hub_id: ResourceId;\n  creator: UserScope;\n  /** The origin for this DNS Zone */\n  origin: string;\n  /** A boolean, where true means this DNS Zone is set to use Cycle nameservers */\n  hosted: boolean;\n  state: State<ZoneState>;\n  events: Events<ZoneEvent>;\n}\n\nexport interface ZoneIncludes {\n  creators: UserIncludes;\n}\n\nexport async function getCollection(params: StandardParams<ZoneQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.dns().zones().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<ZoneQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.dns().zones().single(params.id),\n  });\n}\n\nexport interface CreateParams {\n  origin: string;\n  hosted: boolean;\n}\n\nexport async function create(\n  params: StandardParams<ZoneQuery> & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.dns().zones().collection(),\n  });\n}\n\nexport type UpdateParams = Pick<CreateParams, \"hosted\">;\n\nexport async function update(\n  params: StandardParams<ZoneQuery> & {\n    id: ResourceId;\n    value: UpdateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.dns().zones().single(params.id),\n  });\n}\n\nexport async function remove(\n  params: StandardParams<ZoneQuery> & {\n    zoneId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.dns().zones().single(params.zoneId),\n  });\n}\n","import {\n  Resource,\n  ResourceId,\n  Time,\n  CollectionDoc,\n} from \"../../../common/structs\";\nimport { StandardParams, getRequest, links } from \"../../../common/api\";\n\nexport type Collection = CollectionDoc<Attempt>;\n\n/**\n * Information for TLS certificate generation\n */\nexport interface BaseAttempt extends Resource {\n  /** The hub this attempt too place on */\n  hub_id: ResourceId;\n  /** The domains included in the attempt */\n  domains: string[];\n  time: Time;\n}\n/**\n * Information for a successful TLS certificate generation\n */\nexport interface SuccessfulAttempt extends BaseAttempt {\n  /** A true value, indicating the attempt was successful */\n  success: true;\n}\n\n/** Information for a failed TLS certificate generation */\nexport interface FailedAttempt extends BaseAttempt {\n  /** A false value, indicating the attempt failed */\n  success: false;\n  /** The error produced by the failure to generate a TLS certificate */\n  error: string;\n}\n\nexport type Attempt = SuccessfulAttempt | FailedAttempt;\n\nexport async function getAttempts(params: StandardParams) {\n  return getRequest<Collection>({\n    ...params,\n    target: links.dns().tls().collection(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State,\n  Events,\n  UserScope,\n  StatefulCounts,\n  UserIncludes,\n  Cluster,\n} from \"../../common/structs\";\nimport { ContainerState, Instances, Service } from \"../containers\";\nimport { IPNet } from \"../infrastructure/ips\";\nimport { LoadBalancerService, VPNService, DiscoveryService } from \"./services\";\n\nexport type Collection = CollectionDoc<Environment, EnvironmentIncludes>;\nexport type Single = SingleDoc<Environment, EnvironmentIncludes>;\nexport type EnvironmentState =\n  | \"new\"\n  | \"live\"\n  | \"cloning\"\n  | \"deleting\"\n  | \"deleted\";\nexport type EnvironmentQuery = QueryParams<\n  keyof EnvironmentIncludes,\n  keyof EnvironmentMeta\n>;\n\n/**\n * An extended resource which includes information about an environment\n */\nexport interface Environment extends Resource<EnvironmentMeta> {\n  /** The name of the environment */\n  name: string;\n  cluster: Cluster;\n  /** Additional about information for an environment */\n  about: About;\n  creator: UserScope;\n  hub_id: ResourceId;\n  state: State<EnvironmentState>;\n  events: Events;\n  features: Features;\n  services: Services;\n  private_network: PrivateNetwork | null;\n}\n\nexport interface About {\n  /** An environment description */\n  description: string;\n  /** A boolean, where true represents the environment being set to favorite */\n  favorite: boolean;\n}\n\n/** Information about a private network */\nexport interface PrivateNetwork {\n  /** The vxlan tag added to each packet to help identify the network */\n  vxlan_tag: number;\n  /** The subnet ID associated with the network */\n  subnet: string;\n  ipv6: IPNet;\n  legacy: Legacy | null;\n}\n/**\n * Legacy network information, including subnet and IP\n */\n\nexport interface Legacy {\n  /** The subnet ID */\n  subnet: number;\n  ipv4: IPNet;\n}\n\n/** Environment features information */\nexport interface Features {\n  /** A boolean, where true represents that legacy networking has been enabled */\n  legacy_networking: boolean;\n}\n\n/** Information about the service containers of the environment */\nexport interface Services {\n  discovery: DiscoveryService | null;\n  vpn: VPNService | null;\n  loadbalancer: LoadBalancerService | null;\n}\n\nexport interface EnvironmentIncludes {\n  creators: UserIncludes;\n}\n\nexport interface EnvironmentMeta {\n  containers_count?: StatefulCounts<ContainerState>;\n  instances_count?: StatefulCounts<Instances.InstanceState>;\n  containers?: EnvironmentContainerMeta[];\n}\n\nexport interface EnvironmentContainerMeta {\n  id: ResourceId;\n  name: string;\n  state: State<ContainerState> & {\n    desired: ContainerState;\n  };\n  image: {\n    id: ResourceId;\n    service: Service | null;\n  };\n  environment: {\n    id: ResourceId;\n    cluster: string;\n    container_subnet?: string;\n    ipv6?: IPNet;\n    legacy: Legacy | null;\n  };\n}\n\n/** Information for creating an environment */\nexport interface CreateParams {\n  /** The name of the environment */\n  name: string;\n  cluster: Cluster;\n  /** Extra optional about information  */\n  about: {\n    /** A description of the environment */\n    description: string;\n  };\n  /** A list of enabled features for the environment */\n  features: {\n    /** A boolean, where true represents legacy networking will be enabled and each container can have a maximum of 255 instances */\n    legacy_networking: boolean;\n  };\n  /** Stack information - if this environment will be used to deploy a stack */\n  stack?: {\n    id: ResourceId;\n    build_id: ResourceId;\n  };\n}\n\nexport async function getCollection(params: StandardParams<EnvironmentQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.environments().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<EnvironmentQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.environments().single(params.id),\n  });\n}\n\nexport async function create(\n  params: StandardParams<EnvironmentQuery> & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.environments().collection(),\n  });\n}\n\nexport async function update(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Partial<CreateParams>;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.environments().single(params.id),\n  });\n}\n","import { Resource, ResourceId, SingleDoc, State } from \"../../common/structs\";\nimport { EnvironmentState } from \"./environment\";\nimport { Service } from \"./services\";\nimport { ContainerState } from \"../containers/container\";\nimport { Location } from \"../infrastructure/provider/location\";\nimport { StandardParams, links } from \"../../common/api\";\nimport * as Request from \"../../common/api/request\";\n\nexport type EnvironmentSummaryDoc = SingleDoc<EnvironmentSummary>;\n/**\n * An extended resource that contains a higher level environment summary\n */\nexport interface EnvironmentSummary extends Resource {\n  state: EnvironmentState;\n  services: Record<string, ServiceSummary>;\n  stats: Stats;\n}\n\n/** An extended service that contains information about the state of a service */\nexport interface ServiceSummary extends Service {\n  state: State<ContainerState>;\n}\n\n/** Statistics for containers and instances */\nexport interface Stats {\n  containers: ContainerStats;\n  instances: InstanceStats;\n}\n\n/**\n * Statistics for a container\n */\nexport interface ContainerStats {\n  /** The amount of times the container has been in each state */\n  state: { [key: string]: number };\n  /** The total of all states combined */\n  total: number;\n  // TODO need to investigate\n  available: number;\n}\n\n/**\n * Statistics for an instance\n */\nexport interface InstanceStats {\n  /** Geographical statistics for the instance */\n  geo:\n    | {\n        datacenter_id: ResourceId;\n        location: Location;\n        available: number;\n        total: number;\n        active: number;\n      }[]\n    | null;\n  state: { [key: string]: number };\n  total: number;\n  available: number;\n}\n\nexport async function getSummary(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<EnvironmentSummaryDoc>({\n    ...params,\n    target: links.environments().summary(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../common/structs\";\n\nexport type EnvironmentAction = \"start\" | \"stop\" | \"initialize\";\n\nexport async function start(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"start\",\n    },\n  });\n}\n\nexport async function stop(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"stop\",\n    },\n  });\n}\n\nexport async function initialize(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"initialize\",\n    },\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.environments().single(params.id),\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<EnvironmentAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<EnvironmentAction, K>>({\n    ...params,\n    target: links.environments().tasks(params.id),\n  });\n}\n","import {\n  Resource,\n  ResourceId,\n  UserScope,\n  State as BaseState,\n  Events,\n  CollectionDoc,\n  SingleDoc\n} from \"../../common/structs\";\nimport { links, QueryParams, StandardParams } from \"../../common/api\";\nimport * as Request from \"../../common/api/request\";\n\n/****************************** Scoped Variable Struct ******************************/\n\nexport interface ScopedVariable extends Resource {\n  creator: UserScope;\n  hub_id: ResourceId;\n  environment_id: ResourceId;\n  identifier: string;\n  secret: Secret | null;\n  scope: Scope;\n  source: Source;\n  state: State;\n  events: Events;\n}\n\n/****************************** Variable Struct Sub Types ******************************/\n\nexport interface State extends BaseState<States> {}\n\nexport type States =\n  \"live\" |\n  \"deleting\" |\n  \"deleted\";\n\nexport type Source = SourceBase<\"raw\"> | SourceBase<\"url\">;\n\nexport interface SourceBase<T extends AllSourceKeys> {\n  type: T;\n  details: AllSources[T];\n}\n\nexport interface AllSources {\n  \"raw\": RawSource;\n  \"url\": URLSource;\n}\n\nexport type AllSourceKeys = keyof AllSources;\n\nexport interface RawSource {\n  string: string;\n}\n\nexport interface URLSource {\n  url: string;\n}\n\nexport interface Secret {\n  encrypted: boolean;\n  hint?: string;\n}\n\nexport interface Scope {\n  access: ScopeAccess;\n  containers: ScopeContainers;\n}\n\nexport interface ScopeAccess {\n  env_variable: boolean;\n  internal_api: boolean;\n}\n\nexport interface ScopeContainers {\n  global: boolean;\n  ids: ResourceId[];\n  identifiers: string[]\n}\n\n/****************************** Metas, Includes, Docs, Query ******************************/\n\nexport type Collection = CollectionDoc<ScopedVariable>;\nexport type Single = SingleDoc<ScopedVariable>;\nexport type Query = QueryParams;\n\n/****************************** Params ******************************/\n/** Base Single Params */\ninterface BSP extends StandardParams<Query> {\n  environmentId: ResourceId;\n  id: ResourceId\n}\n/** Base Collection Params */\ninterface BCP extends StandardParams<Query> {\n  environmentId: ResourceId;\n}\n\nexport interface GetCollectionParams extends BCP {}\nexport interface GetSingleParams extends BSP {}\n\nexport type CreateParams = BCP & Request.PostParams<CreateValues>;\nexport type UpdateParams = BSP & Request.PatchParams<UpdateValues>;\nexport interface RemoveParams extends BSP {}\n\n/****************************** Values ******************************/\n\nexport interface CreateValues {\n  identifier: string;\n  scope: Scope;\n  source: Source;\n  secret?: Secret;\n}\n\nexport type UpdateValues = Partial<CreateValues>;\n\n/****************************** Regular Functions ******************************/\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.environments().scopedVariables(params.environmentId).collection()\n  })\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.environments().scopedVariables(params.environmentId).single(params.id)\n  })\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.environments().scopedVariables(params.environmentId).collection()\n  })\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n      ...params,\n      target: links.environments().scopedVariables(params.environmentId).single(params.id),\n  })\n}\n\n/****************************** Task Functions ******************************/\n\nexport async function remove(params: RemoveParams) {\n  return Request.deleteRequest({\n    ...params,\n    target: links.environments().scopedVariables(params.environmentId).single(params.id),\n  })\n}\n","import { Time, ResourceId } from \"../../../common/structs\";\nimport { StandardParams, links } from \"../../../common/api\";\nimport { InstanceState } from \"../../containers/instances\";\nimport * as Request from \"../../../common/api/request\";\n\n// TODO: instances in telemetry point needs to be more specific not sure what that is\n/**\n * Information including a collection of telemetry data points\n */\nexport type Collection = {\n  data: TelemetryPoint[];\n};\n/**\n * Information about a single telemetry point\n */\nexport interface TelemetryPoint {\n  time: Time;\n  /** The instance state and number */\n  instances: Record<InstanceState, number>;\n}\n\nexport async function getInstancesTelemetry(\n  params: StandardParams & {\n    environmentId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.environments().telemetry().instances(params.environmentId),\n  });\n}\n","import { Service } from \"./common\";\nimport { StandardParams, links, postRequest } from \"../../../common/api\";\nimport { ResourceId, CreatedTask } from \"../../../common/structs\";\n\n/**\n * Information about a discovery service configuration\n */\nexport interface DiscoveryService extends Service {\n  config: DiscoveryConfig | null;\n}\n\n// // tslint:disable-next-line:no-empty-interface\nexport interface DiscoveryConfig {}\n\n/**\n * Information about a discovery services deployment state\n */\nexport interface DiscoveryReconfig {\n  /** A boolean where true represents this service is deployed in high availability mode */\n  high_availability?: boolean;\n}\n\n/**\n * A Discovery service container action\n */\nexport type DiscoveryAction = \"reconfigure\";\n\nexport type ServicesReconfigureDiscoveryParams = StandardParams & {\n  environmentId: ResourceId;\n  value: DiscoveryReconfig;\n};\nexport async function reconfigureDiscovery(\n  params: ServicesReconfigureDiscoveryParams,\n) {\n  return postRequest<CreatedTask<DiscoveryAction>>({\n    ...params,\n    target: links\n      .environments()\n      .services()\n      .discovery()\n      .tasks(params.environmentId),\n    value: {\n      action: \"reconfigure\",\n      contents: params.value,\n    },\n  });\n}\n","import { Service } from \"./common\";\nimport {\n  ResourceId,\n  Resource,\n  UserScope,\n  Events,\n  CollectionDoc,\n  SingleDoc,\n  CreatedTask,\n  Time,\n  Webhook,\n} from \"../../../common/structs\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\n\n/**\n * Information about a VPN service configuration\n */\nexport interface VPNService extends Service {\n  config: VPN;\n}\n\n/**\n * Information about a VPN service auth and network settings\n */\nexport interface VPN {\n  auth: VPNAuth;\n  /** A boolean where true represents the VPN container accepting approved connections */\n  allow_internet: boolean;\n}\n\n/**\n * VPN service authorization information\n */\nexport interface VPNAuth {\n  webhook: Webhook | null;\n  /** A boolean, where true represents the ability for a user to log in to the VPN with their Cycle credentials */\n  cycle_accounts: boolean;\n  /** A boolean, where true represents configured VPN accounts to log in to the VPN */\n  vpn_accounts: boolean;\n}\n\n/**\n * An extended resource which includes information on a VPN user\n */\nexport interface VPNUser extends Resource {\n  /** A username for the VPN user */\n  username: string;\n  creator: UserScope;\n  last_login: Time;\n  hub_id: ResourceId;\n  environment_id: ResourceId;\n  events: Events;\n}\n\n/**\n * An extended resource which includes VPN login information\n */\nexport interface VPNLogin extends Resource {\n  /** The username for the VPN user */\n  username: string;\n  environment_id: ResourceId;\n  /** The IP of the user who is logging into the VPN service */\n  ip: string;\n  time: Time;\n  /** A boolean, where true represents a successful login */\n  success: boolean;\n}\n\n/**\n * Information containing VPN reconfiguration details\n */\nexport interface VPNReconfigureDetails {\n  /** A boolean, where true represents the ability to reconfigure a VPN's configuration */\n  enable?: boolean;\n  /** A partial configuration file for a VPN -- see VPN */\n  config?: Partial<VPN>;\n}\n\nexport type VPNUsersDoc = CollectionDoc<VPNUser>;\nexport type VPNUserDoc = SingleDoc<VPNUser>;\n\nexport type VPNLoginsDoc = CollectionDoc<VPNLogin>;\n\n/**\n * Information about a VPN service, including the VPN's url\n */\nexport interface VPNInfo {\n  /** A url associated with the VPN service */\n  url: string;\n  service: VPNService;\n}\n\nexport async function getVPNInfo(\n  params: StandardParams & {\n    environmentId: ResourceId;\n  },\n) {\n  return Request.getRequest<{ data: VPNInfo }>({\n    ...params,\n    target: links.environments().services().vpn().details(params.environmentId),\n  });\n}\n\nexport async function getVPNLogins(\n  params: StandardParams & {\n    environmentId: ResourceId;\n  },\n) {\n  return Request.getRequest<VPNLoginsDoc>({\n    ...params,\n    target: links.environments().services().vpn().logins(params.environmentId),\n  });\n}\n\nexport async function getVPNUsers(\n  params: StandardParams & {\n    environmentId: ResourceId;\n  },\n) {\n  return Request.getRequest<VPNUsersDoc>({\n    ...params,\n    target: links.environments().services().vpn().users(params.environmentId),\n  });\n}\n\nexport interface CreateVPNUserParams {\n  username: string;\n  password: string;\n}\n\nexport async function createVPNUser(\n  params: StandardParams & {\n    environmentId: ResourceId;\n    value: CreateVPNUserParams;\n  },\n) {\n  return Request.postRequest<VPNUserDoc>({\n    ...params,\n    target: links.environments().services().vpn().users(params.environmentId),\n  });\n}\n\nexport async function deleteVPNUser(\n  params: StandardParams & {\n    environmentId: ResourceId;\n    userId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links\n      .environments()\n      .services()\n      .vpn()\n      .user(params.environmentId, params.userId),\n  });\n}\n\nexport type VPNAction = \"reconfigure\";\n\nexport async function reconfigureVPN(\n  params: StandardParams & {\n    environmentId: ResourceId;\n    value: VPNReconfigureDetails;\n  },\n) {\n  return Request.postRequest<CreatedTask<VPNAction>>({\n    ...params,\n    target: links.environments().services().vpn().tasks(params.environmentId),\n    value: {\n      action: \"reconfigure\",\n      contents: params.value,\n    },\n  });\n}\n","import { Service } from \"../common\";\nimport {\n  StandardParams,\n  getRequest,\n  links,\n  postRequest,\n} from \"../../../../common/api\";\nimport { ResourceId, CreatedTask } from \"../../../../common/structs\";\n\n/**\n * A resource with information about load balancer service configuration\n */\nexport interface LoadBalancerService extends Service {\n  config: LoadBalancer | null;\n}\n\n/**\n * The possible load balancer deployment strategies available\n */\n/** @description - accepts only single, others are deprecated */\nexport type LoadBalanceDeploymentStrategy =\n  | \"single\"\n  | \"per-provider\"\n  | \"per-location\";\n\n/**\n * If null is passed to any og these keys, the platform default will\n *  be used and current settings will be overwritten. To keep current\n *  config, submit null for the entire config, rather than individual\n *  items with the config\n */\nexport interface LoadBalancer {\n  haproxy: HAProxyConfig | null;\n  /** A boolean, where true means there is a publicly available IPv4 address assigned to the load balancer */\n  ipv4: boolean | null;\n  /** A boolean, where true means there is a publicly available IPv6 address assigned to the load balancer */\n  ipv6: boolean | null;\n}\n/**\n * HAProxy configuration information\n */\nexport interface HAProxyConfig {\n  default: HAProxyConfigSet;\n  ports: Record<number, HAProxyConfigSet>;\n}\n\n/**\n * A collection of HAProxy configurations for backend and frontend settings\n */\nexport interface HAProxyConfigSet {\n  frontend: HAProxyFrontend;\n  backend: HAProxyBackend;\n}\n\n/**\n * All HAProxy modes available to the load balancer\n */\nexport type HAProxyMode = \"tcp\" | \"http\";\n/**\n * Frontend configuration information for the load balancer - based on HAProxy\n */\nexport interface HAProxyFrontend {\n  mode: HAProxyMode;\n  /** The maximum number of simultaneous connections the load balancer can handle */\n  max_connections: number | null;\n  timeouts: FrontendTimeouts | null;\n}\n/**\n * Information for connection settings and timeouts for the load balancer frontend - based on HAProxy\n */\nexport interface FrontendTimeouts {\n  /** The number of seconds the load balancer will wait for a response from a client before disconnecting */\n  client_secs: number | null;\n  /**  The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly */\n  client_fin_ms: number | null;\n  /** The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set */\n  http_keep_alive_ms: number | null;\n  /** The number of milliseconds the load balancer will wait for a complete HTTP request */\n  http_request_ms: number | null;\n}\n\n/**\n * The possible types of routing available for the load balancer\n */\nexport type HAProxyBalanceMode =\n  | \"roundrobin\"\n  | \"static-rr\"\n  | \"leastconn\"\n  | \"first\"\n  | \"source\";\n\n/**\n * Load balancer backend configuration information - based on HAProxy\n */\nexport interface HAProxyBackend {\n  balance: HAProxyBalanceMode;\n  timeouts: BackendTimeouts | null;\n}\n\nexport interface BackendTimeouts {\n  /** The number of seconds the load balancer will wait for a response */\n  server_secs: number | null;\n  /** The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed */\n  server_fin_ms: number | null;\n  /** The number of milliseconds the load balancer will wait for a successful connection to a container instance  */\n  connect_ms: number | null;\n  /** The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached */\n  queue_ms: number | null;\n  /** The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel  */\n  tunnel_secs: number | null;\n}\n\n/**\n * Information about both current and default settings for load balancers\n */\n\nexport interface LoadBalancerInfoReturn {\n  default_config: LoadBalancer;\n  service: LoadBalancerService;\n}\n\nexport async function getLoadBalancerInfo(\n  params: StandardParams & {\n    environmentId: ResourceId;\n  },\n) {\n  return getRequest<{ data: LoadBalancerInfoReturn }>({\n    ...params,\n    target: links.environments().services().lb().info(params.environmentId),\n  });\n}\n\nexport interface LoadBalancerReconfig {\n  config?: LoadBalancer;\n  high_availability?: boolean;\n}\n\nexport type LoadBalancerAction = \"reconfigure\";\n\nexport type ReconfigureLoadBalancerParams = StandardParams & {\n  environmentId: ResourceId;\n  value: LoadBalancerReconfig;\n};\n/** ### `reconfigureLoadBalancer()` 🚀\n *\n * ---\n *\n * ## Important Notes:\n * - 🚀 Use the cycle job tracker helper function with this function to help\n * you track jobs easier. Basic usage shown in example below\n *\n * - Please refer to `params.value.config` before submitting any values\n *  to make sure you are not resetting values to platform defaults which\n *  you do not intend too\n *\n * ---\n *\n * ### Params\n * @param params is an object containing standard necessary params to\n *  reconfigure the desired lb\n *\n * @param params.environmentId is the environment id of in which the lb you\n *  want to reconfigure lives\n *\n * @param params.value is is an object containing the possible values with\n *  which you can reconfigure the desired lb\n *\n * @param params.value.config __IMPORTANT:__ to keep the current settings with\n *  the config object, leave config as null: `config: null`. If you mark\n *  an individual item within config as null, the platform will set that\n *  items values to the defaults\n *\n * @param params.value.high_availability mark this item as true or false to\n *  to set the desired lb to be put into HA mode (`true`) or not (`false`)\n *\n * ---\n *\n * ### Usage\n * @example\n *  ```ts\n *  const params: Environments.Services.ReconfigureLoadBalancerParams = {\n *    ...YOUR_BASE_PARAMS,\n *    environmentId: SOME_ENV_ID,\n *    values: {\n *      // NOTE: leave the config object out if you do not want the platform to\n *      //  potential reset to the default values. Refer to the params declaration\n *      //  above for more info.\n *      config: {\n *        haproxy: { ... },\n *        ipv4: false,\n *        ipv6: true\n *      },\n *      high_availability: true\n *    }\n *  }\n *\n *  async function() {\n *    const job = await Environments.Services.reconfigureLoadBalancer(params);\n *\n *    try {\n *      // use our future helper lib job tracker here\n *      const jobData = await jobTrack(job);\n *    } catch(e) {\n *      // do something if job errors\n *     console.error(e);\n *    }\n *  }\n *  ```\n *\n * ---\n *\n * ### Cycle Info\n *\n * __Something doesn't look right or work as intended?__ \\\n * Help us make a better TypeScript Platform Interface by submitting an issue on\n * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or\n * forking our repo and submitting a\n * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).\n *\n * [General Docs](https://docs.cycle.io) /\n * [Public API Docs](https://docs.cycle.io/api/introduction) /\n * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /\n * [Cycle's Website](https://cycle.io)\n *\n * ---\n *\n * Last Updated: 2021.01.11 — Grady S\n */\nexport async function reconfigureLoadBalancer(\n  params: ReconfigureLoadBalancerParams,\n) {\n  return postRequest<CreatedTask<LoadBalancerAction>>({\n    ...params,\n    target: links.environments().services().lb().tasks(params.environmentId),\n    value: {\n      action: \"reconfigure\",\n      contents: params.value,\n    },\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, QueryParams, StandardParams } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Events,\n  Resource,\n  ResourceId,\n  SingleDoc,\n  State as StateBase,\n  UserIncludes,\n  UserScope,\n} from \"../../../common/structs\";\nimport { About, SourceType } from \"../image\";\nimport { Origin } from \"../origin\";\n\n/****************************** Image Source Struct ******************************/\n\n/** ### `interface ImageSource`\n * A direct source for a given image.\n *\n * ### Cycle Info\n * __Something doesn't look right or work as intended?__ \\\n * Help us make a better TypeScript Platform Interface by submitting an issue on\n * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or\n * forking our repo and submitting a\n * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).\n *\n * [General Docs](https://docs.cycle.io) /\n * [Public API Docs](https://docs.cycle.io/api/introduction) /\n * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /\n * [Cycle's Website](https://cycle.io)\n *\n * ---\n *\n * Last Updated: 2021.01.29 — Grady S\n */\nexport interface Source extends Resource<Metas> {\n  name: string;\n  about?: About;\n  origin: Origin;\n  creator: UserScope;\n  hub_id: ResourceId;\n  state: State;\n  events: Events;\n}\n\n/****************************** Image Source Struct Sub Types ******************************/\nexport type State = StateBase<States>;\n\n/** ### `type States`\n * Shared image source state.\n * Possible states can be the following:\n * - `live`\n * - `deleting`\n * - `deleted`\n *\n * ---\n *\n * ### Cycle Info\n * __Something doesn't look right or work as intended?__ \\\n * Help us make a better TypeScript Platform Interface by submitting an issue on\n * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or\n * forking our repo and submitting a\n * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).\n *\n * [General Docs](https://docs.cycle.io) /\n * [Public API Docs](https://docs.cycle.io/api/introduction) /\n * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /\n * [Cycle's Website](https://cycle.io)\n *\n * ---\n *\n * Last Updated: 2021.01.29 — Grady S\n */\nexport type States = \"live\" | \"deleting\" | \"deleted\";\n\n/****************************** Metas, Includes, Query, Docs ******************************/\n\nexport type Metas = {\n  images_count?: number;\n};\nexport interface Includes {\n  creators: UserIncludes;\n}\n\nexport type Query = QueryParams<keyof Includes, keyof Metas>;\n\nexport type Single = SingleDoc<Source, Includes>;\nexport type Collection = CollectionDoc<Source, Includes>;\n\n/****************************** Params ******************************/\n/** Base Single Params */\ntype BSP = StandardParams<Query> & {\n  sourceId: ResourceId;\n};\n/** Base Collection Params */\ntype BCP = StandardParams<Query>;\n\ntype GetCollectionParams = BCP;\ntype GetSingleParams = BSP;\ntype CreateParams = BCP & Request.PostParams<CreateValues>;\ntype UpdateParams = BSP & Request.PatchParams<UpdateValues>;\n\n/****************************** Values ******************************/\n\nexport type CreateValues = {\n  name?: string;\n  type: SourceType;\n  origin: Origin;\n  about?: About;\n};\n\nexport type UpdateValues = Partial<CreateValues>;\n\n/****************************** Functions ******************************/\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.images().sources().collection(),\n  });\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.images().sources().collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.images().sources().single(params.sourceId),\n  });\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.images().sources().single(params.sourceId),\n  });\n}\n","import { links, StandardParams } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\nimport { ResourceId } from \"../../../common/structs\";\n\ntype BSP = StandardParams & {\n  sourceId: ResourceId;\n};\n\ntype RemoveParams = BSP;\nexport async function remove(params: RemoveParams) {\n  return Request.deleteRequest({\n    ...params,\n    target: links.images().sources().single(params.sourceId),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State as StateBase,\n  Events,\n  Bytes,\n  UserScope,\n  UserIncludes,\n  ContainerIdentifier,\n} from \"../../common/structs\";\nimport { Config } from \"./config\";\nimport { Source as IncludeSource } from \"./sources\";\nimport { Builds, Stack } from \"../stacks\";\nimport { Origin } from \"./origin\";\n\n/****************************** Image Struct ******************************/\nexport interface Image extends Resource<Metas> {\n  name: string;\n  stack: StackSummary | null;\n  size: Bytes;\n  about?: About;\n  backend: Backend;\n  tags: string[];\n  config: Config;\n  source: Source;\n  creator: UserScope;\n  hub_id: ResourceId;\n  state: State;\n  events: Events;\n}\n\n/****************************** Image Struct Sub Types ******************************/\nexport interface About {\n  description: string | null;\n}\n\nexport type States =\n  | \"new\"\n  | \"downloading\"\n  | \"building\"\n  | \"verifying\"\n  | \"saving\"\n  | \"live\"\n  | \"deleting\"\n  | \"deleted\";\n\nexport type State = StateBase<States>;\nexport interface Backend {\n  provider: string;\n  file_name: string;\n  file_id: string;\n  size: Bytes;\n}\nexport interface Source {\n  type: SourceType;\n  details: SourceDetails;\n  override?: SourceOverride;\n}\n\nexport type SourceType = \"stack-build\" | \"direct\";\n\nexport interface SourceDetails {\n  id: ResourceId;\n  origin: Origin;\n  /** Will container the stack id used to create this source, if it was created via a stack*/\n  stack_id?: ResourceId;\n  /** Any container id's currently using this source will be available here */\n  containers?: ResourceId[];\n}\n\nexport interface SourceOverride {\n  target: string;\n}\n\nexport interface StackSummary {\n  id: ResourceId;\n  build_id: ResourceId;\n  /** An array of container identifiers */\n  containers: ContainerIdentifier[];\n}\n\n/****************************** Metas, Includes, Docs, Query ******************************/\n\nexport interface Metas {\n  containers_count?: number;\n}\n\nexport interface Includes {\n  creators: UserIncludes;\n  stack_builds: Record<ResourceId, Builds.BuildInclude>;\n  stacks: Record<ResourceId, Stack>;\n  sources: Record<ResourceId, IncludeSource>;\n}\n\nexport type Collection = CollectionDoc<Image, Includes>;\nexport type Single = SingleDoc<Image, Includes>;\nexport type Query = QueryParams<keyof Includes, keyof Metas>;\n\n/****************************** Params ******************************/\n/** Base Single Params */\ntype BSP = StandardParams<Query> & {\n  id: ResourceId;\n};\n/** Base Collection Params */\ntype BCP = StandardParams<Query>;\n\nexport type GetCollectionParams = BCP;\nexport type GetSingleParams = BSP;\nexport type CreateParams = BCP & Request.PostParams<CreateValues>;\nexport type UpdateParams = BSP & Request.PatchParams<UpdateValues>;\n\n/****************************** Values ******************************/\nexport interface CreateValues {\n  name?: string;\n  source_id: ResourceId;\n  override?: SourceOverride;\n}\nexport interface UpdateValues {\n  /** The new name for the image */\n  name?: string;\n}\n\n/****************************** Functions ******************************/\n\n/** ### `getCollection(params: GetCollectionParams)`\n * Fetch a list of images\n *\n * __Capability:__ `images-view`\n */\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.images().collection(),\n  });\n}\n\n/** ### `getSingle(params: GetSingleParams)`\n * Fetch a single image\n * __Capability:__ `images-view`\n */\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.images().single(params.id),\n  });\n}\n\n/** ### `create(params: CreateParams)`\n * Creates an image object.\n * __Capability:__ `images-import`\n *\n * ### Important Notes\n * Calling the `create()` function does not import an image. To\n * import an image call @see {importImage()}.\n */\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.images().collection(),\n  });\n}\n\n/** ### `update(params: UpdateParams)`\n * Update basic image properties\n * __Capability:__ `images-update`\n */\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.images().single(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { ResourceId, CreatedTask, Task } from \"../../common/structs\";\n\nexport type CollectionTaskAction = \"prune\";\nexport type TaskAction = \"import\";\n\nexport async function importImage(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return imageTask({\n    ...params,\n    value: {\n      action: \"import\",\n    },\n  });\n}\n\ntype PruneUnusedValue = {\n  source_ids: ResourceId[];\n};\n\ntype PruneUnusedParams = StandardParams & PruneUnusedValue;\nexport async function pruneUnused(params: PruneUnusedParams) {\n  return collectionTask<PruneUnusedValue>({\n    ...params,\n    value: {\n      action: \"prune\",\n      contents: {\n        source_ids: params.source_ids,\n      },\n    },\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.images().single(params.id),\n  });\n}\n\nexport async function collectionTask<K = {}>(\n  params: StandardParams & {\n    value: Task<CollectionTaskAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<CollectionTaskAction, K>>({\n    ...params,\n    target: links.images().collectionTasks(),\n  });\n}\n\nexport async function imageTask<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<TaskAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<TaskAction, K>>({\n    ...params,\n    target: links.images().imageTasks(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport * as Structs from \"../../common/structs\";\nimport * as Containers from \"../containers\";\n\n/****************************** Params ******************************/\ninterface GetContainersParams extends StandardParams {\n  id: Structs.ResourceId;\n}\n\n/****************************** Functions ******************************/\n\nexport async function getContainers(params: GetContainersParams) {\n  return Request.getRequest<Containers.Collection>({\n    ...params,\n    target: links.images().containers(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { Resource, SingleDoc, ResourceId, Events } from \"../../common/structs\";\n\n/****************************** Build Log Struct ******************************/\nexport interface BuildLog extends Resource {\n  image_id: ResourceId;\n  hub_id: ResourceId;\n  log: string;\n  events: Events;\n}\n\n/****************************** Metas, Includes, Docs, Query ******************************/\n\nexport type BuildLogSingle = SingleDoc<BuildLog>;\n\n/****************************** Params ******************************/\n/** Base Single Params */\ntype BSP = StandardParams & {\n  id: ResourceId;\n};\n\nexport type GetBuildLogParams = BSP;\n\n/****************************** Functions ******************************/\n\n/** ### `getSingle(params: GetSingleParams)`\n * Fetch a single build log\n * __Capability:__ `images-view`\n */\nexport async function getBuildLog(params: GetBuildLogParams) {\n  return Request.getRequest<BuildLogSingle>({\n    ...params,\n    target: links.images().buildLog(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  ResourceId,\n  SingleDoc,\n} from \"../../../common/structs\";\nimport { ProviderIdentifier } from \"./provider\";\n\nexport type Collection = CollectionDoc<Location>;\nexport type Single = SingleDoc<Location>;\n\nexport interface Location extends Resource {\n  name: string;\n  geographic: Geographic | null;\n  provider: LocationProvider;\n  compatible: boolean;\n  features: {\n    available: string[];\n    supported: string[];\n  };\n  abbreviation: string;\n  annotations: Record<string, string>;\n}\n\nexport interface Geographic {\n  latitude: number;\n  longitude: number;\n  city: string;\n  state: string;\n  country: string;\n  region: string;\n}\n\nexport interface LocationProvider {\n  identifier: ProviderIdentifier;\n  location: string;\n  code: string;\n}\n\nexport async function getCollection(params: {\n  provider: ResourceId;\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links\n      .infrastructure()\n      .providers()\n      .locations(params.provider),\n  });\n}\n\nexport async function getFeatures(params: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<{ data: { features: string[] } }>({\n    ...params,\n    target: links\n      .infrastructure()\n      .providers()\n      .features(),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  Includes,\n  Gigabytes,\n} from \"../../../common/structs\";\nimport { ProviderIdentifier } from \"./provider\";\nimport { Amount } from \"../../billing\";\nimport { Location } from \"./location\";\n\n/** A collection of server models for a provider */\nexport type Collection = CollectionDoc<Server, ServerIncludes>;\n\n/** A single provider server model document */\nexport type Single = SingleDoc<Server>;\n\n/** A provider server model */\nexport interface Server extends Resource {\n  /** Name of the server */\n  name: string;\n  /** Description of the server */\n  description: string;\n  /** Detailed breakdown of the server's specs */\n  specs: ServerSpecs;\n  /** Information about the provider of this server */\n  provider: ServerProvider;\n  /** Price of this server */\n  price: Amount;\n  /** Whether this server is compatible with Cycle or not */\n  compatible: boolean;\n  /** If true, this server has limited resources and should only be used for lightweight applications */\n  low_resource: boolean;\n  /** An array of Location IDs where this server type is available */\n  location_ids: ResourceId[];\n}\n\nexport interface ServerIncludes extends Includes {\n  locations: Record<ResourceId, Location>;\n}\n\nexport interface ServerProvider {\n  identifier: ProviderIdentifier;\n  category: string;\n  class?: string;\n  model: string;\n  plan_identifier?: string;\n  /** List of location IDs this server is available in */\n  locations: string[];\n}\n\n/** Detailed breakdown of a provider server's specs */\nexport interface ServerSpecs {\n  cpus: CPU[];\n  memory: Memory;\n  storage: Storage[];\n  network: NIC[];\n  features: Features;\n}\n\nexport interface Features {\n  /** The type of raid supported, if any */\n  raid: string | null;\n  /** Features specific to AWS */\n  aws?: AWSFeatures;\n}\n\n/** Features specific to AWS */\nexport interface AWSFeatures {\n  /** A VM type that can support a much higher networking throughput */\n  ena_support: boolean;\n  /** A VM type that can support a much higher storage throughput */\n  ebs_optimized: boolean;\n}\n\n/** Details of a CPU on a provider server */\nexport interface CPU {\n  /** Number of this type of CPU */\n  count: number;\n  type: string;\n  extra?: { [key: string]: string };\n}\n\nexport interface Memory {\n  size_gb: Gigabytes;\n  type: string;\n  extra?: { [key: string]: string };\n}\n\nexport interface Storage {\n  count: number;\n  size_gb: Gigabytes;\n  type: string;\n  extra?: { [key: string]: string };\n}\n\nexport type NICScope = \"public\" | \"private\" | \"shared\";\n\nexport interface NIC {\n  count: number;\n  scope: NICScope;\n  throughput_mbps: number;\n  type: string;\n}\n\nexport type ProviderServerQuery = QueryParams<keyof ServerIncludes>;\n\nexport async function getCollection(params: {\n  provider: ProviderIdentifier;\n  query?: ProviderServerQuery;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links\n      .infrastructure()\n      .providers()\n      .servers(params.provider),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../../common/api\";\nimport { CollectionDoc, Resource } from \"../../../common/structs\";\nimport { Location } from \"./location\";\n\nexport type Collection = CollectionDoc<Provider>;\n\nexport interface Provider extends Resource<ProviderMetas> {\n  name: string;\n  identifier: ProviderIdentifier;\n  website: string;\n  required_fields: Record<string, RequiredField>;\n  features: string[];\n}\n\nexport type ProviderIdentifier = \"equinix-metal\" | \"vultr\" | \"aws\";\n\nexport interface RequiredField {\n  caption: string;\n  regex: string;\n}\n\nexport interface ProviderMetas {\n  locations: Location[];\n}\n\nexport async function getCollection(params: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.infrastructure().providers().collection(),\n  });\n}\n","import { Time, Gigabytes } from \"../../../common/structs\";\nimport { StandardParams, getRequest, links } from \"../../../common/api\";\n\nexport type Collection = {\n  data: UsageDatum[];\n};\n\nexport interface UsageDatum {\n  time: Time;\n  nodes: number;\n  memory_gb: Gigabytes;\n}\n\nexport async function getServerUsage(params: StandardParams) {\n  return getRequest<Collection>({\n    ...params,\n    target: links\n      .infrastructure()\n      .servers()\n      .usage(),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport * as Instances from \"../../containers/instances\";\nimport { ResourceId } from \"../../../common/structs\";\n\nexport async function getServerInstances(\n  params: StandardParams<Instances.InstanceQuery> & {\n    serverId: ResourceId;\n  },\n) {\n  return Request.getRequest<Instances.Collection>({\n    ...params,\n    target: links\n      .infrastructure()\n      .servers()\n      .instances(params.serverId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, DataPointCollection, Time } from \"../../../common/structs\";\nimport { LoadStats } from \"./load\";\nimport { RAMStats } from \"./ram\";\n\nexport type Collection = DataPointCollection<TelemetryPoint>;\n\nexport interface TelemetryPoint {\n  time: Time;\n  load: LoadStats;\n  ram: RAMStats;\n  /** Cycle's base volume, 25GB */\n  storage_base: {\n    used: number;\n    free: number;\n    total: number;\n  };\n  /** User data storage across all devices */\n  storage_pool: {\n    /** The percentage of storage used by user data */\n    data_percent: number;\n    /** The percentage of storage used by the file allocation tables, etc. */\n    meta_percent: number;\n    /** The total amount of storage available */\n    total: number;\n  };\n}\n\nexport async function getCollection(\n  params: StandardParams & {\n    serverId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links\n      .infrastructure()\n      .servers()\n      .telemetry(params.serverId),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams, QueryParams } from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  SingleDoc,\n  Resource,\n  ResourceId,\n  State,\n  Events,\n  Time,\n  Includes,\n  CreatedTask,\n  StatefulCounts,\n  UserScope,\n  Cluster,\n  Gigabytes,\n} from \"../../../common/structs\";\nimport { Stats, Telemetry } from \"../stats\";\nimport {\n  Locations,\n  ProviderIdentifier,\n  Servers as ProviderServers,\n  Provider,\n} from \"../provider\";\nimport { InstanceState } from \"../../containers/instances\";\n\nexport type Collection = CollectionDoc<Server, ServerIncludes>;\nexport type Single = SingleDoc<Server, ServerIncludes>;\n\n/**\n * Filters: [tags]\n */\nexport type ServerQuery = QueryParams<keyof ServerIncludes, keyof ServerMeta>;\n\nexport { Telemetry, Stats };\n\nexport type Server = Resource<ServerMeta> & {\n  hostname: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  provider: ServerProvider;\n  location_id: ResourceId;\n  model_id: ResourceId;\n  node_id: ResourceId | null;\n  cluster: Cluster;\n  features: Features;\n  constraints: Constraints;\n  state: State<ServerState>;\n  events: Events & {\n    provisioning: {\n      started: Time;\n      completed: Time;\n    };\n  };\n};\n\nexport type ServerIncludes = Includes & {\n  locations: Record<ResourceId, Locations.Location>;\n  models: Record<ResourceId, ProviderServers.Server>;\n  providers: Record<ResourceId, Provider>;\n};\n\nexport type ServerMeta = {\n  node?: NodeMetaStats;\n  instances_count?: StatefulCounts<InstanceState>;\n};\n\nexport type NodeMetaStats = {\n  last_checkin: Time;\n  state: State<ServerState>;\n  stats: Stats;\n  healthy: boolean;\n  online: boolean;\n};\n\nexport type Features = {\n  sftp: boolean;\n  base_volume_gb: Gigabytes | null;\n};\n\nexport type ServerState =\n  | \"new\"\n  | \"live\"\n  | \"provisioning\"\n  | \"offline\"\n  | \"deleting\"\n  | \"deleted\";\n\nexport type ServerProvider = {\n  identifier: ProviderIdentifier;\n  model: string;\n  location: string;\n  server: string;\n  init_ips?: string[];\n  mac_addr?: string;\n  extra?: object;\n};\n\nexport type Constraints = {\n  tags: string[];\n  allow: ConstraintsAllow;\n};\n\nexport type ConstraintsAllow = {\n  /** Allow pooled containers? */\n  pool: boolean;\n  /** Allow services? */\n  services: boolean;\n  /** Allow 2x overcommit? */\n  overcommit: boolean;\n};\n\ntype BaseCollectionParams = StandardParams<ServerQuery>;\ntype BaseSingleDocParams = StandardParams<ServerQuery> & {\n  id: ResourceId;\n};\ntype GetCollectionParams = BaseCollectionParams;\ntype GetSingleParams = BaseSingleDocParams;\ntype GetTagParams = StandardParams;\ntype GetClusterParams = StandardParams;\ntype StandardCreateParams = BaseCollectionParams & { value: CreateParams };\ntype AdvancedCreateParams = BaseCollectionParams & {\n  value: AdvancedServerCreateValue;\n};\ntype UpdateServerParams = BaseSingleDocParams & { value: UpdateParams };\ntype RemoveServerParams = BaseSingleDocParams;\nexport interface UpdateParams {\n  constraints: Constraints;\n}\n\nexport interface ServerCreate {\n  /** \"equinix-metal\" | \"vultr\" | \"aws\" */\n  provider: ProviderIdentifier;\n  /** id of the desired server */\n  model_id: string;\n  /** location id of the desired server */\n  location_id: string;\n  /** number of desired servers of this `model_id` at `location_id` */\n  quantity: number;\n  /** must have equal number of hostnames as quantity */\n  hostnames?: string[];\n}\n\nexport interface CreateParams {\n  servers: ServerCreate[];\n  cluster: Cluster;\n}\n\nexport interface AdvancedServerCreateValue {\n  servers: AdvancedServerCreate[];\n  cluster: Cluster;\n}\n\n/** */\nexport interface AdvancedServerCreate extends ServerCreate {\n  /** an array of provision options */\n  advanced: Advanced[];\n}\n\nexport interface Advanced {\n  provision_options?: ProvisionOptions;\n}\n\n/** */\nexport interface ProvisionOptions {\n  /** Specific to AWS. Refers the ebs size in GB as an int*/\n  aws_ebs_size?: number;\n  /** If the provider you deploying servers to have a reservation id */\n  reservation_id?: string;\n}\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.infrastructure().servers().collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.infrastructure().servers().single(params.id),\n  });\n}\n\nexport async function getTags(params: GetTagParams) {\n  return Request.getRequest<{ data: string[] }>({\n    ...params,\n    target: links.infrastructure().servers().tags(),\n  });\n}\n\nexport async function getClusters(params: GetClusterParams) {\n  return Request.getRequest<{ data: string[] }>({\n    ...params,\n    target: links.infrastructure().servers().clusters(),\n  });\n}\n\nexport async function create(params: StandardCreateParams) {\n  return Request.postRequest<CreatedTask<any>>({\n    ...params,\n    target: links.infrastructure().servers().collection(),\n  });\n}\n\n/**\n * Advanced server create allows you to specify reservation ids or if deploying to AWS\n * allows you to specify EBS volume size under the advanced object\n *\n * @see AdvancedServerCreate struct <br/>\n *\n * @example\n * ```ts\n * servers: [\n *  {\n *    provider: \"aws\",\n *    model_id: \"<resource_id>\",\n *    location_id: \"<resource_id>\",\n *    quantity: 2,\n *    advanced: [\n *      {\n *        provision_options: {\n *          aws_ebs_size: 90,\n *          reservation_id: \"<resource_id>\",\n *        }\n *      }\n *    ]\n *  }\n * ],\n * cluster: \"advanced\"\n * ```\n */\nexport async function advancedCreate(params: AdvancedCreateParams) {\n  return Request.postRequest<CreatedTask<any>>({\n    ...params,\n    target: links.infrastructure().servers().collection(),\n  });\n}\n\nexport async function update(params: UpdateServerParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.infrastructure().servers().single(params.id),\n  });\n}\n\nexport async function remove(params: RemoveServerParams) {\n  return Request.deleteRequest({\n    ...params,\n    target: links.infrastructure().servers().single(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId } from \"../../../common/structs\";\nimport { connectToSocket } from \"../../../common/api/websocket\";\n\nexport interface ConsolePipelineParams extends StandardParams {\n  id: ResourceId;\n  /** optional typed onmessage handler */\n  onMessage?: (v: string) => void;\n}\n\nexport interface ConsolePipelineResponse {\n  data: {\n    token: string;\n    address: string;\n  };\n}\n\nexport async function connectToConsole(params: ConsolePipelineParams) {\n  const target = links\n    .infrastructure()\n    .servers()\n    .console(params.id);\n\n  const secretResp = await Request.getRequest<ConsolePipelineResponse>({\n    ...params,\n    target,\n  });\n\n  if (!secretResp.ok) {\n    return secretResp;\n  }\n\n  return connectToSocket({\n    target: \"\",\n    token: secretResp.value.data.token,\n    settings: {\n      url: `${secretResp.value.data.address}`,\n      noVersion: true,\n    },\n    onMessage: params.onMessage,\n    noJsonDecode: true,\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\nimport { Features } from \"./server\";\n\nexport type ServerAction = \"reconfigure.features\";\n\nexport async function reconfigureFeatures(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Features;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"reconfigure.features\",\n      contents: params.value,\n    },\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<ServerAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<ServerAction, K>>({\n    ...params,\n    target: links.infrastructure().servers().tasks(params.id),\n  });\n}\n","import {\n  Resource,\n  ResourceId,\n  IP as IPString,\n  State,\n  CollectionDoc,\n  SingleDoc,\n  UserIncludes,\n  CreatedTask,\n} from \"../../../common/structs\";\nimport { Kind } from \"./kind\";\nimport { ProviderIdentifier, Provider } from \"../provider\";\nimport {\n  StandardParams,\n  getRequest,\n  links,\n  QueryParams,\n  deleteRequest,\n} from \"../../../common/api\";\nimport { IP } from \"./ip\";\nimport { Server } from \"../servers\";\nimport { Location } from \"../provider/location\";\n\nexport type Collection = CollectionDoc<Pool, PoolIncludes>;\nexport type Single = SingleDoc<Pool, PoolIncludes>;\nexport type PoolState = \"live\" | \"releasing\" | \"released\";\n\nexport type PoolQuery = QueryParams<\n  keyof PoolIncludes,\n  string,\n  \"available\" | \"cluster\"\n>;\n\nexport interface Pool extends Resource {\n  hub_id: ResourceId;\n  kind: Kind;\n  provider: PoolProvider;\n  server_id: ResourceId;\n  floating: boolean;\n  location_id: ResourceId;\n  ips: IPs;\n  block: Block;\n  state: State<PoolState>;\n}\n\nexport interface IPs {\n  total: number;\n  available: number;\n}\n\nexport interface Block {\n  cidr: string;\n  gateway: IPString;\n  netmask: IPString;\n  network: IPString;\n}\n\nexport type ReservationIdentifier = string;\nexport type ServerIdentifier = string;\nexport type ServerAssignmentIdentifier = string;\n\nexport interface PoolProvider {\n  identifier: ProviderIdentifier;\n  location: string;\n  reservation: ReservationIdentifier;\n  server: ServerIdentifier;\n  server_assignment: ServerAssignmentIdentifier;\n}\n\nexport interface PoolIncludes {\n  creators: UserIncludes;\n  servers: Record<ResourceId, Server>;\n  providers: Record<ResourceId, Provider>;\n  locations: Record<ResourceId, Location>;\n}\n\nexport async function getCollection(params: StandardParams<PoolQuery>) {\n  return getRequest<Collection>({\n    ...params,\n    target: links.infrastructure().ips().pools().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<PoolQuery> & {\n    id: ResourceId;\n  },\n) {\n  return getRequest<Single>({\n    ...params,\n    target: links.infrastructure().ips().pools().single(params.id),\n  });\n}\n\nexport async function remove(\n  params: StandardParams<PoolQuery> & {\n    id: ResourceId;\n  },\n) {\n  return deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.infrastructure().ips().pools().single(params.id),\n  });\n}\n\nexport async function getPoolIPs(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return getRequest<CollectionDoc<IP>>({\n    ...params,\n    target: links.infrastructure().ips().pools().ips(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, Settings, QueryParams } from \"../../../common/api\";\nimport {\n  ResourceId,\n  Megabytes,\n  Time,\n  StatefulCounts,\n} from \"../../../common/structs\";\nimport { ProviderIdentifier } from \"../provider\";\nimport { InstanceState } from \"../../containers/instances\";\n\n/** A single infrastructure summary document */\nexport type Single = { data: InfrastructureSummary };\n\n/** A summary of infrastructure stats by cluster */\nexport interface InfrastructureSummary {\n  /** ID of the hub */\n  hub_id: ResourceId;\n  /** Stats about image usage */\n  images: ImageStats;\n  clusters: Record<string, Cluster>;\n  updated: Time;\n}\n\nexport interface ImageStats {\n  tier: {\n    total_mb: Megabytes;\n    used_mb: Megabytes;\n  };\n}\n\nexport interface Cluster {\n  name: string;\n  resources: ClusterResources;\n  servers: ServerStats;\n  instances: StatefulCounts<InstanceState>;\n  healthy: boolean;\n  versions: Record<string, Record<string, number>>;\n}\n\nexport interface ClusterResources {\n  ram: RAMResources;\n  cpu: CPUResources;\n  disk: DiskResources;\n}\n\nexport interface RAMResources {\n  total_mb: Megabytes;\n  allocated_mb: Megabytes;\n  used_mb: Megabytes;\n  provisioned_mb: Megabytes;\n}\n\nexport interface CPUResources {\n  cores: number;\n  shares: {\n    allocated: number;\n    total: number;\n  };\n  share_ratio: number;\n}\n\nexport interface DiskResources {\n  total_mb: Megabytes;\n  used_mb: Megabytes;\n}\n\nexport interface ServerStats {\n  count: number;\n  providers: Record<ProviderIdentifier, ProviderStats>;\n  locations: Record<string, LocationStats>;\n  server_ids: ResourceId[];\n}\n\nexport interface ProviderStats {\n  count: number;\n  locations: Record<string, number>;\n  models: Record<string, number>;\n  resources: ClusterResources;\n}\n\nexport interface LocationStats {\n  count: number;\n  providers: Record<ProviderIdentifier, number>;\n  models: Record<string, number>;\n  resources: ClusterResources;\n}\n\nexport async function getSummary(params: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.infrastructure().summary(),\n  });\n}\n","import * as Request from \"../../../common/api\";\nimport { links, StandardParams } from \"../../../common/api\";\n\nexport type Single = { data: DeploymentStrategy };\n\nconst strategyTypes = [\n  \"resource-density\",\n  \"high-availability\",\n  \"first-available\",\n  \"manual\",\n  \"ephemeral\",\n] as const;\n\nexport type StrategyTypes = typeof strategyTypes[number];\n\nexport type DeploymentStrategy = { name: string; description: string };\n\nexport async function getSingle(params: StandardParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.infrastructure().strategies(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport {\n  Time,\n  State,\n  Events,\n  Resource,\n  CollectionDoc,\n  SingleDoc,\n  ResourceId,\n  UserScope,\n  UserIncludes,\n} from \"../../common/structs\";\n\nexport type Collection = CollectionDoc<Job, JobIncludes>;\nexport type Single = SingleDoc<Job, JobIncludes>;\n/**\n * A Job state\n */\nexport type JobState =\n  | \"new\"\n  | \"queued\"\n  | \"error\"\n  | \"scheduled\"\n  | \"expired\"\n  | \"running\"\n  | \"completed\";\n\n/**\n * A Job event\n */\nexport type JobEvent = \"queued\" | \"completed\" | \"started\";\n\n/**\n * An extended resource including information about a job\n */\nexport interface Job extends Resource {\n  /**\n   * A dash separated string showing the environment-ID where the job is taking place\n   */\n  queue: string;\n  /** A short description of the job */\n  caption: string;\n\n  events: Events<JobEvent>;\n  schedule: Time;\n  expires: Time;\n  tasks: JobTask[];\n  /** A combination of the individual task details and job details */\n  hash: string;\n  /** A boolean, where true indicates that the job is set to prevent duplicate jobs quickly */\n  limit_duplicates: boolean;\n  creator: UserScope;\n  hub_id: ResourceId;\n  state: State<JobState>;\n}\n\n/**\n * A tasks state\n */\nexport type TaskState = \"pending\" | \"error\" | \"running\" | \"completed\";\n\n/** Information about a job task */\nexport interface JobTask {\n  /** The ID of the job task */\n  id: string;\n  /** A short description of the job task */\n  caption: string;\n  /** The API function called */\n  header: string;\n  /**  The action being handled by the job */\n  action: string;\n  /** An event object for the job task */\n  events: {\n    queued: Time;\n    started: Time;\n    completed: Time;\n  };\n  /** An array of job task steps */\n  steps: TaskStep[];\n  state: State<TaskState>;\n  /** A boolean, where true indicates the job is failable */\n  failable: boolean;\n  input: { [key: string]: any };\n  output: { [key: string]: any };\n  /** An error object that either holds a message or is null */\n  error: {\n    /** An error message */\n    message: string;\n  } | null;\n}\n\n/**\n * Information about a step of a task\n */\nexport interface TaskStep {\n  /** A short description of the step */\n  caption: string;\n  /** A more verbose description of the step */\n  description: string;\n\n  started: Time;\n  completed: Time;\n}\n\nexport interface JobIncludes {\n  creators: UserIncludes;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.jobs().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.jobs().single(params.id),\n  });\n}\n\nexport async function lookup(\n  params: StandardParams & {\n    lookupId: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    query: {\n      ...params.query,\n      [\"task-object-id\"]: params.lookupId,\n    } as any,\n    target: links.jobs().latest(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  SingleDoc,\n  Email,\n  ResourceId,\n} from \"../../common/structs\";\nimport * as Memberships from \"./membership\";\n/**\n * Information on the accounts role\n */\nexport type RoleName = \"owner\" | \"admin\" | \"developer\" | \"analyst\";\n/**\n * Hub invite information used fro creating an invite\n */\nexport interface CreateParams {\n  recipient: Email; // Email\n  role: RoleName;\n}\n\nexport async function remove(\n  params: StandardParams & {\n    inviteId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<SingleDoc<Memberships.Membership>>({\n    ...params,\n    target: links.hubs().invites().single(params.inviteId),\n  });\n}\n\nexport async function getCollection(\n  params: StandardParams<Memberships.MembershipQuery>,\n) {\n  return Request.getRequest<CollectionDoc<Memberships.Membership>>({\n    ...params,\n    target: links.hubs().invites().collection(),\n  });\n}\n\nexport async function create(\n  params: StandardParams<Memberships.MembershipQuery> & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<SingleDoc<Memberships.Membership>>({\n    ...params,\n    target: links.hubs().invites().collection(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Events,\n  State,\n  ResourceId,\n} from \"../../common/structs\";\nimport { PublicAccount } from \"../accounts/account\";\nimport { Hub } from \"./hub\";\nimport { Capability } from \"./capability\";\nimport { RoleName } from \"./invite\";\n\nexport type Collection = CollectionDoc<Membership, MembershipIncludes>;\nexport type Single = SingleDoc<Membership, MembershipIncludes>;\n/**\n * Possible states of a membership\n */\nexport type MembershipState =\n  | \"pending\"\n  | \"accepted\"\n  | \"declined\"\n  | \"revoked\"\n  | \"deleted\";\n/**\n * Notable membership events\n */\nexport type MembershipEvent = \"joined\";\n/**\n * Notable invitation events\n */\nexport type InvitationEvent = \"accepted\" | \"declined\" | \"revoked\";\nexport type MembershipQuery = QueryParams<\n  keyof MembershipIncludes,\n  keyof MembershipMeta\n>;\n\n/**\n * Membership role information\n */\nexport enum Role {\n  OWNER = 1 << 0,\n  ADMIN = 1 << 1,\n  DEVELOPER = 1 << 2,\n  ANALYST = 1 << 3,\n  DEFAULT = 0,\n}\n\n/**\n * An extended resource including information on a hub membership\n */\nexport interface Membership extends Resource<MembershipMeta> {\n  account_id: ResourceId;\n  hub_id: ResourceId;\n  role: Role;\n  events: Events<MembershipEvent>;\n  state: State<MembershipState>;\n  invitation: Invitation;\n  permissions: MembershipPermissions;\n  preferences: Preferences;\n  cycle?: Cycle;\n  agency?: Agency;\n}\n\nexport interface MembershipMeta {\n  capabilities: Capability[];\n}\n\nexport interface Preferences {\n  notifications: NotificationPreferences;\n}\n\nexport interface NotificationPreferences {\n  api_keys: boolean;\n}\n\nexport interface Cycle {\n  employee_id: ResourceId;\n}\n\nexport interface Agency {\n  id: ResourceId;\n}\n\nexport interface MembershipIncludes {\n  senders: Record<ResourceId, PublicAccount>;\n  hubs: Record<ResourceId, Hub>;\n  accounts: Record<ResourceId, PublicAccount>;\n}\n\nexport interface Cycle {}\n\n/**\n * Information on the memberships access to the hubs environments\n */\nexport interface MembershipPermissions {\n  /** A boolean, where true indicates that the membership has access to all environments in the hub */\n  all_environments: boolean;\n  /** An array of membership environment configurations */\n  environments: MembershipEnvironment[];\n}\n\n/**\n * Per environment information describing the memberships access level\n */\nexport interface MembershipEnvironment {\n  id: ResourceId;\n  /** A boolean, where true indicates this environment can be managed by the membership */\n  manage: boolean;\n}\n\n/**\n * Information for a hub membership invitation\n */\nexport interface Invitation {\n  /** The sending accounts ID and type */\n  sender: {\n    id: ResourceId;\n    /** The account type */\n    type: string;\n  };\n  /** The receiving account email of the invitation */\n  recipient: string;\n  events: Events<InvitationEvent>;\n}\n\nexport async function getCollection(params: StandardParams<MembershipQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.hubs().members().collection(),\n  });\n}\n\nexport async function getCurrentMembership(\n  params: StandardParams<MembershipQuery>,\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.hubs().members().membership(),\n  });\n}\n\nexport async function getHubMember(\n  params: StandardParams<MembershipQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.hubs().members().single(params.id),\n  });\n}\n\nexport async function getHubMemberByAccountId(\n  params: StandardParams<MembershipQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.hubs().members().account(params.id),\n  });\n}\n\nexport interface UpdateParams {\n  role?: RoleName;\n  permissions?: MembershipPermissions;\n}\n\nexport async function update(\n  params: StandardParams<MembershipQuery> & {\n    id: ResourceId;\n    value: UpdateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.hubs().members().single(params.id),\n  });\n}\n\nexport async function revoke(\n  params: StandardParams<MembershipQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<Single>({\n    ...params,\n    target: links.hubs().members().single(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  ResourceId,\n  Events,\n  State,\n  UserScope,\n  SingleDoc,\n} from \"../../common/structs\";\nimport { Capability } from \"./capability\";\n\nexport type Collection = CollectionDoc<ApiKey>;\nexport type Single = SingleDoc<ApiKey>;\n\n/**\n * An extended resource that has information on a Cycle hub API key\n */\n\nexport interface ApiKey extends Resource {\n  /** The name of the API key  */\n  name: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  /** The API key secret */\n  secret?: string;\n  permissions: Permissions;\n  capabilities: ApiKeyCapabilities;\n  ips: string[] | null;\n  state: State<ApiKeyState>;\n  events: Events;\n}\n\nexport interface ApiKeyCapabilities {\n  all: boolean;\n  specific: Capability[];\n}\n\n/**\n * The different states an API key can be in\n */\nexport type ApiKeyState = \"live\" | \"deleting\" | \"deleted\";\n\n/**\n * Permissions information for an API Key\n */\nexport interface Permissions {\n  /** A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments */\n  all_environments: boolean;\n  /** An array of environment permission configurations */\n  environments: EnvironmentPermission[];\n}\n/**\n * An environment ID and a boolean representing management configuration for an API key\n */\nexport interface EnvironmentPermission {\n  id: ResourceId;\n  /** A boolean, where true represents the API keys ability to make changes to the environment components */\n  manage: boolean;\n}\n/**\n * Create information used for an API key\n */\nexport interface CreateParams {\n  /** The name of the API key */\n  name: string;\n  permissions?: Permissions;\n  capabilities: ApiKeyCapabilities;\n  ips: string[] | null;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.hubs().keys().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    apiKeyId: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.hubs().keys().single(params.apiKeyId),\n  });\n}\n\nexport async function create(params: StandardParams & { value: CreateParams }) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.hubs().keys().collection(),\n  });\n}\n\nexport async function update(\n  params: StandardParams & { keyId: ResourceId; value: Partial<CreateParams> },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.hubs().keys().single(params.keyId),\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    keyId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<Single>({\n    ...params,\n    target: links.hubs().keys().single(params.keyId),\n  });\n}\n","import {\n  Resource,\n  ResourceId,\n  UserScope,\n  Time,\n  CollectionDoc,\n  UserIncludes,\n} from \"../../common/structs\";\nimport {\n  StandardParams,\n  getRequest,\n  links,\n  QueryParams,\n} from \"../../common/api\";\nimport { Environment } from \"../environments\";\nimport { Container } from \"../containers\";\nimport { Instance } from \"../containers/instances\";\nimport { Server } from \"../infrastructure/servers\";\nimport { Pool } from \"../infrastructure/ips\";\nimport { Stack } from \"../stacks\";\nimport { Build } from \"../stacks/builds\";\nimport { Zone } from \"../dns/zone\";\nimport { Record as DNSRecord } from \"../dns/records\";\nimport { Image } from \"../images\";\nimport { ApiKey } from \"./apikey\";\nimport { Invoice } from \"../billing/invoices\";\nimport { Method } from \"../billing/methods\";\nimport { Network } from \"../sdn/networks\";\nimport { Membership } from \"./membership\";\nimport { Pipeline, TriggerKeys } from \"../pipelines\";\n\nexport type Collection = CollectionDoc<Activity, ActivityIncludes>;\nexport type ActivityQuery = QueryParams<\n  keyof ActivityIncludes,\n  \"\",\n  ActivityFilter\n>;\nexport type ActivityFilter =\n  | \"search\"\n  | \"environment\"\n  | \"container\"\n  | \"instance\"\n  | \"server\"\n  | \"user\"\n  | \"verbosity\";\n\nexport interface ActivityIncludes {\n  // TODO: change to creators when updated on api\n  users: UserIncludes;\n  components?: Record<\n    string,\n    | Container\n    | Instance\n    | Environment\n    | Image\n    | Server\n    | Pool\n    | Stack\n    | Build\n    | Zone\n    | DNSRecord\n    | ApiKey\n    | Invoice\n    | Method\n    | Network\n    | Membership\n    | Pipeline\n    | TriggerKeys.TriggerKey\n  >;\n}\n\nexport type EventType =\n  // hubs\n  | \"hub.task.delete\"\n  | \"hub.update\"\n  | \"hub.create\"\n  | \"hub.images.prune\"\n  | \"hub.task.images.prune\"\n\n  // environments\n  | \"environment.initialize\"\n  | \"environment.start\"\n  | \"environment.stop\"\n  | \"environment.task.start\"\n  | \"environment.task.stop\"\n  | \"environment.task.initialize\"\n  | \"environment.delete\"\n  | \"environment.task.delete\"\n  | \"environment.update\"\n  | \"environment.create\"\n\n  // environment services\n  | \"environment.services.discovery.task.reconfigure\"\n  | \"environment.services.lb.task.reconfigure\"\n  | \"environment.services.vpn.task.reconfigure\"\n\n  // images\n  | \"image.import\"\n  | \"image.task.import\"\n  | \"image.update\"\n  | \"image.create\"\n  | \"image.delete\"\n  | \"image.task.delete\"\n\n  // image sources\n  | \"image.source.create\"\n  | \"image.source.update\"\n  | \"image.source.task.delete\"\n\n  // containers\n  | \"container.create\"\n  | \"container.start\"\n  | \"container.task.start\"\n  | \"container.stop\"\n  | \"container.task.stop\"\n  | \"container.update\"\n  | \"container.reconfigure\"\n  | \"container.task.reconfigure\"\n  | \"container.reconfigure.volumes\"\n  | \"container.task.reconfigure.volumes\"\n  | \"container.reimage\"\n  | \"container.task.reimage\"\n  | \"container.scale\"\n  | \"container.task.scale\"\n  | \"container.delete\"\n  | \"container.task.delete\"\n\n  // instances\n  | \"container.instance.error\"\n  | \"container.instance.sftp.login\"\n  | \"container.instance.migration.start\"\n  | \"container.instance.migration.revert\"\n  | \"container.instance.delete\"\n  | \"container.instances.delete\"\n  | \"container.instances.create\"\n  | \"container.instance.healthcheck.restarted\"\n\n  // dns zones\n  | \"dns.zone.task.verify\"\n  | \"dns.zone.task.delete\"\n  | \"dns.zone.update\"\n  | \"dns.zone.create\"\n  | \"dns.zone.verify\"\n  | \"dns.zone.delete\"\n\n  // dns records\n  | \"dns.zone.record.cert.generate.auto\"\n  | \"dns.zone.record.cert.generate\"\n  | \"dns.zone.record.delete\"\n  | \"dns.zone.record.update\"\n  | \"dns.zone.record.create\"\n  | \"dns.zone.record.task.delete\"\n  | \"dns.zone.record.task.cert.generate\"\n\n  // stacks\n  | \"stack.task.delete\"\n  | \"stack.update\"\n  | \"stack.create\"\n  | \"stack.task.prune\"\n\n  // stack builds\n  | \"stack.build.create\"\n  | \"stack.build.generate\"\n  | \"stack.build.deploy\"\n  | \"stack.build.delete\"\n  | \"stack.build.task.generate\"\n  | \"stack.build.task.delete\"\n\n  // servers\n  | \"infrastructure.server.task.delete\"\n  | \"infrastructure.server.task.restart\"\n  | \"infrastructure.server.task.provision\"\n  | \"infrastructure.server.update\"\n  | \"infrastructure.server.delete\"\n  | \"infrastructure.server.restart\"\n  | \"infrastructure.server.provision\"\n  | \"infrastructure.server.live\"\n  | \"infrastructure.server.services.sftp.lockdown.auto\"\n  | \"infrastructure.server.reconfigure.features\"\n  | \"infrastructure.server.task.reconfigure.features\"\n\n  // sdn\n  | \"sdn.network.task.delete\"\n  | \"sdn.network.update\"\n  | \"sdn.network.create\"\n  | \"sdn.network.task.reconfigure\"\n\n  // ip pools\n  | \"infrastructure.ips.pool.task.delete\"\n\n  // orders\n  | \"billing.order.task.confirm\"\n  | \"billing.order.confirm\"\n\n  // invoices\n  | \"billing.invoice.task.void\"\n  | \"billing.invoice.task.credit\"\n  | \"billing.invoice.task.refund\"\n  | \"billing.invoice.task.pay\"\n  | \"billing.invoice.pay\"\n\n  // methods\n  | \"billing.method.update\"\n  | \"billing.method.create\"\n  | \"billing.method.delete\"\n  | \"billing.method.task.delete\"\n\n  // api keys\n  | \"hub.apikey.create\"\n  | \"hub.apikey.update\"\n  | \"hub.apikey.delete\"\n\n  // hub membership\n  | \"hub.membership.create\"\n  | \"hub.membership.delete\"\n\n  // pipelines\n  | \"pipeline.update\"\n  | \"pipeline.task.delete\"\n  | \"pipeline.delete\"\n  | \"pipeline.create\"\n  | \"pipeline.task.trigger\"\n  | \"pipeline.trigger\"\n\n  // pipeline trigger keys\n  | \"pipeline.key.update\"\n  | \"pipeline.key.delete\"\n  | \"pipeline.key.create\";\n\n/**\n * An extended resource which includes information on hub activity\n */\n\nexport interface Activity extends Resource {\n  hub_id: ResourceId;\n  // TODO: change to creator when updated on api\n  user: UserScope;\n  /** A number that represents how verbose the Activity reporting should be */\n  verbosity: number;\n  context: Context;\n  session: Session | null;\n  changes: Change[];\n  /** Additional annotations for the activity */\n  annotations: Record<string, any>;\n  error: ActivityError | null;\n  component: Component | null;\n  status: ActivityStatusType;\n  event: EventType;\n  time: Time;\n}\n\n/**\n * Information for an activity that adds additional context\n */\nexport interface Context {\n  environment_id?: ResourceId;\n  container_id?: ResourceId;\n  instance_id?: ResourceId;\n  server_id?: ResourceId;\n  stack_id?: ResourceId;\n  dns_zone_id?: ResourceId;\n}\n\n/**\n * Information on a session - used for activity reporting\n */\nexport interface Session {\n  /** URL endpoint associated with the activity - does not include domain */\n  url: string;\n  /** IP of the account associated with the session */\n  ip: string;\n  api_key: ResourceId | null;\n}\n\n/**\n * Change information - used for activity reporting\n */\nexport interface Change {\n  /** A description of the thing that was changed */\n  component: string;\n  before?: Detail;\n  after?: Detail;\n}\n\n/**\n * Information about a component, such as an instance or container - used for activity reporting\n */\nexport interface Component {\n  /** The ID of the component */\n  id: string;\n  /** The type of component */\n  type: string;\n}\n\n/**\n * Information on an error that has occurred - used for activity reporting\n */\nexport type ActivityError = {\n  /** A message describing the error */\n  message: string;\n};\n\n/**\n * Information on the possible statuses of an activity\n */\nexport type ActivityStatusType =\n  | \"info\"\n  | \"warning\"\n  | \"request\"\n  | \"success\"\n  | \"error\";\n\n/**\n * Extraneous detail information used for activity reporting on changes\n */\n\nexport interface Detail {\n  id?: ResourceId;\n  /** A number representing the amount of the component that exists */\n  number?: number;\n  /** Additional information  */\n  string?: string;\n}\n\nexport async function getCollection(params: StandardParams) {\n  return getRequest<Collection>({\n    ...params,\n    target: links.hubs().activity(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, Settings } from \"../../common/api\";\n\n/**\n * All capabilities available\n */\nexport type Capability =\n  // hubs\n  | \"hubs-update\"\n  | \"hubs-delete\"\n  | \"hubs-invites-send\"\n  | \"hubs-invites-manage\"\n  | \"hubs-members-manage\"\n  | \"hubs-members-view\"\n  | \"hubs-notifications-listen\"\n\n  // billing\n  | \"billing-methods-manage\"\n  | \"billing-invoices-view\"\n  | \"billing-invoices-pay\"\n  | \"billing-orders-manage\"\n  | \"billing-services-view\"\n  | \"billing-credits-view\"\n\n  // sdn\n  | \"sdn-networks-view\"\n  | \"sdn-networks-manage\"\n\n  // pipelines\n  | \"pipelines-manage\"\n  | \"pipelines-view\"\n  | \"pipelines-trigger\"\n\n  // environments\n  | \"environments-create\"\n  | \"environments-delete\"\n  | \"environments-view\"\n  | \"environments-update\"\n  | \"environments-state\"\n  | \"environments-services-manage\"\n  | \"environments-vpn\"\n  | \"environments-vpn-manage\"\n\n  // containers\n  | \"containers-deploy\"\n  | \"containers-view\"\n  | \"containers-console\"\n  | \"containers-ssh\"\n  | \"containers-update\"\n  | \"containers-delete\"\n  | \"containers-state\"\n  | \"containers-volumes-manage\"\n  | \"containers-volumes-view\"\n  | \"containers-instances-migrate\"\n\n  // stacks\n  | \"stacks-manage\"\n  | \"stacks-view\"\n  | \"stacks-builds-manage\"\n  | \"stacks-builds-deploy\"\n\n  // images\n  | \"images-view\"\n  | \"images-import\"\n  | \"images-update\"\n  | \"images-delete\"\n  | \"images-build\"\n  | \"images-sources-view\"\n  | \"images-sources-manage\"\n\n  // jobs\n  | \"jobs-view\"\n\n  // api keys\n  | \"api-keys-manage\"\n\n  // infrastructure\n  | \"ips-manage\"\n  | \"servers-provision\"\n  | \"servers-view\"\n  | \"servers-update\"\n  | \"servers-login\"\n  | \"servers-state\"\n  | \"servers-decommission\"\n\n  // usage\n  | \"usage-view\"\n\n  // dns\n  | \"dns-view\"\n  | \"dns-manage\";\n\n/**\n * Information including a collection of capabilities\n */\nexport interface CapabilityDoc {\n  data: Capability[];\n}\n\nexport async function getCapabilities({\n  query,\n  settings,\n}: {\n  query?: QueryParams;\n  settings?: Settings;\n}) {\n  return Request.getRequest<CapabilityDoc>({\n    query,\n    settings,\n    target: links.hubs().capabilities(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  Events,\n  State,\n  CreatedTask,\n  ResourceId,\n  UserScope,\n  Webhook,\n} from \"../../common/structs\";\nimport { Membership } from \"./membership\";\nimport { Providers } from \"./providers\";\nimport { Term, Plans } from \"../billing\";\nimport { Single as SingleTier } from \"../billing/plans/tiers\";\n\nexport type Collection = CollectionDoc<Hub>;\nexport type Single = SingleDoc<Hub>;\n\nexport type HubQuery = QueryParams<\"\", keyof HubMetas>;\nexport type HubEvents =\n  | \"first_provider\"\n  | \"first_server\"\n  | \"first_environment\"\n  | \"first_image\"\n  | \"first_container\";\n\n/** ### `type HubState`\n * Possible states for a hub:\n * - `new`: Hub order succeeded, but no servers have been brought online to the hub yet\n * - `configuring`: Order is being place and hub created on platform\n * - `live`: At least one server is currently online\n * - `inactive`: @todo\n * - `deleting`: Hub is currently in the process of being deleted\n * - `deleted`: Hub has been deleted and is no longer active\n */\nexport type HubState =\n  | \"new\"\n  | \"configuring\"\n  | \"live\"\n  | \"inactive\"\n  | \"deleting\"\n  | \"deleted\";\n\nexport interface Hub extends Resource<HubMetas> {\n  name: string;\n  creator: UserScope;\n  events: Events<HubEvents>;\n  state: State<HubState>;\n  integrations: Integrations;\n  providers: Providers;\n  webhooks: HubWebhooks;\n  billing: BillingProfile | null;\n}\n\nexport interface Integrations {\n  letsencrypt: LetsEncryptIntegration | null;\n}\n\nexport interface LetsEncryptIntegration {\n  email: string;\n}\n\nexport interface BillingProfile {\n  term: Term;\n  allow_prepaid?: boolean;\n  disable?: boolean;\n  plans: Plans;\n}\n\nexport interface Plans {\n  tier_id: ResourceId;\n  support_id: ResourceId;\n}\n\nexport interface HubWebhooks {\n  server_deployed: Webhook | null;\n};\n\nexport interface HubMetas {\n  membership?: Membership;\n}\n\nexport interface CreateParams {\n  name: string;\n  integrations?: Integrations;\n  providers: Partial<Providers>;\n  webhooks?: HubWebhooks\n}\n\nexport type UpdateParams = Partial<CreateParams>;\n\ntype BaseCollectionParams = StandardParams<HubQuery>;\ntype BaseSingleDocParams = StandardParams<HubQuery>;\n\ntype GetCollectionParams = BaseCollectionParams;\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.hubs().collection(),\n  });\n}\n\ntype GetSingleDocParams = BaseSingleDocParams;\nexport async function getSingle(params: GetSingleDocParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.hubs().single(),\n  });\n}\n\ntype GetCurrentHubTierParams = StandardParams;\nexport async function getCurrentTier(params: GetCurrentHubTierParams) {\n  return Request.getRequest<SingleTier>({\n    ...params,\n    target: links.hubs().tier(),\n  });\n}\n\ntype CreateHubParams = BaseSingleDocParams & { value: CreateParams };\nexport async function create(params: CreateHubParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.hubs().collection(),\n  });\n}\n\ntype UpdateHubParams = BaseSingleDocParams & { value: UpdateParams };\nexport async function update(params: UpdateHubParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.hubs().single(),\n  });\n}\n\ntype RemoveHubParams = BaseSingleDocParams;\nexport async function remove(params: RemoveHubParams) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.hubs().single(),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { Task, CreatedTask } from \"../../../common/structs\";\n\nexport type HubAction = \"leave\";\n\nexport async function leave(params: StandardParams) {\n  return task({\n    ...params,\n    value: {\n      action: \"leave\",\n    },\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    value: Task<HubAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<HubAction, K>>({\n    ...params,\n    target: links.hubs().tasks(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { ResourceId, CreatedTask, Task } from \"../../common/structs\";\n\nexport type NetworkAction = \"reconfigure\";\n\nexport interface ReconfigureParams {\n  environment_ids: ResourceId[];\n}\n\nexport async function reconfigure(\n  params: StandardParams & {\n    id: ResourceId;\n    value: ReconfigureParams;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"reconfigure\",\n      contents: params.value,\n    },\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<NetworkAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<NetworkAction, K>>({\n    ...params,\n    target: links\n      .sdn()\n      .networks()\n      .tasks(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { QueryParams, links, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State,\n  Events,\n  UserScope,\n  UserIncludes,\n  Time,\n  CreatedTask,\n} from \"../../common/structs\";\nimport { Environment } from \"../environments\";\n\nexport type Collection = CollectionDoc<Network, NetworkIncludes>;\nexport type Single = SingleDoc<Network, NetworkIncludes>;\nexport type NetworkQuery = QueryParams<keyof NetworkIncludes>;\n/**\n * Types of states a network can be in\n */\nexport type NetworkState = \"live\" | \"deleting\" | \"deleted\";\n\nexport * from \"./tasks\";\n/**\n * An extended resource including information about a network\n */\nexport interface Network extends Resource {\n  /** The name of the network */\n  name: string;\n  /** The network identifier */\n  identifier: string;\n  /** The cluster this network will accept environment candidates from */\n  cluster: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  state: State<NetworkState>;\n  private_network: PrivateNetwork;\n  environments: NetworkEnvironment[];\n  events: Events;\n}\n\n/**\n * Private network information for the network\n */\nexport interface PrivateNetwork {\n  /** A tag used to ensure proper routing */\n  vxlan_tag: number;\n  /** The subnet of the private network */\n  subnet: string;\n  /** A number used to ensure a MAC address exists for each network */\n  mac_addr_suffix: number;\n  /** Network IPv6 information */\n  ipv6: {\n    /** The networks IPv6 base */\n    ip: string;\n    /** The private network CIDR */\n    cidr: string;\n  };\n}\n\n/**\n * Information about the ID of an environment and the time it was added to the network\n */\nexport interface NetworkEnvironment {\n  id: ResourceId;\n  added: Time;\n}\n\nexport interface NetworkIncludes {\n  creators: UserIncludes;\n  environments: Record<ResourceId, Environment>;\n}\n\nexport async function getCollection(params: StandardParams<NetworkQuery>) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.sdn().networks().collection(),\n  });\n}\n\nexport async function getSingle(\n  params: StandardParams<NetworkQuery> & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.sdn().networks().single(params.id),\n  });\n}\n\nexport interface CreateParams {\n  name: string;\n  identifier: string;\n  cluster: string;\n  environments: ResourceId[];\n}\n\nexport async function create(\n  params: StandardParams<NetworkQuery> & {\n    value: CreateParams;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.sdn().networks().collection(),\n  });\n}\n\nexport interface UpdateParams {\n  name: string;\n  identifier: string;\n}\n\nexport async function update(\n  params: StandardParams<NetworkQuery> & {\n    id: ResourceId;\n    value: UpdateParams;\n  },\n) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.sdn().networks().single(params.id),\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.sdn().networks().single(params.id),\n  });\n}\n","import * as Request from \"../../../../common/api/request\";\nimport { links, StandardParams } from \"../../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../../common/structs\";\n\nexport type BuildAction = \"deploy\" | \"delete\" | \"generate\";\n\nexport interface DeployContents {\n  /** The id of the environment to update with the stack build */\n  environment_id: ResourceId;\n  /**\n   * Optional update object used to specify specific params to update from\n   * the stack build.\n   */\n  update?: DeployContentsUpdate;\n}\n\n/**\n * The update interface used for the `update` key inside\n * of the `DeployContents` interface\n */\nexport interface DeployContentsUpdate {\n  /**\n   * This is a map of the container names to update within the\n   * environment. The map follows the format of:\n   * ```\n   *  {\n   *    container_id: {\n   *      reimage: true,\n   *      reconfigure: true,\n   *    }\n   *  }\n   * ```\n   */\n  containers: Record<ResourceId, DeployUpdateContainers>;\n}\n\nexport interface DeployUpdateContainers {\n  /**\n   * If set to true the container will be reimaged with the image specified in\n   * the stack build\n   */\n  reimage: boolean;\n  /**\n   * If set to true the container will use the new `config` settings specified in\n   * the stack build\n   */\n  reconfigure: boolean;\n}\n\nexport async function deploy(\n  params: StandardParams & {\n    id: ResourceId;\n    stackId: ResourceId;\n    contents: DeployContents;\n  },\n) {\n  return task<DeployContents>({\n    ...params,\n    value: {\n      action: \"deploy\",\n      contents: params.contents,\n    },\n  });\n}\n\nexport async function generate(\n  params: StandardParams & {\n    id: ResourceId;\n    stackId: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: { action: \"generate\" },\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n    stackId: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.stacks().builds(params.stackId).single(params.id),\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    stackId: ResourceId;\n    value: Task<BuildAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<BuildAction, K>>({\n    ...params,\n    target: links.stacks().builds(params.stackId).tasks(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport {\n  QueryParams,\n  links,\n  StandardParams,\n  OptionalPostParam,\n} from \"../../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State,\n  StatefulCounts,\n  Time,\n  StandardEvents,\n} from \"../../../common/structs\";\nimport { Spec } from \"../spec\";\nimport { ContainerState } from \"../../containers\";\nimport { Ref } from \"../../images/origin\";\n\nexport * from \"./tasks/build\";\n\nexport type Collection = CollectionDoc<Build>;\nexport type Single = SingleDoc<Build>;\nexport type BuildState =\n  | \"new\"\n  | \"importing\"\n  | \"building\"\n  | \"verifying\"\n  | \"saving\"\n  | \"live\"\n  | \"deploying\"\n  | \"deleting\"\n  | \"deleted\";\n\nexport type BuildsQuery = QueryParams<string, keyof BuildMetas>;\n\nexport interface Build extends Resource<BuildMetas> {\n  stack_id: ResourceId;\n  hub_id: ResourceId;\n  spec: Spec;\n  about: About;\n  instructions: Instructions;\n  events: StandardEvents;\n  state: State<BuildState>;\n}\n\n// Includes for builds do not have the build spec\nexport interface BuildInclude extends Resource<BuildMetas> {\n  stack_id: ResourceId;\n  hub_id: ResourceId;\n  about: About;\n  instructions: Instructions;\n  events: StandardEvents;\n  state: State<BuildState>;\n}\n\n\nexport interface About {\n  version: string;\n  description: string;\n  git_commit?: GitCommit;\n}\n\nexport interface Source {\n  repo: RepoVersion | null;\n  spec: Spec;\n}\n\nexport interface RepoVersion {\n  url: string;\n  tag: string;\n  commit: GitCommit | null;\n}\n\nexport interface GitCommit {\n  hash: string;\n  message: string;\n  time: Time;\n  author: GitCommitAuthor;\n}\n\nexport interface GitCommitAuthor {\n  name: string;\n  email: string;\n}\n\nexport interface Instructions {\n  /**\n   * @see /resources/images/origin.ts for the Ref interface\n   */\n  git?: Ref;\n}\n\nexport interface BuildMetas {\n  containers_count: StatefulCounts<ContainerState>;\n}\n\nexport async function getCollection(\n  params: StandardParams<BuildsQuery> & {\n    stackId: ResourceId;\n  },\n) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.stacks().builds(params.stackId).collection(),\n  });\n}\n\n/**\n * If a stack id is not know it can be omitted, however this behavior is not\n * recommended unless absolutely necessary.\n */\nexport async function getSingle(\n  params: StandardParams<BuildsQuery> & {\n    id: ResourceId;\n    stackId?: ResourceId;\n  },\n) {\n  if (!params.stackId) {\n    return Request.getRequest<Single>({\n      ...params,\n      target: links.stacks().buildLookup(params.id),\n    });\n  } else {\n    return Request.getRequest<Single>({\n      ...params,\n      target: links.stacks().builds(params.stackId).single(params.id),\n    });\n  }\n}\n\nexport interface CreateParams {\n  instructions?: Instructions;\n  about?: About;\n}\n\nexport async function create(\n  params: OptionalPostParam<CreateParams> & {\n    stackId: ResourceId;\n  },\n) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.stacks().builds(params.stackId).collection(),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, QueryParams, StandardParams } from \"../../common/api\";\nimport {\n  CollectionDoc,\n  Resource,\n  SingleDoc,\n  ResourceId,\n  State as StateBase,\n  Events as EventsBase,\n  UserScope,\n  UserIncludes,\n} from \"../../common/structs\";\nimport { Spec } from \"./spec\";\nimport { Repo } from \"../images/origin\";\n\n/****************************** Stack Struct ******************************/\n\nexport interface Stack extends Resource<StackMetas> {\n  name: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  source: Source;\n  state: State;\n  events: Events;\n}\n\n/****************************** Stack Struct Sub Types ******************************/\n\nexport type State = StateBase<States>;\nexport type States = \"live\" | \"deleting\" | \"deleted\";\nexport type Events = EventsBase<\"last_build\">;\nexport type Source = SourceBase<\"git-repo\"> | SourceBase<\"raw\">;\n\nexport interface SourceBase<T extends AllSourcesKeys> {\n  /**\n   * Key of the origin. Can be any of the following:\n   * - `git-repo`\n   * - `raw`\n   */\n  type: T;\n  details: AllSourcesMap[T];\n}\n\nexport interface AllSourcesMap {\n  /**\n   * @see /resources/images/origin.ts for the Repo interface\n   */\n  \"git-repo\": Repo;\n  raw: Spec;\n}\n\nexport type AllSourcesKeys = keyof AllSourcesMap;\n\n/****************************** Metas, Includes, Docs, Query ******************************/\n\nexport interface StackMetas {\n  containers_count?: number;\n  builds_count?: number;\n}\n\nexport interface Includes {\n  creators: UserIncludes;\n}\n\nexport type Collection = CollectionDoc<Stack>;\nexport type Single = SingleDoc<Stack>;\nexport type Query = QueryParams<keyof Includes, keyof StackMetas>;\n\n/****************************** Params ******************************/\n/** Base Single Params */\ntype BSP = StandardParams<Query> & { id: ResourceId };\n/** Base Collection Params */\ntype BCP = StandardParams<Query>;\n\nexport type GetCollectionParams = BCP;\nexport type GetSingleParams = BSP;\nexport type CreateParams = BCP & Request.PostParams<StackCreateParams>;\nexport type UpdateParams = BSP & Request.PatchParams<UpdateValues>;\n\n/****************************** Values ******************************/\n\n// TODO: change to CreateValues in v2\nexport interface StackCreateParams {\n  name: string;\n  source: Source;\n}\n\nexport type UpdateValues = Partial<StackCreateParams>;\n\n/****************************** Functions ******************************/\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.stacks().collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.stacks().single(params.id),\n  });\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.stacks().collection(),\n  });\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.stacks().single(params.id),\n  });\n}\n","import * as Request from \"../../../common/api/request\";\nimport { links, StandardParams } from \"../../../common/api\";\nimport { ResourceId, Task, CreatedTask } from \"../../../common/structs\";\n\nexport type StackAction = \"prune\";\n\n/** Removes all builds that are not in use and have not been created in the last 30 minutes */\nexport async function pruneBuilds(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return task({\n    ...params,\n    value: {\n      action: \"prune\",\n    },\n  });\n}\n\nexport async function remove(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.deleteRequest<CreatedTask<\"delete\">>({\n    ...params,\n    target: links.stacks().single(params.id),\n  });\n}\n\nexport async function task<K = {}>(\n  params: StandardParams & {\n    id: ResourceId;\n    value: Task<StackAction, K>;\n  },\n) {\n  return Request.postRequest<CreatedTask<StackAction, K>>({\n    ...params,\n    target: links.stacks().tasks(params.id),\n  });\n}\n","/**\n * Denotes size of data, i.e.\n * 10G = 10 Gigabytes\n * 50M = 50 Megabytes etc\n */\nexport type DataSize = string;\n\nexport enum DataSizeUnits {\n  KB = \"K\",\n  MB = \"M\",\n  GB = \"G\",\n  TB = \"T\",\n}\n\nexport type Algorithm = \"raw\" | \"sha512\" | \"md5\";\n\nexport type ContainerIdentifier = string;\n\nexport enum BaseCapabilities {\n  CAP_CHOWN = \"CAP_CHOWN\",\n  CAP_FSETID = \"CAP_FSETID\",\n  CAP_DAC_OVERRIDE = \"CAP_DAC_OVERRIDE\",\n  CAP_FOWNER = \"CAP_FOWNER\",\n  CAP_SETFCAP = \"CAP_SETFCAP\",\n  CAP_SETGID = \"CAP_SETGID\",\n  CAP_SETUID = \"CAP_SETUID\",\n  CAP_KILL = \"CAP_KILL\",\n  CAP_MKNOD = \"CAP_MKNOD\",\n  CAP_NET_BIND_SERVICE = \"CAP_NET_BIND_SERVICE\",\n  CAP_NET_RAW = \"CAP_NET_RAW\",\n  CAP_AUDIT_WRITE = \"CAP_AUDIT_WRITE\",\n  CAP_SYS_CHROOT = \"CAP_SYS_CHROOT\",\n}\n\nexport enum PrivilegedCapabilities {\n  CAP_SETPCAP = \"CAP_SETPCAP\",\n  CAP_DAC_READ_SEARCH = \"CAP_DAC_READ_SEARCH\",\n  CAP_NET_ADMIN = \"CAP_NET_ADMIN\",\n  CAP_NET_BROADCAST = \"CAP_NET_BROADCAST\",\n  CAP_SYS_ADMIN = \"CAP_SYS_ADMIN\",\n  CAP_SYS_MODULE = \"CAP_SYS_MODULE\",\n  CAP_SYS_NICE = \"CAP_SYS_NICE\",\n  CAP_SYS_PACCT = \"CAP_SYS_PACCT\",\n  CAP_SYS_PTRACE = \"CAP_SYS_PTRACE\",\n  CAP_SYS_RAWIO = \"CAP_SYS_RAWIO\",\n  CAP_SYS_RESOURCE = \"CAP_SYS_RESOURCE\",\n  CAP_SYS_TTY_CONFIG = \"CAP_SYS_TTY_CONFIG\",\n  CAP_SYSLOG = \"CAP_SYSLOG\",\n  CAP_AUDIT_CONTROL = \"CAP_AUDIT_CONTROL\",\n  CAP_AUDIT_READ = \"CAP_AUDIT_READ\",\n  CAP_IPC_LOCK = \"CAP_IPC_LOCK\",\n  CAP_IPC_OWNER = \"CAP_IPC_OWNER\",\n  CAP_LINUX_IMMUTABLE = \"CAP_LINUX_IMMUTABLE\",\n  CAP_MAC_ADMIN = \"CAP_MAC_ADMIN\",\n  CAP_MAC_OVERRIDE = \"CAP_MAC_OVERRIDE\",\n  CAP_BLOCK_SUSPEND = \"CAP_BLOCK_SUSPEND\",\n}\n\nexport enum Namespaces {\n  IPC = \"ipc\",\n  PID = \"pid\",\n  UTS = \"uts\",\n  NETWORK = \"network\",\n  MOUNT = \"mount\",\n  USER = \"user\",\n}\n","import { Token } from \"../auth\";\nimport * as Request from \"../common/api/request\";\nimport { links, Settings, connectToSocket } from \"../common/api\";\nimport { Notification } from \"./notification\";\n\n/**\n * Possible event types that can be received\n * on the account notification channel\n */\nexport type AccountTopic =\n  // account\n  | \"account.state.changed\"\n  | \"account.error\"\n\n  // employees\n  | \"employee.state.changed\"\n  | \"employee.error\"\n\n  // hub\n  | \"hub.created\"\n\n  // hub memberships\n  | \"hub.membership.state.changed\"\n  | \"hub.membership.error\"\n  | \"hub.membership.updated\"\n  | \"hub.invite.new\"\n\n  // announcements\n  | \"announcement.created\"\n  | \"announcement.updated\"\n  | \"announcement.state.changed\"\n\n  // jobs\n  | \"job.created\"\n  | \"job.state.changed\";\n\nexport type AccountNotification = Notification<AccountTopic>;\n\n/**\n * Parameters required to initiate an account channel connection\n */\nexport interface AccountChannelParams {\n  token: Token;\n  settings: Settings;\n  onMessage?: (v: AccountNotification) => void;\n}\n\n/**\n * Response from request to initiate account channel.\n * Use the token as a parameter to upgrade connection\n */\nexport interface AccountChannelSecretResponse {\n  data: {\n    token: string;\n  };\n}\n\n/**\n * Opens connection to account channel. First, requests an access token using\n * the authorization token from OAuth. Then, takes that response and appends it to the URL,\n * which will return a websocket we can listen on.\n * @param params Credentials to connect to pipeline\n */\nexport async function connectToAccountChannel(params: AccountChannelParams) {\n  const target = links.channels().account();\n\n  const secretResp = await Request.getRequest<AccountChannelSecretResponse>({\n    target,\n    token: params.token,\n    settings: params.settings,\n  });\n\n  if (!secretResp.ok) {\n    return secretResp;\n  }\n\n  return connectToSocket<AccountNotification>({\n    target,\n    token: secretResp.value.data.token,\n    settings: params.settings,\n    onMessage: params.onMessage,\n  });\n}\n","import * as Request from \"../common/api/request\";\nimport { links, StandardParams, connectToSocket } from \"../common/api\";\nimport { Notification } from \"./notification\";\n\n/**\n * Possible event types that can be received\n * on the hub notification channel\n */\nexport type HubTopic =\n  // billing credits\n  | \"billing.credit.created\"\n  | \"billing.credit.state.changed\"\n  | \"billing.credit.error\"\n\n  // billing discount\n  | \"billing.discount.state.changed\"\n  | \"billing.discount.error\"\n\n  // billing invoice\n  | \"billing.invoice.created\"\n  | \"billing.invoice.updated\"\n  | \"billing.invoice.state.changed\"\n  | \"billing.invoice.error\"\n\n  //billing method\n  | \"billing.method.created\"\n  | \"billing.method.state.changed\"\n  | \"billing.method.updated\"\n  | \"billing.method.error\"\n\n  // billing order\n  | \"billing.order.created\"\n  | \"billing.order.state.changed\"\n  | \"billing.order.error\"\n  | \"billing.order.updated\"\n\n  // billing service\n  | \"billing.service.state.changed\"\n  | \"billing.service.error\"\n\n  // container\n  | \"container.created\"\n  | \"container.updated\"\n  | \"container.reconfigured\"\n  | \"container.state.changed\"\n  | \"container.desired_state.changed\"\n  | \"container.error\"\n\n  // container instance\n  | \"container.instance.state.changed\"\n  | \"container.instance.error\"\n  | \"container.instances.reconfigured\"\n  | \"container.instance.migration.update\"\n  | \"container.instance.health.status.changed\"\n\n  // dns certificate\n  | \"dns.certificate.state.changed\"\n  | \"dns.certificate.error\"\n\n  // dns zone\n  | \"dns.zone.state.changed\"\n  | \"dns.zone.error\"\n  | \"dns.zone.created\"\n  | \"dns.zone.verified\"\n  | \"dns.zone.reconfigured\"\n  | \"dns.zone.certificate.ready\"\n\n  // dns zone record\n  | \"dns.zone.record.state.changed\"\n  | \"dns.zone.records.reconfigured\"\n\n  // environments\n  | \"environment.started\"\n  | \"environment.stopped\"\n  | \"environment.created\"\n  | \"environment.updated\"\n  | \"environment.error\"\n  | \"environment.state.changed\"\n\n  // environment services\n  | \"environment.services.reconfigured\"\n  | \"environment.services.vpn.users.updated\"\n  | \"environment.services.lb.ip.acquired\"\n\n  // environment scoped variables\n  | \"environment.scoped-variable.created\"\n  | \"environment.scoped-variable.updated\"\n  | \"environment.scoped-variable.state.changed\"\n\n  // hub\n  | \"hub.activity.new\"\n  | \"hub.state.changed\"\n  | \"hub.error\"\n  | \"hub.updated\"\n\n  // hub api keys\n  | \"hub.api_key.created\"\n  | \"hub.api_key.updated\"\n  | \"hub.api_key.state.changed\"\n  | \"hub.api_key.error\"\n\n  // hub memberships\n  | \"hub.membership.state.changed\"\n  | \"hub.membership.error\"\n  | \"hub.membership.updated\"\n  | \"hub.membership.new\"\n\n  // images\n  | \"image.created\"\n  | \"image.state.changed\"\n  | \"image.updated\"\n  | \"image.error\"\n\n  // image-sources\n  | \"image.source.state.changed\"\n  | \"image.source.error\"\n  | \"image.source.updated\"\n  | \"image.source.created\"\n\n  // infrastructure ips assignment\n  | \"infrastructure.ips.assignment.state.changed\"\n  | \"infrastructure.ips.assignment.error\"\n\n  // infrastructure ips pool\n  | \"ips_pool.state.changed\"\n  | \"ips_pool.error\"\n\n  // infrastructure server\n  | \"infrastructure.server.state.changed\"\n  | \"infrastructure.server.error\"\n  | \"infrastructure.server.new\"\n  | \"infrastructure.server.reconfigured\"\n\n  // jobs\n  | \"job.created\"\n  | \"job.state.changed\"\n\n  // pipeline\n  | \"pipeline.state.changed\"\n  | \"pipeline.error\"\n  | \"pipeline.updated\"\n  | \"pipeline.created\"\n\n  // pipeline key\n  | \"pipeline.key.state.changed\"\n  | \"pipeline.key.error\"\n  | \"pipeline.key.updated\"\n  | \"pipeline.key.created\"\n\n  // pipeline run\n  | \"pipeline.run.state.changed\"\n  | \"pipeline.run.error\"\n  | \"pipeline.run.created\"\n\n  // sdn\n  | \"sdn.network.created\"\n  | \"sdn.network.error\"\n  | \"sdn.network.reconfigured\"\n  | \"sdn.network.state.changed\"\n  | \"sdn.network.updated\"\n\n  // secret\n  | \"secret.state.changed\"\n  | \"secret.error\"\n\n  // stack\n  | \"stack.state.changed\"\n  | \"stack.error\"\n  | \"stack.created\"\n  | \"stack.updated\"\n\n  // stack builds\n  | \"stack.build.created\"\n  | \"stack.build.state.changed\"\n  | \"stack.build.error\"\n  | \"stack.build.deployed\";\n\nexport type HubNotification = Notification<HubTopic>;\n\nexport interface HubPipelineParams extends StandardParams {\n  onMessage?: (v: HubNotification) => void;\n}\n\nexport interface HubSecretResponse {\n  data: {\n    token: string;\n  };\n}\n\nexport async function connectToHubChannel(params: HubPipelineParams) {\n  const target = links.channels().hub();\n\n  const secretResp = await Request.getRequest<HubSecretResponse>({\n    ...params,\n    target,\n  });\n\n  if (!secretResp.ok) {\n    return secretResp;\n  }\n\n  return connectToSocket<HubNotification>({\n    target,\n    token: secretResp.value.data.token,\n    settings: params.settings,\n    onMessage: params.onMessage,\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { Resource, ResourceId, SingleDoc } from \"../../common/structs\";\nexport type Single = SingleDoc<Response>;\n\nexport interface Response extends Resource {\n  survey_id: string;\n  account_id: string;\n  responses: Responses;\n}\n\nexport type Responses = Record<string, ResponseSection>;\n\nexport type ResponseSection = {\n  answers: Record<string, ResponseAnswer>;\n};\n\nexport type ResponseAnswer = {\n  value: string;\n  extra: Record<string, string>;\n};\n\nexport type postResponseParams = {\n  survey_id: string;\n  account_id: string;\n  responses: Responses;\n};\n\nexport async function postResponse(\n  params: StandardParams & {\n    value: Response;\n  },\n) {\n  return Request.postRequest<Response>({\n    ...params,\n    target: links.surveys().single(params.value.survey_id),\n  });\n}\n\nexport async function getResponse(\n  params: StandardParams & {\n    survey_id: ResourceId;\n  },\n) {\n  return Request.getRequest<Response>({\n    ...params,\n    target: links.surveys().response(params.survey_id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { Resource, ResourceId, SingleDoc } from \"../../common/structs\";\nimport { links, StandardParams } from \"../../common/api\";\nimport { Response } from \"./response\";\n\nexport type SurveySingle = SingleDoc<Survey>;\nexport type SendResponseParams = Response;\n\nexport interface Survey extends Resource {\n  hub_scoped: ResourceId;\n  identifier: string;\n  active: boolean;\n  title: string;\n  reward?: Reward;\n  sections: Section[];\n}\n\nexport interface Section {\n  title: string;\n  key: string;\n  questions: Question[];\n}\n\nexport interface Question {\n  caption: string;\n  key: string;\n  default?: string;\n  checkbox?: boolean;\n  dropdown?: Record<string, string>;\n  required?: boolean;\n  conditional_questions?: Record<string, Question[]>;\n}\n\nexport interface Reward {\n  credit?: number;\n}\n\nexport async function getSingle(\n  params: StandardParams & {\n    id: ResourceId;\n  },\n) {\n  return Request.getRequest<SurveySingle>({\n    ...params,\n    target: links.surveys().single(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links, QueryParams, StandardParams } from \"../../common/api\";\nimport { Environment } from \"../environments\";\nimport { Container } from \"../containers\";\nimport { Stack } from \"../stacks\";\nimport { Build } from \"../stacks/builds\";\nimport { Image } from \"../images\";\nimport {\n  CollectionDoc,\n  UserIncludes,\n  UserScope,\n  Events as BaseEvents,\n  Resource,\n  ResourceId,\n  SingleDoc,\n  Time,\n  State,\n} from \"../../common/structs\";\nimport { Step } from \"./steps\";\n\nexport type Collection = CollectionDoc<Pipeline, PipelineIncludes>;\nexport type Single = SingleDoc<Pipeline, PipelineIncludes>;\nexport type PipelineQuery = QueryParams<keyof PipelineIncludes>;\n\nexport type Events = BaseEvents & {\n  last_run: Time;\n};\n\nexport type PipelineState = \"new\" | \"deleting\" | \"deleted\";\n\nexport type Pipeline = Resource & {\n  name: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  disable: boolean;\n  stages: Stage[];\n  events: Events;\n  state: State<PipelineState>;\n};\n\nexport interface Stage {\n  identifier: string;\n  steps: Step[];\n  options?: Options;\n}\n\nexport interface Options {\n  skip?: boolean;\n}\n\nexport interface PipelineIncludes {\n  name: string;\n  creators: UserIncludes;\n  components: Record<string, Container | Environment | Stack | Build | Image>;\n}\n\n/** Base Collection Params */\nexport type BCP = StandardParams;\n/** Base Single Params */\nexport type BSP = StandardParams<PipelineQuery> & {\n  id: ResourceId;\n};\n\n// Params\nexport type GetCollectionParams = BCP;\nexport type GetSingleParams = BSP;\nexport type CreateParams = BCP & Request.PostParams<CreateValues>;\nexport type UpdateParams = BSP & Request.PatchParams<UpdateValues>;\n\n// Values\nexport interface CreateValues {\n  name: string;\n  stages?: Stage[];\n  disable?: boolean;\n}\nexport type UpdateValues = Partial<CreateValues>;\n\n// functions\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.pipelines().collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.pipelines().single(params.id),\n  });\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.pipelines().collection(),\n  });\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.pipelines().single(params.id),\n  });\n}\n","import * as Request from \"../../common/api/request\";\nimport { links } from \"../../common/api\";\nimport { ResourceId, CreatedTask } from \"../../common/structs\";\nimport { PipelineQuery, BSP } from \"./pipeline\";\n\n/****************************** Actions ******************************/\n\nexport type TaskActions = \"trigger\" | \"delete\";\n\n/****************************** Params ******************************/\n\nexport type TaskParams<T = {}> = BSP & Request.TaskParams<TaskActions, T>;\n\nexport type TriggerParams = BSP;\nexport type RemoveParams = BSP;\nexport type TriggerWithSecretParams = Request.BaseParams<PipelineQuery> & {\n  id: ResourceId;\n  secret: string;\n};\n\n/****************************** Functions ******************************/\n\nexport async function trigger(params: TriggerParams) {\n  return task({\n    ...params,\n    value: {\n      action: \"trigger\",\n    },\n  });\n}\n\n/** ### `triggerWithSecret()` 🚀\n *\n * Used to trigger a pipeline with a secret created\n *  from generating a trigger key. This function does not require\n *  authentication\n *\n * ---\n *\n * ## Important Notes:\n * - 🚀 Use the cycle job tracker helper function with this function to help\n * you track jobs easier. Basic usage shown in example below\n *\n * ---\n *\n * ### Params\n * @param params is an object for which to put necessary parameters\n *  for triggering a pipeline go\n *\n * @param id id of the pipeline to trigger. This can be found on\n *  the settings page of pipelines\n *\n * @param params.secret the secret from a trigger key. If you have not\n *  yet created a trigger, this can be done easily though the\n *  [Cycle portal](https://portal.cycle.io) or via our api using the\n *  create trigger key function (`Pipelines.TriggerKeys.create()`)\n *\n * ---\n *\n * ### Usage\n * @example\n *  ```ts\n *  const params: Pipelines.TriggerWithSecretParams = {\n *    ...YOUR_BASE_PARAMS,\n *    secret: YOUR_TRIGGER_KEY_SECRET\n *  }\n *\n *  async function() {\n *    const job = await Pipelines.triggerWithSecret(params);\n *\n *    try {\n *     // use our future helper lib job tracker here\n *      await jobTracker(job);\n *    } catch(e) {\n *      // do something if job errors\n *      console.error(e);\n *    }\n *  }\n *  ```\n * For more information on what a tasks returns refer to\n *  [tasks descriptor in Cycle Docs](https://docs.cycle.io/api/jobs/task-descriptor/) for more\n *  information on tasks and how to handle them\n * ---\n *\n * ### Cycle Info\n * __Something doesn't look right or work as intended?__ \\\n * Help us make a better TypeScript Platform Interface by submitting an issue on\n * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or\n * forking our repo and submitting a\n * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).\n *\n * [General Docs](https://docs.cycle.io) /\n * [Public API Docs](https://docs.cycle.io/api/introduction) /\n * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /\n * [Cycle's Website](https://cycle.io)\n *\n * ---\n *\n * Last Updated: 2021.01.11 — Grady S\n */\nexport async function triggerWithSecret(params: TriggerWithSecretParams) {\n  return Request.postRequest<CreatedTask<any>>({\n    ...params,\n    target: links.pipelines().trigger(params.id),\n  });\n}\n\nexport async function remove(params: RemoveParams) {\n  return Request.deleteRequest({\n    ...params,\n    target: links.pipelines().single(params.id),\n  });\n}\n\nexport async function task<T = {}>(params: TaskParams<T>) {\n  return Request.postRequest<CreatedTask<TaskActions, T>>({\n    ...params,\n    target: links.pipelines().tasks(params.id),\n  });\n}\n","import {\n  Resource,\n  UserScope,\n  ResourceId,\n  State as StateBase,\n  Time,\n  CollectionDoc,\n  CustomEvents, UserIncludes\n} from \"../../../common/structs\";\nimport { ErrorResource, StandardParams, links, QueryParams } from \"../../../common/api\";\nimport { AllActionKeys } from \"../steps\";\nimport * as Request from \"../../../common/api/request\";\nimport { TriggerKey } from \"../trigger-keys\";\n\n/****************************** Run Struct ******************************/\nexport type Run = Resource & {\n  creator: UserScope;\n  hub_id: ResourceId;\n  pipeline_id: ResourceId;\n  stages: Stage[];\n  state: State;\n  events: Events;\n};\n\n/****************************** Run Struct Sub Types ******************************/\n\nexport type Events = CustomEvents<\"started\" | \"queued\" | \"finished\">;\n\nexport type State = StateBase<States>;\n\nexport type States = \"new\" | \"queued\" | \"running\" | \"deleting\" | \"deleted\";\n\n/**\n * This is stage struct is specific to runs. If you are looking for\n * the stage struct within the root pipeline object, use `Pipelines.Stage`\n */\nexport type Stage = {\n  identifier: string;\n  events: TimingEvents;\n  steps: Step[];\n};\n\nexport type TimingEvents = {\n  started: Time;\n  finished: Time;\n};\n\n/**\n * This is step struct is specific to runs. If you are looking for\n * the step for a step within a pipeline stage, use `Pipelines.Step`\n */\nexport type Step = {\n  identifier?: string;\n  events: TimingEvents;\n  action: AllActionKeys;\n  success: boolean;\n  error?: ErrorResource;\n};\n\n/****************************** Metas, Includes, Docs, Query ******************************/\nexport type PipelineRunQuery = QueryParams<keyof PipelineRunIncludes>;\nexport type Collection = CollectionDoc<Run, PipelineRunIncludes>;\nexport interface PipelineRunIncludes {\n  creators: UserIncludes;\n  keys: Record<ResourceId, TriggerKey>\n}\n\n/****************************** Params ******************************/\n/** Base Collection Params */\ntype BCP = StandardParams<PipelineRunQuery> & {\n  pipelineId: ResourceId;\n};\n\nexport type GetCollectionParams = BCP;\n\n/****************************** Functions ******************************/\n\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.pipelines().runs(params.pipelineId),\n  });\n}\n","import { links, StandardParams } from \"../../../common/api\";\nimport * as Request from \"../../../common/api/request\";\nimport {\n  CollectionDoc,\n  Events,\n  Resource,\n  ResourceId,\n  SingleDoc,\n  State as StateBase,\n  UserScope,\n} from \"../../../common/structs\";\n\n/****************************** Key Struct ******************************/\n\nexport type TriggerKey = Resource & {\n  name: string;\n  secret: string;\n  creator: UserScope;\n  hub_id: ResourceId;\n  pipeline_id: ResourceId;\n  state: State;\n  events: Events;\n  ips: string[];\n};\n\n/****************************** Key Struct Sub Types ******************************/\n\nexport type State = StateBase<States>;\nexport type States = \"live\" | \"deleting\" | \"deleted\";\n\n/****************************** Metas, Includes, Docs, Query ******************************/\n\nexport type Collection = CollectionDoc<TriggerKey>;\nexport type Single = SingleDoc<TriggerKey>;\n\n/****************************** Params ******************************/\n/** Base Single Params */\nexport type BSP = StandardParams & {\n  pipelineId: ResourceId;\n  keyId: ResourceId;\n};\n/** Base Collection Params */\ntype BCP = StandardParams & {\n  pipelineId: ResourceId;\n};\n\nexport type GetCollectionParams = BCP;\nexport type CreateParams = BCP & Request.PostParams<CreateValues>;\nexport type UpdateParams = BSP & Request.PatchParams<UpdateValues>;\nexport type GetSingleParams = BSP;\n\n/****************************** Values ******************************/\nexport type CreateValues = {\n  name: string;\n  ips: string[] | null;\n};\nexport type UpdateValues = Partial<CreateValues>;\n\n/****************************** Functions ******************************/\n/** Get pipeline keys as a collection\n * @summary get a collection of keys in a given pipeline\n * @param params object containing the target pipelineId to fetch keys for\n */\nexport async function getCollection(params: GetCollectionParams) {\n  return Request.getRequest<Collection>({\n    ...params,\n    target: links.pipelines().keys(params.pipelineId).collection(),\n  });\n}\n\nexport async function getSingle(params: GetSingleParams) {\n  return Request.getRequest<Single>({\n    ...params,\n    target: links.pipelines().keys(params.pipelineId).single(params.keyId),\n  });\n}\n\nexport async function create(params: CreateParams) {\n  return Request.postRequest<Single>({\n    ...params,\n    target: links.pipelines().keys(params.pipelineId).collection(),\n  });\n}\n\nexport async function update(params: UpdateParams) {\n  return Request.patchRequest<Single>({\n    ...params,\n    target: links.pipelines().keys(params.pipelineId).single(params.keyId),\n  });\n}\n","import * as Request from \"../../../common/api\";\nimport { links } from \"../../../common/api\";\nimport { Single, BSP } from \"./trigger-key\";\n\n/****************************** Params ******************************/\nexport type RemoveParams = BSP;\n\n/****************************** Functions ******************************/\nexport async function remove(params: RemoveParams) {\n  return Request.deleteRequest<Single>({\n    ...params,\n    target: links.pipelines().keys(params.pipelineId).single(params.keyId),\n  });\n}\n"],"names":["undefined","formatParams","q","result","recurse","cur","prop","Object","Array","isArray","join","isEmpty","p","hasOwnProperty","keys","map","k","encodeURIComponent","VERSION","ApiRequestInit","method","headers","Headers","Accept","mode","credentials","cache","makeUrl","settings","websocket","secure","version","noVersion","useHttp","url","indexOf","prefix","makeRequest","req","token","hubId","append","fetch","signal","resp","ok","json","error","value","status","title","detail","code","getRequest","target","query","Request","postRequest","body","JSON","stringify","patchRequest","deleteRequest","links","account","single","invites","collection","invite","id","memberships","logins","announcements","audit","entries","billing","orders","tasks","plans","support","tiers","methods","invoices","services","overage","credits","changelog","channels","hub","containers","servers","list","usable","events","summary","compatibleImages","instances","container","console","ssh","instance","volumes","telemetry","resourcesReport","resourcesStream","accounts","dns","zones","records","record","zoneId","recordTasks","domains","tls","environments","lb","info","environment","vpn","details","users","user","discovery","scopedVariables","scopedVariableId","hubs","activity","capabilities","tier","members","membership","images","buildLog","collectionTasks","imageTasks","sources","infrastructure","tags","clusters","usage","providers","provider","locations","features","ips","pools","strategies","jobs","latest","sdn","networks","stacks","buildLookup","build","builds","stack","pipelines","runs","trigger","pipeline","key","surveys","response","connectToSocket","onMessage","noJsonDecode","ws","WS","reason","onmessage","e","payload","data","parse","getMemberships","params","getCollection","update","inviteId","getSingle","remove","EntryComponentType","EntryCode","getEntries","DEFAULT_AUTH_URL","getBrowserAccessToken","getGrantAccessToken","revokeAuth","passwordGrant","pay","task","action","create","confirm","getOverages","externalURL","publish","sendEmail","hide","containerId","getInstanceResourcesTelemetryReport","getInstanceResourceTelemetryStream","authResp","address","instanceId","removeMultiple","connectToConsole","getSSHConnection","expireInstanceSSHTokens","migrate","contents","revertMigration","getCompatibleImages","getInstancesTelemetry","RestartCondition","start","stop","reconfigure","reconfigureVolumes","reimage","scale","Service","getSummary","recordId","generateCert","verify","getAttempts","initialize","environmentId","reconfigureDiscovery","getVPNInfo","getVPNLogins","getVPNUsers","createVPNUser","deleteVPNUser","userId","reconfigureVPN","getLoadBalancerInfo","reconfigureLoadBalancer","sourceId","importImage","imageTask","pruneUnused","collectionTask","source_ids","getContainers","getBuildLog","getFeatures","getServerUsage","getServerInstances","serverId","getTags","getClusters","advancedCreate","secretResp","reconfigureFeatures","getPoolIPs","lookup","lookupId","Role","getCurrentMembership","getHubMember","getHubMemberByAccountId","revoke","apiKeyId","keyId","getCapabilities","getCurrentTier","leave","deploy","generate","stackId","pruneBuilds","DataSizeUnits","BaseCapabilities","PrivilegedCapabilities","Namespaces","connectToAccountChannel","connectToHubChannel","postResponse","survey_id","getResponse","triggerWithSecret","pipelineId"],"mappings":"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"}