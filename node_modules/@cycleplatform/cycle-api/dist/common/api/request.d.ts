import { Token } from "../../auth";
import { ErrorResource } from "./error";
import { QueryParams } from "./query";
import { CreatedTask, ResourceId, Task } from "../structs";
import { Settings } from "./settings";
/**
 * The result structure of an API request. Can be success or failure
 */
export declare type ApiResult<T> = ResultSuccess<T> | ResultFail<ErrorResource>;
export declare type BaseParams<T = QueryParams> = {
    query?: T;
    settings?: Settings;
};
export declare type StandardParams<T = QueryParams> = BaseParams<T> & {
    token: Token | string;
    hubId: ResourceId;
};
export declare type PostParams<T = object> = {
    value: T;
};
export declare type PatchParams<T = object> = {
    value: T;
};
export declare type OptionalPostParam<T = object> = Partial<PostParams<T>>;
export declare type TaskParams<A extends string, T = {}> = {
    value: Task<A, T>;
};
/** The result of a successful API call */
export interface ResultSuccess<T> {
    ok: true;
    value: T;
}
/** The result of a failed API call */
export interface ResultFail<T> {
    ok: false;
    error: T;
}
/** Standard settings for API call */
export declare const ApiRequestInit: RequestInit;
/** Take a settings bag and turn it into a valid API URL endpoint */
export declare function makeUrl(settings?: Settings, websocket?: boolean): string;
export declare function getRequest<T>({ target, query, token, hubId, settings, }: {
    target: string;
    query?: QueryParams;
    token?: Token | string;
    hubId?: ResourceId;
    settings?: Settings;
}): Promise<ApiResult<T>>;
export declare function postRequest<T>({ target, value, query, token, hubId, settings, }: {
    target: string;
    value?: object;
    query?: QueryParams;
    hubId?: ResourceId;
    token?: Token | string;
    settings?: Settings;
}): Promise<ApiResult<T>>;
export declare function patchRequest<T>({ target, value, query, hubId, token, settings, }: {
    target: string;
    value: object;
    query?: QueryParams;
    hubId?: ResourceId;
    token?: Token | string;
    settings?: Settings;
}): Promise<ApiResult<T>>;
export declare function deleteRequest<T = CreatedTask<"delete">>({ target, query, token, value, hubId, settings, }: {
    target: string;
    query?: QueryParams;
    token?: Token | string;
    hubId?: ResourceId;
    value?: object;
    settings?: Settings;
}): Promise<ApiResult<T>>;
