import { ResourceId } from "../structs";
/**
 * All possible endpoints of Cycle's API
 */
export declare const links: {
    account: () => {
        single: () => string;
        invites: () => {
            collection: () => string;
            invite: (id: ResourceId) => string;
        };
        memberships: () => string;
        logins: () => string;
    };
    announcements: () => {
        collection: () => string;
    };
    audit: () => {
        entries: () => string;
    };
    billing: () => {
        orders: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
        };
        plans: () => {
            support: () => string;
            tiers: () => string;
        };
        methods: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
        };
        invoices: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
        };
        services: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            overage: () => string;
        };
        credits: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
        };
    };
    changelog: () => {
        single: (id: ResourceId) => string;
        collection: () => string;
        tasks: (id: ResourceId) => string;
    };
    channels: () => {
        account: () => string;
        hub: () => string;
    };
    containers: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        tasks: (id: ResourceId) => string;
        servers: (id: ResourceId) => {
            list: () => string;
            usable: () => string;
        };
        events: (id: ResourceId) => string;
        summary: (id: ResourceId) => string;
        compatibleImages: (id: ResourceId) => string;
        instances: () => {
            collection: (container: ResourceId) => string;
            single: (id: ResourceId, container: ResourceId) => string;
            console: (id: ResourceId, container: ResourceId) => string;
            ssh: (instance: ResourceId, container: ResourceId) => string;
            volumes: (id: ResourceId, container: ResourceId) => string;
            tasks: (id: ResourceId, container: ResourceId) => string;
            telemetry: () => {
                resourcesReport: (id: ResourceId, container: ResourceId) => string;
                resourcesStream: (id: ResourceId, container: ResourceId) => string;
            };
        };
        volumes: () => {
            accounts: (container: ResourceId) => string;
            account: (id: ResourceId, container: ResourceId) => string;
        };
        telemetry: () => {
            instances: (id: ResourceId) => string;
        };
    };
    dns: () => {
        zones: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
            records: (id: ResourceId) => string;
            record: (zoneId: ResourceId, id: ResourceId) => string;
            recordTasks: (zoneId: ResourceId, id: ResourceId) => string;
        };
        domains: () => {
            collection: () => string;
        };
        tls: () => {
            collection: () => string;
        };
    };
    environments: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        events: (id: ResourceId) => string;
        summary: (id: ResourceId) => string;
        tasks: (id: ResourceId) => string;
        services: () => {
            lb: () => {
                info: (environment: ResourceId) => string;
                tasks: (environment: ResourceId) => string;
            };
            vpn: () => {
                details: (environment: ResourceId) => string;
                users: (environment: ResourceId) => string;
                user: (environment: ResourceId, user: ResourceId) => string;
                tasks: (environment: ResourceId) => string;
                logins: (environment: ResourceId) => string;
            };
            discovery: () => {
                tasks: (environment: ResourceId) => string;
            };
        };
        telemetry: () => {
            instances: (id: ResourceId) => string;
        };
        scopedVariables: (environment: ResourceId) => {
            collection: () => string;
            single: (scopedVariableId: ResourceId) => string;
        };
    };
    hubs: () => {
        collection: () => string;
        single: () => string;
        tasks: () => string;
        activity: () => string;
        capabilities: () => string;
        tier: () => string;
        invites: () => {
            single: (id: ResourceId) => string;
            collection: () => string;
        };
        members: () => {
            collection: () => string;
            membership: () => string;
            single: (id: ResourceId) => string;
            account: (id: ResourceId) => string;
        };
        keys: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
        };
    };
    images: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        containers: (id: ResourceId) => string;
        buildLog: (id: ResourceId) => string;
        collectionTasks: () => string;
        imageTasks: (id: ResourceId) => string;
        sources: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
        };
    };
    infrastructure: () => {
        summary: () => string;
        servers: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            console: (id: ResourceId) => string;
            telemetry: (id: ResourceId) => string;
            instances: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
            tags: () => string;
            clusters: () => string;
            usage: () => string;
        };
        providers: () => {
            collection: () => string;
            servers: (provider: ResourceId) => string;
            locations: (provider: ResourceId) => string;
            features: () => string;
        };
        ips: () => {
            pools: () => {
                collection: () => string;
                single: (id: ResourceId) => string;
                ips: (id: ResourceId) => string;
            };
        };
        strategies: () => string;
    };
    jobs: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        latest: () => string;
    };
    sdn: () => {
        networks: () => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
        };
    };
    stacks: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        tasks: (id: ResourceId) => string;
        buildLookup: (build: ResourceId) => string;
        builds: (stack: ResourceId) => {
            collection: () => string;
            single: (id: ResourceId) => string;
            tasks: (id: ResourceId) => string;
        };
    };
    pipelines: () => {
        collection: () => string;
        single: (id: ResourceId) => string;
        runs: (id: ResourceId) => string;
        tasks: (id: ResourceId) => string;
        trigger: (id: ResourceId) => string;
        keys: (pipeline: ResourceId) => {
            collection: () => string;
            single: (key: ResourceId) => string;
        };
    };
    surveys: () => {
        single: (id: ResourceId) => string;
        response: (id: ResourceId) => string;
    };
};
