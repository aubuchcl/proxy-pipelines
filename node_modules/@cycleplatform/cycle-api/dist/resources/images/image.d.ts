import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, ResourceId, State as StateBase, Events, Bytes, UserScope, UserIncludes, ContainerIdentifier } from "../../common/structs";
import { Config } from "./config";
import { Source as IncludeSource } from "./sources";
import { Builds, Stack } from "../stacks";
import { Origin } from "./origin";
/****************************** Image Struct ******************************/
export interface Image extends Resource<Metas> {
    name: string;
    stack: StackSummary | null;
    size: Bytes;
    about?: About;
    backend: Backend;
    tags: string[];
    config: Config;
    source: Source;
    creator: UserScope;
    hub_id: ResourceId;
    state: State;
    events: Events;
}
/****************************** Image Struct Sub Types ******************************/
export interface About {
    description: string | null;
}
export declare type States = "new" | "downloading" | "building" | "verifying" | "saving" | "live" | "deleting" | "deleted";
export declare type State = StateBase<States>;
export interface Backend {
    provider: string;
    file_name: string;
    file_id: string;
    size: Bytes;
}
export interface Source {
    type: SourceType;
    details: SourceDetails;
    override?: SourceOverride;
}
export declare type SourceType = "stack-build" | "direct";
export interface SourceDetails {
    id: ResourceId;
    origin: Origin;
    /** Will container the stack id used to create this source, if it was created via a stack*/
    stack_id?: ResourceId;
    /** Any container id's currently using this source will be available here */
    containers?: ResourceId[];
}
export interface SourceOverride {
    target: string;
}
export interface StackSummary {
    id: ResourceId;
    build_id: ResourceId;
    /** An array of container identifiers */
    containers: ContainerIdentifier[];
}
/****************************** Metas, Includes, Docs, Query ******************************/
export interface Metas {
    containers_count?: number;
}
export interface Includes {
    creators: UserIncludes;
    stack_builds: Record<ResourceId, Builds.BuildInclude>;
    stacks: Record<ResourceId, Stack>;
    sources: Record<ResourceId, IncludeSource>;
}
export declare type Collection = CollectionDoc<Image, Includes>;
export declare type Single = SingleDoc<Image, Includes>;
export declare type Query = QueryParams<keyof Includes, keyof Metas>;
/****************************** Params ******************************/
/** Base Single Params */
declare type BSP = StandardParams<Query> & {
    id: ResourceId;
};
/** Base Collection Params */
declare type BCP = StandardParams<Query>;
export declare type GetCollectionParams = BCP;
export declare type GetSingleParams = BSP;
export declare type CreateParams = BCP & Request.PostParams<CreateValues>;
export declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
/****************************** Values ******************************/
export interface CreateValues {
    name?: string;
    source_id: ResourceId;
    override?: SourceOverride;
}
export interface UpdateValues {
    /** The new name for the image */
    name?: string;
}
/****************************** Functions ******************************/
/** ### `getCollection(params: GetCollectionParams)`
 * Fetch a list of images
 *
 * __Capability:__ `images-view`
 */
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
/** ### `getSingle(params: GetSingleParams)`
 * Fetch a single image
 * __Capability:__ `images-view`
 */
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
/** ### `create(params: CreateParams)`
 * Creates an image object.
 * __Capability:__ `images-import`
 *
 * ### Important Notes
 * Calling the `create()` function does not import an image. To
 * import an image call @see {importImage()}.
 */
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
/** ### `update(params: UpdateParams)`
 * Update basic image properties
 * __Capability:__ `images-update`
 */
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
export {};
