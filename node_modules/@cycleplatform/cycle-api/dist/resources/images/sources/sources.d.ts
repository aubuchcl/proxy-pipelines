import * as Request from "../../../common/api/request";
import { QueryParams, StandardParams } from "../../../common/api";
import { CollectionDoc, Events, Resource, ResourceId, SingleDoc, State as StateBase, UserIncludes, UserScope } from "../../../common/structs";
import { About, SourceType } from "../image";
import { Origin } from "../origin";
/****************************** Image Source Struct ******************************/
/** ### `interface ImageSource`
 * A direct source for a given image.
 *
 * ### Cycle Info
 * __Something doesn't look right or work as intended?__ \
 * Help us make a better TypeScript Platform Interface by submitting an issue on
 * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or
 * forking our repo and submitting a
 * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).
 *
 * [General Docs](https://docs.cycle.io) /
 * [Public API Docs](https://docs.cycle.io/api/introduction) /
 * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /
 * [Cycle's Website](https://cycle.io)
 *
 * ---
 *
 * Last Updated: 2021.01.29 — Grady S
 */
export interface Source extends Resource<Metas> {
    name: string;
    about?: About;
    origin: Origin;
    creator: UserScope;
    hub_id: ResourceId;
    state: State;
    events: Events;
}
/****************************** Image Source Struct Sub Types ******************************/
export declare type State = StateBase<States>;
/** ### `type States`
 * Shared image source state.
 * Possible states can be the following:
 * - `live`
 * - `deleting`
 * - `deleted`
 *
 * ---
 *
 * ### Cycle Info
 * __Something doesn't look right or work as intended?__ \
 * Help us make a better TypeScript Platform Interface by submitting an issue on
 * [Cycles Github](https://github.com/cycleplatform/api-client-nodejs) or
 * forking our repo and submitting a
 * [Pull Request](https://github.com/cycleplatform/api-client-nodejs/pulls).
 *
 * [General Docs](https://docs.cycle.io) /
 * [Public API Docs](https://docs.cycle.io/api/introduction) /
 * [Internal API Docs](https://docs.cycle.io/internal-api/introduction) /
 * [Cycle's Website](https://cycle.io)
 *
 * ---
 *
 * Last Updated: 2021.01.29 — Grady S
 */
export declare type States = "live" | "deleting" | "deleted";
/****************************** Metas, Includes, Query, Docs ******************************/
export declare type Metas = {
    images_count?: number;
};
export interface Includes {
    creators: UserIncludes;
}
export declare type Query = QueryParams<keyof Includes, keyof Metas>;
export declare type Single = SingleDoc<Source, Includes>;
export declare type Collection = CollectionDoc<Source, Includes>;
/****************************** Params ******************************/
/** Base Single Params */
declare type BSP = StandardParams<Query> & {
    sourceId: ResourceId;
};
/** Base Collection Params */
declare type BCP = StandardParams<Query>;
declare type GetCollectionParams = BCP;
declare type GetSingleParams = BSP;
declare type CreateParams = BCP & Request.PostParams<CreateValues>;
declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
/****************************** Values ******************************/
export declare type CreateValues = {
    name?: string;
    type: SourceType;
    origin: Origin;
    about?: About;
};
export declare type UpdateValues = Partial<CreateValues>;
/****************************** Functions ******************************/
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
export {};
