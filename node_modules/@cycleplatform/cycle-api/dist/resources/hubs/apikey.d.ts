import * as Request from "../../common/api/request";
import { StandardParams } from "../../common/api";
import { CollectionDoc, Resource, ResourceId, Events, State, UserScope, SingleDoc } from "../../common/structs";
import { Capability } from "./capability";
export declare type Collection = CollectionDoc<ApiKey>;
export declare type Single = SingleDoc<ApiKey>;
/**
 * An extended resource that has information on a Cycle hub API key
 */
export interface ApiKey extends Resource {
    /** The name of the API key  */
    name: string;
    creator: UserScope;
    hub_id: ResourceId;
    /** The API key secret */
    secret?: string;
    permissions: Permissions;
    capabilities: ApiKeyCapabilities;
    ips: string[] | null;
    state: State<ApiKeyState>;
    events: Events;
}
export interface ApiKeyCapabilities {
    all: boolean;
    specific: Capability[];
}
/**
 * The different states an API key can be in
 */
export declare type ApiKeyState = "live" | "deleting" | "deleted";
/**
 * Permissions information for an API Key
 */
export interface Permissions {
    /** A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments */
    all_environments: boolean;
    /** An array of environment permission configurations */
    environments: EnvironmentPermission[];
}
/**
 * An environment ID and a boolean representing management configuration for an API key
 */
export interface EnvironmentPermission {
    id: ResourceId;
    /** A boolean, where true represents the API keys ability to make changes to the environment components */
    manage: boolean;
}
/**
 * Create information used for an API key
 */
export interface CreateParams {
    /** The name of the API key */
    name: string;
    permissions?: Permissions;
    capabilities: ApiKeyCapabilities;
    ips: string[] | null;
}
export declare function getCollection(params: StandardParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams & {
    apiKeyId: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export declare function create(params: StandardParams & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function update(params: StandardParams & {
    keyId: ResourceId;
    value: Partial<CreateParams>;
}): Promise<Request.ApiResult<Single>>;
export declare function remove(params: StandardParams & {
    keyId: ResourceId;
}): Promise<Request.ApiResult<Single>>;
