import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, Events, State, CreatedTask, ResourceId, UserScope, Webhook } from "../../common/structs";
import { Membership } from "./membership";
import { Providers } from "./providers";
import { Term, Plans } from "../billing";
export declare type Collection = CollectionDoc<Hub>;
export declare type Single = SingleDoc<Hub>;
export declare type HubQuery = QueryParams<"", keyof HubMetas>;
export declare type HubEvents = "first_provider" | "first_server" | "first_environment" | "first_image" | "first_container";
/** ### `type HubState`
 * Possible states for a hub:
 * - `new`: Hub order succeeded, but no servers have been brought online to the hub yet
 * - `configuring`: Order is being place and hub created on platform
 * - `live`: At least one server is currently online
 * - `inactive`: @todo
 * - `deleting`: Hub is currently in the process of being deleted
 * - `deleted`: Hub has been deleted and is no longer active
 */
export declare type HubState = "new" | "configuring" | "live" | "inactive" | "deleting" | "deleted";
export interface Hub extends Resource<HubMetas> {
    name: string;
    creator: UserScope;
    events: Events<HubEvents>;
    state: State<HubState>;
    integrations: Integrations;
    providers: Providers;
    webhooks: HubWebhooks;
    billing: BillingProfile | null;
}
export interface Integrations {
    letsencrypt: LetsEncryptIntegration | null;
}
export interface LetsEncryptIntegration {
    email: string;
}
export interface BillingProfile {
    term: Term;
    allow_prepaid?: boolean;
    disable?: boolean;
    plans: Plans;
}
export interface Plans {
    tier_id: ResourceId;
    support_id: ResourceId;
}
export interface HubWebhooks {
    server_deployed: Webhook | null;
}
export interface HubMetas {
    membership?: Membership;
}
export interface CreateParams {
    name: string;
    integrations?: Integrations;
    providers: Partial<Providers>;
    webhooks?: HubWebhooks;
}
export declare type UpdateParams = Partial<CreateParams>;
declare type BaseCollectionParams = StandardParams<HubQuery>;
declare type BaseSingleDocParams = StandardParams<HubQuery>;
declare type GetCollectionParams = BaseCollectionParams;
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
declare type GetSingleDocParams = BaseSingleDocParams;
export declare function getSingle(params: GetSingleDocParams): Promise<Request.ApiResult<Single>>;
declare type GetCurrentHubTierParams = StandardParams;
export declare function getCurrentTier(params: GetCurrentHubTierParams): Promise<Request.ApiResult<Plans.Tiers.Single>>;
declare type CreateHubParams = BaseSingleDocParams & {
    value: CreateParams;
};
export declare function create(params: CreateHubParams): Promise<Request.ApiResult<Single>>;
declare type UpdateHubParams = BaseSingleDocParams & {
    value: UpdateParams;
};
export declare function update(params: UpdateHubParams): Promise<Request.ApiResult<Single>>;
declare type RemoveHubParams = BaseSingleDocParams;
export declare function remove(params: RemoveHubParams): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
export {};
