import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, Events, State, ResourceId } from "../../common/structs";
import { PublicAccount } from "../accounts/account";
import { Hub } from "./hub";
import { Capability } from "./capability";
import { RoleName } from "./invite";
export declare type Collection = CollectionDoc<Membership, MembershipIncludes>;
export declare type Single = SingleDoc<Membership, MembershipIncludes>;
/**
 * Possible states of a membership
 */
export declare type MembershipState = "pending" | "accepted" | "declined" | "revoked" | "deleted";
/**
 * Notable membership events
 */
export declare type MembershipEvent = "joined";
/**
 * Notable invitation events
 */
export declare type InvitationEvent = "accepted" | "declined" | "revoked";
export declare type MembershipQuery = QueryParams<keyof MembershipIncludes, keyof MembershipMeta>;
/**
 * Membership role information
 */
export declare enum Role {
    OWNER = 1,
    ADMIN = 2,
    DEVELOPER = 4,
    ANALYST = 8,
    DEFAULT = 0
}
/**
 * An extended resource including information on a hub membership
 */
export interface Membership extends Resource<MembershipMeta> {
    account_id: ResourceId;
    hub_id: ResourceId;
    role: Role;
    events: Events<MembershipEvent>;
    state: State<MembershipState>;
    invitation: Invitation;
    permissions: MembershipPermissions;
    preferences: Preferences;
    cycle?: Cycle;
    agency?: Agency;
}
export interface MembershipMeta {
    capabilities: Capability[];
}
export interface Preferences {
    notifications: NotificationPreferences;
}
export interface NotificationPreferences {
    api_keys: boolean;
}
export interface Cycle {
    employee_id: ResourceId;
}
export interface Agency {
    id: ResourceId;
}
export interface MembershipIncludes {
    senders: Record<ResourceId, PublicAccount>;
    hubs: Record<ResourceId, Hub>;
    accounts: Record<ResourceId, PublicAccount>;
}
export interface Cycle {
}
/**
 * Information on the memberships access to the hubs environments
 */
export interface MembershipPermissions {
    /** A boolean, where true indicates that the membership has access to all environments in the hub */
    all_environments: boolean;
    /** An array of membership environment configurations */
    environments: MembershipEnvironment[];
}
/**
 * Per environment information describing the memberships access level
 */
export interface MembershipEnvironment {
    id: ResourceId;
    /** A boolean, where true indicates this environment can be managed by the membership */
    manage: boolean;
}
/**
 * Information for a hub membership invitation
 */
export interface Invitation {
    /** The sending accounts ID and type */
    sender: {
        id: ResourceId;
        /** The account type */
        type: string;
    };
    /** The receiving account email of the invitation */
    recipient: string;
    events: Events<InvitationEvent>;
}
export declare function getCollection(params: StandardParams<MembershipQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getCurrentMembership(params: StandardParams<MembershipQuery>): Promise<Request.ApiResult<Single>>;
export declare function getHubMember(params: StandardParams<MembershipQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export declare function getHubMemberByAccountId(params: StandardParams<MembershipQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export interface UpdateParams {
    role?: RoleName;
    permissions?: MembershipPermissions;
}
export declare function update(params: StandardParams<MembershipQuery> & {
    id: ResourceId;
    value: UpdateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function revoke(params: StandardParams<MembershipQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
