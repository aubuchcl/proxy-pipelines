/**
 * @internal
 */
import * as Request from "../../common/api/request";
import { Resource, CollectionDoc, SingleDoc, ResourceId } from "../../common/structs";
import { StandardParams } from "../../common/api";
import { State as StateBase } from "../../common/structs";
/** ### `interface Release`
 * A Changelog release that when published goes to the marketing website, portal, status page
 *
 * Last Updated: 2021.03.29 — Kevin C
 */
export interface Release extends Resource {
    /**
     * @example
     * <year>.<month>.<day>.<build-number>
     * 2021.03.01.1
     * */
    version: string;
    date: string;
    /** Main title of the post for marketing website */
    title: string;
    hero?: Hero;
    changes: Change[];
    state: State;
    email_state?: EmailState;
}
/****************************** Changelog Struct Sub Types ******************************/
export interface Hero {
    /** The intro will be displayed as the main overview of the post */
    intro: string;
    image_url: string;
    image_alt: string;
}
export interface Change {
    title: string;
    description: string;
    notes: string[];
    showcase: boolean;
    type: ChangeType;
    codebase: CodebaseType;
    external_url?: string;
}
export declare type ChangeType = "added" | "fixed" | "improvement" | "security" | "removed" | "changed" | "deprecated";
export declare type CodebaseType = "platform" | "portal" | "cycleos" | "api-node-client";
/** ### `type States`
 * Possible changelog release states.
 * Possible states can be the following:
 * - `hidden`
 * - `published`
 * - `deleted`
 *
 *
 * Last Updated: 2021.03.29 — Kevin C
 */
export declare type States = "hidden" | "published" | "deleted";
export declare type State = StateBase<States>;
export declare type EmailStates = "not-sent" | "sent-internal" | "sent-external";
export declare type EmailState = StateBase<EmailStates>;
/****************************** Metas, Includes, Query, Docs ******************************/
export declare type Single = SingleDoc<Release>;
export declare type Collection = CollectionDoc<Release>;
/****************************** Params ******************************/
/** Changelog exists outside of the context of the portal, no hubid needed  */
declare type StandardParamsNoHubId = Omit<StandardParams, "hubId">;
/** Base Single Params */
declare type BSP = StandardParamsNoHubId & {
    id: ResourceId;
};
/** Base Collection Params */
declare type BCP = StandardParamsNoHubId;
declare type GetSingleParams = BSP;
declare type GetCollectionParams = BCP;
declare type CreateParams = BCP & Request.PostParams<CreateValues>;
declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
/****************************** Values ******************************/
export declare type CreateValues = {
    version: Release["version"];
    title: Release["title"];
    hero?: Hero;
    changes: Change[];
    publish: boolean;
};
export declare type UpdateValues = Partial<CreateValues>;
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
export {};
