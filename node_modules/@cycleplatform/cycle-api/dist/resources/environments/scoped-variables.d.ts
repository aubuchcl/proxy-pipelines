import { Resource, ResourceId, UserScope, State as BaseState, Events, CollectionDoc, SingleDoc } from "../../common/structs";
import { QueryParams, StandardParams } from "../../common/api";
import * as Request from "../../common/api/request";
/****************************** Scoped Variable Struct ******************************/
export interface ScopedVariable extends Resource {
    creator: UserScope;
    hub_id: ResourceId;
    environment_id: ResourceId;
    identifier: string;
    secret: Secret | null;
    scope: Scope;
    source: Source;
    state: State;
    events: Events;
}
/****************************** Variable Struct Sub Types ******************************/
export interface State extends BaseState<States> {
}
export declare type States = "live" | "deleting" | "deleted";
export declare type Source = SourceBase<"raw"> | SourceBase<"url">;
export interface SourceBase<T extends AllSourceKeys> {
    type: T;
    details: AllSources[T];
}
export interface AllSources {
    "raw": RawSource;
    "url": URLSource;
}
export declare type AllSourceKeys = keyof AllSources;
export interface RawSource {
    string: string;
}
export interface URLSource {
    url: string;
}
export interface Secret {
    encrypted: boolean;
    hint?: string;
}
export interface Scope {
    access: ScopeAccess;
    containers: ScopeContainers;
}
export interface ScopeAccess {
    env_variable: boolean;
    internal_api: boolean;
}
export interface ScopeContainers {
    global: boolean;
    ids: ResourceId[];
    identifiers: string[];
}
/****************************** Metas, Includes, Docs, Query ******************************/
export declare type Collection = CollectionDoc<ScopedVariable>;
export declare type Single = SingleDoc<ScopedVariable>;
export declare type Query = QueryParams;
/****************************** Params ******************************/
/** Base Single Params */
interface BSP extends StandardParams<Query> {
    environmentId: ResourceId;
    id: ResourceId;
}
/** Base Collection Params */
interface BCP extends StandardParams<Query> {
    environmentId: ResourceId;
}
export interface GetCollectionParams extends BCP {
}
export interface GetSingleParams extends BSP {
}
export declare type CreateParams = BCP & Request.PostParams<CreateValues>;
export declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
export interface RemoveParams extends BSP {
}
/****************************** Values ******************************/
export interface CreateValues {
    identifier: string;
    scope: Scope;
    source: Source;
    secret?: Secret;
}
export declare type UpdateValues = Partial<CreateValues>;
/****************************** Regular Functions ******************************/
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
/****************************** Task Functions ******************************/
export declare function remove(params: RemoveParams): Promise<Request.ApiResult<import("../../common/structs").CreatedTask<"delete", {}>>>;
export {};
