import * as Request from "../../common/api/request";
import { StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, Time, Events, State } from "../../common/structs";
export declare type Collection = CollectionDoc<Account>;
export declare type Single = SingleDoc<Account>;
/**
 * Information about the last login for the account.
 */
export declare type AccountEvent = "last_login";
/**
 * The different states an account can be in.
 */
export declare type AccountState = "new" | "live" | "suspending" | "purging" | "deleting" | "deleted";
export interface Account extends Resource {
    name: Name;
    email: Email;
    two_factor_auth: TwoFactorAuth | null;
    allow_support_login: boolean;
    events: Events<AccountEvent>;
    state: State<AccountState>;
}
/**
 * Publicly available information about the account
 */
export interface PublicAccount extends Resource {
    name: Name;
    email: Email;
    events: PublicAccountEvents;
}
/**
 * All combined events for public account
 */
export declare type PublicAccountEvents = Events<PublicAccountEvent>;
/**
 * Additional events for a Public account which extend on top of default events
 */
export declare type PublicAccountEvent = "last_login";
/**
 * The first and last name of the account owner
 */
export interface Name {
    /**
     * The first name of the account owner
     */
    first: string;
    /**
     * The last name of the account owner
     */
    last: string;
}
/**
 * Email information for the account
 */
export interface Email {
    /** The email address */
    address: string;
    /** A boolean representing if the email has been verified */
    verified: boolean;
    /** A Time resource showing when the email was added */
    added: Time;
}
/**
 * Two factor auth verification information
 */
export interface TwoFactorAuth {
    /**
     * A boolean representing if the account has verified with TwoFA
     */
    verified: boolean;
}
export declare function getSingle(params: StandardParams): Promise<Request.ApiResult<Single>>;
export interface UpdateParams {
    name?: {
        first?: string;
        last?: string;
    };
    allow_support_login?: boolean;
}
export declare function update(params: StandardParams & {
    value: UpdateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function remove(params: StandardParams): Promise<Request.ApiResult<import("../../common/structs").CreatedTask<"delete", {}>>>;
