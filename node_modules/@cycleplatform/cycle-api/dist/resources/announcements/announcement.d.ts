import * as Request from "../../common/api/request";
import { Resource, ResourceId, UserScope, State, CollectionDoc, SingleDoc, Events, Time } from "../../common/structs";
import { StandardParams } from "../../common/api";
import { ProviderIdentifier } from "../infrastructure/provider";
export declare type Collection = CollectionDoc<Announcement>;
export declare type Single = SingleDoc<Announcement>;
/**
 * The announcement state
 */
export declare type AnnouncementState = "live" | "deleted";
/**
 * The announcement priority
 */
export declare type AnnouncementPriority = "notice" | "low" | "medium" | "high" | "severe";
/**
 * The announcement resource
 */
export interface Announcement extends Resource {
    id: ResourceId;
    title: string;
    description: string;
    updates: Update[];
    affected_providers: ProviderIdentifier[];
    priority: AnnouncementPriority;
    events: Events<"resolved">;
    creator: UserScope;
    state: State<AnnouncementState>;
}
/**
 * Information about an update made to the announcement
 */
export interface Update {
    id: ResourceId;
    message: string;
    creator: UserScope;
    time: Time;
}
export declare function getCollection(params: StandardParams): Promise<Request.ApiResult<Collection>>;
