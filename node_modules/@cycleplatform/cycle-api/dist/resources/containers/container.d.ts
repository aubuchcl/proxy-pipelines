import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { Builds, Stack } from "../stacks";
import { Image } from "../images";
import { Zones } from "../dns";
import { CollectionDoc, Resource, SingleDoc, ResourceId, State, Events, UserScope, UserIncludes, StatefulCounts, ContainerIdentifier } from "../../common/structs";
import { IPNet } from "../infrastructure/ips";
import { InstanceState } from "./instances";
import { Service } from "./services";
import { Config, Volumes } from "./config";
import { IP } from "../infrastructure/ips";
import { ContainerRole } from "../stacks/spec/v1/container";
import { Environment } from "../environments";
export declare type Collection = CollectionDoc<Container, ContainerIncludes>;
export declare type Single = SingleDoc<Container, ContainerIncludes>;
/**
 * Possible states the container can be in
 */
export declare type ContainerState = "new" | "starting" | "running" | "stopping" | "stopped" | "reimaging" | "deleting" | "deleted";
/**
 * Possible container events
 */
export declare type ContainerEvent = "started";
export declare type ContainerQuery = QueryParams<keyof ContainerIncludes, keyof ContainerMetas, "image" | "environment" | "state">;
/** Container resource information */
export interface Container extends Resource<ContainerMetas> {
    /** The name of the container */
    name: string;
    identifier: ContainerIdentifier;
    creator: UserScope;
    environment: EnvironmentSummary;
    hub_id: ResourceId;
    image: ImageSummary;
    stack?: StackSummary;
    config: Config;
    /** The number of instances of this container */
    instances: number;
    volumes?: VolumeSummary[];
    role: ContainerRole | null;
    /** A boolean where true represents the container is stateful */
    stateful: boolean;
    requirements?: string[];
    /** Annotation notes for this contianer */
    annotations: Record<string, any> | null;
    /** A boolean where true means the container is marked deprecated */
    deprecate?: boolean;
    state: State<ContainerState> & {
        desired: ContainerState | "";
    };
    events: Events<ContainerEvent>;
}
export interface ContainerIncludes {
    creators?: UserIncludes;
    images?: Record<ResourceId, Image>;
    stack_builds?: Record<ResourceId, Builds.BuildInclude>;
    stacks?: Record<ResourceId, Stack>;
    environments?: Record<ResourceId, Environment>;
}
export interface ContainerMetas {
    instances_count?: StatefulCounts<InstanceState>;
    domain?: string;
    domains?: {
        fqdn: string;
        record: Zones.Records.Record | null;
    }[];
    ips?: IP[];
}
/**
 * Information about the stack
 */
export interface StackSummary {
    id: ResourceId;
    image: {
        id: ResourceId;
    };
    build_id: ResourceId;
    identifier: string;
}
/**
 * Information about the image used for the container
 */
export interface ImageSummary {
    id?: ResourceId;
    service: Service | null;
}
/** Information about the environment this container is deployed to  */
export interface EnvironmentSummary {
    id: ResourceId;
    /** The cluster this environment has access to resources from */
    cluster: string;
    /** The subnet used for this container */
    container_subnet: string | null;
    ipv6: IPNet | null;
    legacy: Legacy | null;
}
/**
 * Legacy networking informaiton
 */
export interface Legacy {
    subnet: number;
    ipv4: IPNet | null;
}
/**
 * A summary of information about a volume
 */
export interface VolumeSummary {
    id: string;
    hash: string;
    config: Volumes.Volume;
}
export declare function getCollection(params: StandardParams<ContainerQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<ContainerQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export interface CreateParams {
    name: string;
    environment_id: ResourceId;
    image_id: ResourceId;
    stateful: boolean;
    config: Config;
    annotations?: Record<string, any>;
    volumes: Volumes.Volume[];
}
export declare function create(params: StandardParams<ContainerQuery> & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function update(params: StandardParams<ContainerQuery> & {
    id: ResourceId;
    value: Pick<CreateParams, "name" | "annotations">;
}): Promise<Request.ApiResult<Single>>;
