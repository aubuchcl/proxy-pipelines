import * as Request from "../../../common/api/request";
import { QueryParams, StandardParams } from "../../../common/api";
import { CollectionDoc, Resource, StatefulCounts, ResourceId, IP } from "../../../common/structs";
import { InstanceState } from "../../containers/instances";
import { Server } from "../../infrastructure/servers";
export declare type ServerInstancesQuery = QueryParams<string, keyof ServerInstancesMeta>;
declare type BaseCollectionParams = StandardParams & {
    containerId: ResourceId;
};
/**
 * Information about the instances on a server
 */
export interface ServerInstances extends Resource<ServerInstancesMeta> {
    instances: StatefulCounts<InstanceState>;
    /** the server hostname */
    hostname: string;
}
export interface ServerInstancesMeta {
    primary_ip: IP;
}
export declare type Collection = CollectionDoc<ServerInstances>;
export declare function getCollection(params: BaseCollectionParams): Promise<Request.ApiResult<Collection>>;
declare type UsableServerCollection = CollectionDoc<Server>;
export declare function usable(params: BaseCollectionParams): Promise<Request.ApiResult<UsableServerCollection>>;
export {};
