import { Resource, ResourceId, UserScope, Time } from "../../../common/structs";
import { StandardParams } from "../../../common/api";
export declare type SSHConnectionDoc = {
    data: SSHConnectionResponse;
};
/**
 * SSH connection response information
 */
export interface SSHConnectionResponse {
    token: SSHToken;
    /** SSH connection response secret */
    secret: string;
    /** SSH connection response address */
    address: string;
}
/**
 * SSH token resource
 */
export interface SSHToken extends Resource {
    instance_id: ResourceId;
    container_id: ResourceId;
    hub_id: ResourceId;
    creator: UserScope;
    /** specific ssh connection events */
    events: {
        created: Time;
        used: Time;
        expires: Time;
    };
    /** A boolean where true represents the token being valid */
    valid: boolean;
}
export declare function getSSHConnection(params: StandardParams & {
    containerId: ResourceId;
    instanceId: ResourceId;
}): Promise<import("../../../common/api").ApiResult<SSHConnectionDoc>>;
export declare function expireInstanceSSHTokens(params: StandardParams & {
    containerId: ResourceId;
    instanceId: ResourceId;
}): Promise<import("../../../common/api").ApiResult<{
    data: {
        tokens: number;
    };
}>>;
