import * as Request from "../../common/api/request";
import { StandardParams } from "../../common/api";
import { ResourceId, Task, CreatedTask } from "../../common/structs";
import { Config } from "./config";
import { VolumeSummary } from "./container";
export declare type ContainerAction = "start" | "stop" | "reconfigure" | "reimage" | "scale" | "reconfigure.volumes";
export declare function start(params: StandardParams & {
    id: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, {}>>>;
export declare function stop(params: StandardParams & {
    id: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, {}>>>;
export declare function reconfigure(params: StandardParams & {
    id: ResourceId;
    value: Config;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, Config>>>;
export declare function reconfigureVolumes(params: StandardParams & {
    id: ResourceId;
    value: VolumeSummary[];
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, VolumeSummary[]>>>;
export interface ReimageParams {
    image_id: string;
    allow_incompatible?: boolean;
    overwrite_runtime_config?: boolean;
}
export declare function reimage(params: StandardParams & {
    id: ResourceId;
    value: ReimageParams;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, ReimageParams>>>;
export interface ScaleParams {
    instances: number;
}
export declare function scale(params: StandardParams & {
    id: ResourceId;
    value: ScaleParams;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, ScaleParams>>>;
export declare function remove(params: StandardParams & {
    id: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
export declare function task<K = {}>(params: StandardParams & {
    id: ResourceId;
    value: Task<ContainerAction, K>;
}): Promise<Request.ApiResult<CreatedTask<ContainerAction, K>>>;
