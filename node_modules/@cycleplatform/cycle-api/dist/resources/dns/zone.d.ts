import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, State, Events, UserScope, ResourceId, SingleDoc, UserIncludes, CreatedTask } from "../../common/structs";
import * as Records from "./records";
export * from "./tasks/zone";
export { Records };
export declare type Collection = CollectionDoc<Zone, ZoneIncludes>;
export declare type Single = SingleDoc<Zone, ZoneIncludes>;
/**
 * The possible states a DNS zone can have
 */
export declare type ZoneState = "new" | "pending" | "verifying" | "live" | "disabled" | "deleting" | "deleted";
/**
 * DNS Zone event types
 */
export declare type ZoneEvent = "last_verification" | "verified";
export declare type ZoneQuery = QueryParams<keyof ZoneIncludes>;
/**
 * Information about a DNS Zone
 */
export interface Zone extends Resource {
    hub_id: ResourceId;
    creator: UserScope;
    /** The origin for this DNS Zone */
    origin: string;
    /** A boolean, where true means this DNS Zone is set to use Cycle nameservers */
    hosted: boolean;
    state: State<ZoneState>;
    events: Events<ZoneEvent>;
}
export interface ZoneIncludes {
    creators: UserIncludes;
}
export declare function getCollection(params: StandardParams<ZoneQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<ZoneQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export interface CreateParams {
    origin: string;
    hosted: boolean;
}
export declare function create(params: StandardParams<ZoneQuery> & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export declare type UpdateParams = Pick<CreateParams, "hosted">;
export declare function update(params: StandardParams<ZoneQuery> & {
    id: ResourceId;
    value: UpdateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function remove(params: StandardParams<ZoneQuery> & {
    zoneId: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
