import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, ResourceId, State as StateBase, Events as EventsBase, UserScope, UserIncludes } from "../../common/structs";
import { Spec } from "./spec";
import { Repo } from "../images/origin";
/****************************** Stack Struct ******************************/
export interface Stack extends Resource<StackMetas> {
    name: string;
    creator: UserScope;
    hub_id: ResourceId;
    source: Source;
    state: State;
    events: Events;
}
/****************************** Stack Struct Sub Types ******************************/
export declare type State = StateBase<States>;
export declare type States = "live" | "deleting" | "deleted";
export declare type Events = EventsBase<"last_build">;
export declare type Source = SourceBase<"git-repo"> | SourceBase<"raw">;
export interface SourceBase<T extends AllSourcesKeys> {
    /**
     * Key of the origin. Can be any of the following:
     * - `git-repo`
     * - `raw`
     */
    type: T;
    details: AllSourcesMap[T];
}
export interface AllSourcesMap {
    /**
     * @see /resources/images/origin.ts for the Repo interface
     */
    "git-repo": Repo;
    raw: Spec;
}
export declare type AllSourcesKeys = keyof AllSourcesMap;
/****************************** Metas, Includes, Docs, Query ******************************/
export interface StackMetas {
    containers_count?: number;
    builds_count?: number;
}
export interface Includes {
    creators: UserIncludes;
}
export declare type Collection = CollectionDoc<Stack>;
export declare type Single = SingleDoc<Stack>;
export declare type Query = QueryParams<keyof Includes, keyof StackMetas>;
/****************************** Params ******************************/
/** Base Single Params */
declare type BSP = StandardParams<Query> & {
    id: ResourceId;
};
/** Base Collection Params */
declare type BCP = StandardParams<Query>;
export declare type GetCollectionParams = BCP;
export declare type GetSingleParams = BSP;
export declare type CreateParams = BCP & Request.PostParams<StackCreateParams>;
export declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
/****************************** Values ******************************/
export interface StackCreateParams {
    name: string;
    source: Source;
}
export declare type UpdateValues = Partial<StackCreateParams>;
/****************************** Functions ******************************/
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
export {};
