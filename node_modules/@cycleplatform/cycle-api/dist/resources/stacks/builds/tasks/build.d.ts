import * as Request from "../../../../common/api/request";
import { StandardParams } from "../../../../common/api";
import { ResourceId, Task, CreatedTask } from "../../../../common/structs";
export declare type BuildAction = "deploy" | "delete" | "generate";
export interface DeployContents {
    /** The id of the environment to update with the stack build */
    environment_id: ResourceId;
    /**
     * Optional update object used to specify specific params to update from
     * the stack build.
     */
    update?: DeployContentsUpdate;
}
/**
 * The update interface used for the `update` key inside
 * of the `DeployContents` interface
 */
export interface DeployContentsUpdate {
    /**
     * This is a map of the container names to update within the
     * environment. The map follows the format of:
     * ```
     *  {
     *    container_id: {
     *      reimage: true,
     *      reconfigure: true,
     *    }
     *  }
     * ```
     */
    containers: Record<ResourceId, DeployUpdateContainers>;
}
export interface DeployUpdateContainers {
    /**
     * If set to true the container will be reimaged with the image specified in
     * the stack build
     */
    reimage: boolean;
    /**
     * If set to true the container will use the new `config` settings specified in
     * the stack build
     */
    reconfigure: boolean;
}
export declare function deploy(params: StandardParams & {
    id: ResourceId;
    stackId: ResourceId;
    contents: DeployContents;
}): Promise<Request.ApiResult<CreatedTask<BuildAction, DeployContents>>>;
export declare function generate(params: StandardParams & {
    id: ResourceId;
    stackId: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<BuildAction, {}>>>;
export declare function remove(params: StandardParams & {
    id: ResourceId;
    stackId: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
export declare function task<K = {}>(params: StandardParams & {
    id: ResourceId;
    stackId: ResourceId;
    value: Task<BuildAction, K>;
}): Promise<Request.ApiResult<CreatedTask<BuildAction, K>>>;
