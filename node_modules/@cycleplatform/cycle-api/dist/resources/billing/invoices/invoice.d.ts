import { CollectionDoc, Resource, SingleDoc, Events, ResourceId, State, Time } from "../../../common/structs";
import * as Request from "../../../common/api/request";
import { StandardParams, QueryParams } from "../../../common/api";
import { Payment } from "./payment";
import { Credit } from "./credit";
import { LateFee } from "./latefee";
import { Summary as ServiceSummary } from "../services";
export declare type Collection = CollectionDoc<Invoice>;
export declare type Single = SingleDoc<Invoice>;
export declare type InvoiceQuery = QueryParams<"", keyof InvoiceMeta>;
export declare type InvoiceState = "new" | "billing" | "billed" | "processing" | "partially-paid" | "paid" | "refunding" | "refunded" | "crediting" | "credited" | "voiding" | "voided" | "uncollectible";
export declare type InvoiceEvent = "billed" | "paid" | "payment_attempt" | "credited" | "voided";
export interface Invoice extends Resource<InvoiceMeta> {
    hub_id: ResourceId;
    approved: boolean;
    services: ServiceSummary[];
    payments: Payment[];
    credits: Credit[];
    late_fees: LateFee[];
    charges: number;
    due?: Time;
    overdue?: Time;
    events: Events<InvoiceEvent>;
    state: State<InvoiceState>;
}
export interface InvoiceMeta {
    due?: number;
}
export declare function getCollection(params: StandardParams<InvoiceQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<InvoiceQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
