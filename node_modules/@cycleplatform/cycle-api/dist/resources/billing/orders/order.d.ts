import { CollectionDoc, Resource, SingleDoc, Events, ResourceId, UserScope, Mills, State } from "../../../common/structs";
import * as Request from "../../../common/api/request";
import { StandardParams, QueryParams } from "../../../common/api";
import { Item as ServiceItem } from "../services/item";
import { Amount } from "../amount";
import { AssociatedDiscount } from "../discounts";
import { Term, TermLength } from "../term";
import { PromoCode } from "../promocodes";
export declare type Collection = CollectionDoc<Order, OrderIncludes>;
export declare type Single = SingleDoc<Order, OrderIncludes>;
export declare type OrderState = "new" | "processed" | "deleting" | "deleted";
export declare type OrderEvent = "expires";
export declare type OrderQuery = QueryParams<keyof OrderIncludes, keyof OrderMeta>;
export interface Order extends Resource<OrderMeta> {
    hub_id: ResourceId;
    creator: UserScope;
    promo_code_id: string | null;
    term: Term;
    approved: boolean;
    items: Item[];
    total_price: Mills;
    events: Events<OrderEvent>;
    state: State<OrderState>;
}
export interface OrderIncludes {
    promo_codes: {
        [key: string]: PromoCode;
    };
}
export interface CreateParams {
    tier_plan_id?: ResourceId;
    support_plan_id?: ResourceId;
    term_length?: TermLength;
    promo_code?: string;
}
export interface OrderMeta {
    due?: {
        term: Term;
        amount: Mills;
    };
}
export interface Item {
    id: ResourceId;
    service: ServiceItem;
    description: string;
    price: Amount;
    discount?: AssociatedDiscount;
    net_price: Mills;
}
export declare function getCollection(params: StandardParams<OrderQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<OrderQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export declare function create(params: StandardParams<OrderQuery> & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function update(params: StandardParams<OrderQuery> & {
    id: ResourceId;
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
