import { CollectionDoc, Resource, SingleDoc, Events, State, UserScope, ResourceId } from "../../../common/structs";
import * as Request from "../../../common/api/request";
import { StandardParams } from "../../../common/api";
export declare type Collection = CollectionDoc<Method>;
export declare type Single = SingleDoc<Method>;
export declare type MethodState = "live" | "deleting" | "deleted";
export interface Method extends Resource {
    name: string;
    primary: boolean;
    address: Address;
    creator: UserScope;
    credit_card: CreditCard;
    state: State<MethodState>;
    events: Events;
}
export interface Address {
    country: string;
    zip: string;
}
export interface CreditCard {
    name: string;
    brand: string;
    expiration: {
        month: number;
        year: number;
    };
    last_4: string;
}
export declare function getCollection(params: StandardParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export interface CreateParams {
    name: string;
    primary: boolean;
    address: Address;
    credit_card: {
        name: string;
        number: string;
        cvv: string;
        expiration: {
            month: number;
            year: number;
        };
    };
}
export declare function create(params: StandardParams & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export interface UpdateParams {
    name?: string;
    primary?: boolean;
    address?: Address;
}
export declare function update(params: StandardParams & {
    id: ResourceId;
    value: UpdateParams;
}): Promise<Request.ApiResult<Single>>;
