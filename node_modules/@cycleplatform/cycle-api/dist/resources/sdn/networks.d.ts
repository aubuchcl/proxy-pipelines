import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { CollectionDoc, Resource, SingleDoc, ResourceId, State, Events, UserScope, UserIncludes, Time, CreatedTask } from "../../common/structs";
import { Environment } from "../environments";
export declare type Collection = CollectionDoc<Network, NetworkIncludes>;
export declare type Single = SingleDoc<Network, NetworkIncludes>;
export declare type NetworkQuery = QueryParams<keyof NetworkIncludes>;
/**
 * Types of states a network can be in
 */
export declare type NetworkState = "live" | "deleting" | "deleted";
export * from "./tasks";
/**
 * An extended resource including information about a network
 */
export interface Network extends Resource {
    /** The name of the network */
    name: string;
    /** The network identifier */
    identifier: string;
    /** The cluster this network will accept environment candidates from */
    cluster: string;
    creator: UserScope;
    hub_id: ResourceId;
    state: State<NetworkState>;
    private_network: PrivateNetwork;
    environments: NetworkEnvironment[];
    events: Events;
}
/**
 * Private network information for the network
 */
export interface PrivateNetwork {
    /** A tag used to ensure proper routing */
    vxlan_tag: number;
    /** The subnet of the private network */
    subnet: string;
    /** A number used to ensure a MAC address exists for each network */
    mac_addr_suffix: number;
    /** Network IPv6 information */
    ipv6: {
        /** The networks IPv6 base */
        ip: string;
        /** The private network CIDR */
        cidr: string;
    };
}
/**
 * Information about the ID of an environment and the time it was added to the network
 */
export interface NetworkEnvironment {
    id: ResourceId;
    added: Time;
}
export interface NetworkIncludes {
    creators: UserIncludes;
    environments: Record<ResourceId, Environment>;
}
export declare function getCollection(params: StandardParams<NetworkQuery>): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<NetworkQuery> & {
    id: ResourceId;
}): Promise<Request.ApiResult<Single>>;
export interface CreateParams {
    name: string;
    identifier: string;
    cluster: string;
    environments: ResourceId[];
}
export declare function create(params: StandardParams<NetworkQuery> & {
    value: CreateParams;
}): Promise<Request.ApiResult<Single>>;
export interface UpdateParams {
    name: string;
    identifier: string;
}
export declare function update(params: StandardParams<NetworkQuery> & {
    id: ResourceId;
    value: UpdateParams;
}): Promise<Request.ApiResult<Single>>;
export declare function remove(params: StandardParams & {
    id: ResourceId;
}): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
