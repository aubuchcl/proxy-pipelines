import * as Request from "../../../common/api/request";
import { StandardParams, QueryParams } from "../../../common/api";
import { CollectionDoc, SingleDoc, Resource, ResourceId, State, Events, Time, Includes, CreatedTask, StatefulCounts, UserScope, Cluster, Gigabytes } from "../../../common/structs";
import { Stats, Telemetry } from "../stats";
import { Locations, ProviderIdentifier, Servers as ProviderServers, Provider } from "../provider";
import { InstanceState } from "../../containers/instances";
export declare type Collection = CollectionDoc<Server, ServerIncludes>;
export declare type Single = SingleDoc<Server, ServerIncludes>;
/**
 * Filters: [tags]
 */
export declare type ServerQuery = QueryParams<keyof ServerIncludes, keyof ServerMeta>;
export { Telemetry, Stats };
export declare type Server = Resource<ServerMeta> & {
    hostname: string;
    creator: UserScope;
    hub_id: ResourceId;
    provider: ServerProvider;
    location_id: ResourceId;
    model_id: ResourceId;
    node_id: ResourceId | null;
    cluster: Cluster;
    features: Features;
    constraints: Constraints;
    state: State<ServerState>;
    events: Events & {
        provisioning: {
            started: Time;
            completed: Time;
        };
    };
};
export declare type ServerIncludes = Includes & {
    locations: Record<ResourceId, Locations.Location>;
    models: Record<ResourceId, ProviderServers.Server>;
    providers: Record<ResourceId, Provider>;
};
export declare type ServerMeta = {
    node?: NodeMetaStats;
    instances_count?: StatefulCounts<InstanceState>;
};
export declare type NodeMetaStats = {
    last_checkin: Time;
    state: State<ServerState>;
    stats: Stats;
    healthy: boolean;
    online: boolean;
};
export declare type Features = {
    sftp: boolean;
    base_volume_gb: Gigabytes | null;
};
export declare type ServerState = "new" | "live" | "provisioning" | "offline" | "deleting" | "deleted";
export declare type ServerProvider = {
    identifier: ProviderIdentifier;
    model: string;
    location: string;
    server: string;
    init_ips?: string[];
    mac_addr?: string;
    extra?: object;
};
export declare type Constraints = {
    tags: string[];
    allow: ConstraintsAllow;
};
export declare type ConstraintsAllow = {
    /** Allow pooled containers? */
    pool: boolean;
    /** Allow services? */
    services: boolean;
    /** Allow 2x overcommit? */
    overcommit: boolean;
};
declare type BaseCollectionParams = StandardParams<ServerQuery>;
declare type BaseSingleDocParams = StandardParams<ServerQuery> & {
    id: ResourceId;
};
declare type GetCollectionParams = BaseCollectionParams;
declare type GetSingleParams = BaseSingleDocParams;
declare type GetTagParams = StandardParams;
declare type GetClusterParams = StandardParams;
declare type StandardCreateParams = BaseCollectionParams & {
    value: CreateParams;
};
declare type AdvancedCreateParams = BaseCollectionParams & {
    value: AdvancedServerCreateValue;
};
declare type UpdateServerParams = BaseSingleDocParams & {
    value: UpdateParams;
};
declare type RemoveServerParams = BaseSingleDocParams;
export interface UpdateParams {
    constraints: Constraints;
}
export interface ServerCreate {
    /** "equinix-metal" | "vultr" | "aws" */
    provider: ProviderIdentifier;
    /** id of the desired server */
    model_id: string;
    /** location id of the desired server */
    location_id: string;
    /** number of desired servers of this `model_id` at `location_id` */
    quantity: number;
    /** must have equal number of hostnames as quantity */
    hostnames?: string[];
}
export interface CreateParams {
    servers: ServerCreate[];
    cluster: Cluster;
}
export interface AdvancedServerCreateValue {
    servers: AdvancedServerCreate[];
    cluster: Cluster;
}
/** */
export interface AdvancedServerCreate extends ServerCreate {
    /** an array of provision options */
    advanced: Advanced[];
}
export interface Advanced {
    provision_options?: ProvisionOptions;
}
/** */
export interface ProvisionOptions {
    /** Specific to AWS. Refers the ebs size in GB as an int*/
    aws_ebs_size?: number;
    /** If the provider you deploying servers to have a reservation id */
    reservation_id?: string;
}
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function getTags(params: GetTagParams): Promise<Request.ApiResult<{
    data: string[];
}>>;
export declare function getClusters(params: GetClusterParams): Promise<Request.ApiResult<{
    data: string[];
}>>;
export declare function create(params: StandardCreateParams): Promise<Request.ApiResult<CreatedTask<any, {}>>>;
/**
 * Advanced server create allows you to specify reservation ids or if deploying to AWS
 * allows you to specify EBS volume size under the advanced object
 *
 * @see AdvancedServerCreate struct <br/>
 *
 * @example
 * ```ts
 * servers: [
 *  {
 *    provider: "aws",
 *    model_id: "<resource_id>",
 *    location_id: "<resource_id>",
 *    quantity: 2,
 *    advanced: [
 *      {
 *        provision_options: {
 *          aws_ebs_size: 90,
 *          reservation_id: "<resource_id>",
 *        }
 *      }
 *    ]
 *  }
 * ],
 * cluster: "advanced"
 * ```
 */
export declare function advancedCreate(params: AdvancedCreateParams): Promise<Request.ApiResult<CreatedTask<any, {}>>>;
export declare function update(params: UpdateServerParams): Promise<Request.ApiResult<Single>>;
export declare function remove(params: RemoveServerParams): Promise<Request.ApiResult<CreatedTask<"delete", {}>>>;
