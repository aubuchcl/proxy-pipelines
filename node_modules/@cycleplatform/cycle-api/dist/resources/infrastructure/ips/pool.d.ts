import { Resource, ResourceId, IP as IPString, State, CollectionDoc, SingleDoc, UserIncludes, CreatedTask } from "../../../common/structs";
import { Kind } from "./kind";
import { ProviderIdentifier, Provider } from "../provider";
import { StandardParams, QueryParams } from "../../../common/api";
import { IP } from "./ip";
import { Server } from "../servers";
import { Location } from "../provider/location";
export declare type Collection = CollectionDoc<Pool, PoolIncludes>;
export declare type Single = SingleDoc<Pool, PoolIncludes>;
export declare type PoolState = "live" | "releasing" | "released";
export declare type PoolQuery = QueryParams<keyof PoolIncludes, string, "available" | "cluster">;
export interface Pool extends Resource {
    hub_id: ResourceId;
    kind: Kind;
    provider: PoolProvider;
    server_id: ResourceId;
    floating: boolean;
    location_id: ResourceId;
    ips: IPs;
    block: Block;
    state: State<PoolState>;
}
export interface IPs {
    total: number;
    available: number;
}
export interface Block {
    cidr: string;
    gateway: IPString;
    netmask: IPString;
    network: IPString;
}
export declare type ReservationIdentifier = string;
export declare type ServerIdentifier = string;
export declare type ServerAssignmentIdentifier = string;
export interface PoolProvider {
    identifier: ProviderIdentifier;
    location: string;
    reservation: ReservationIdentifier;
    server: ServerIdentifier;
    server_assignment: ServerAssignmentIdentifier;
}
export interface PoolIncludes {
    creators: UserIncludes;
    servers: Record<ResourceId, Server>;
    providers: Record<ResourceId, Provider>;
    locations: Record<ResourceId, Location>;
}
export declare function getCollection(params: StandardParams<PoolQuery>): Promise<import("../../../common/api").ApiResult<Collection>>;
export declare function getSingle(params: StandardParams<PoolQuery> & {
    id: ResourceId;
}): Promise<import("../../../common/api").ApiResult<Single>>;
export declare function remove(params: StandardParams<PoolQuery> & {
    id: ResourceId;
}): Promise<import("../../../common/api").ApiResult<CreatedTask<"delete", {}>>>;
export declare function getPoolIPs(params: StandardParams & {
    id: ResourceId;
}): Promise<import("../../../common/api").ApiResult<CollectionDoc<IP, {}, {}>>>;
