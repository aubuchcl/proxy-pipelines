import * as Request from "../../common/api/request";
import { QueryParams, StandardParams } from "../../common/api";
import { Environment } from "../environments";
import { Container } from "../containers";
import { Stack } from "../stacks";
import { Build } from "../stacks/builds";
import { Image } from "../images";
import { CollectionDoc, UserIncludes, UserScope, Events as BaseEvents, Resource, ResourceId, SingleDoc, Time, State } from "../../common/structs";
import { Step } from "./steps";
export declare type Collection = CollectionDoc<Pipeline, PipelineIncludes>;
export declare type Single = SingleDoc<Pipeline, PipelineIncludes>;
export declare type PipelineQuery = QueryParams<keyof PipelineIncludes>;
export declare type Events = BaseEvents & {
    last_run: Time;
};
export declare type PipelineState = "new" | "deleting" | "deleted";
export declare type Pipeline = Resource & {
    name: string;
    creator: UserScope;
    hub_id: ResourceId;
    disable: boolean;
    stages: Stage[];
    events: Events;
    state: State<PipelineState>;
};
export interface Stage {
    identifier: string;
    steps: Step[];
    options?: Options;
}
export interface Options {
    skip?: boolean;
}
export interface PipelineIncludes {
    name: string;
    creators: UserIncludes;
    components: Record<string, Container | Environment | Stack | Build | Image>;
}
/** Base Collection Params */
export declare type BCP = StandardParams;
/** Base Single Params */
export declare type BSP = StandardParams<PipelineQuery> & {
    id: ResourceId;
};
export declare type GetCollectionParams = BCP;
export declare type GetSingleParams = BSP;
export declare type CreateParams = BCP & Request.PostParams<CreateValues>;
export declare type UpdateParams = BSP & Request.PatchParams<UpdateValues>;
export interface CreateValues {
    name: string;
    stages?: Stage[];
    disable?: boolean;
}
export declare type UpdateValues = Partial<CreateValues>;
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export declare function getSingle(params: GetSingleParams): Promise<Request.ApiResult<Single>>;
export declare function create(params: CreateParams): Promise<Request.ApiResult<Single>>;
export declare function update(params: UpdateParams): Promise<Request.ApiResult<Single>>;
