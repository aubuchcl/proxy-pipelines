import { Resource, UserScope, ResourceId, State as StateBase, Time, CollectionDoc, CustomEvents, UserIncludes } from "../../../common/structs";
import { ErrorResource, StandardParams, QueryParams } from "../../../common/api";
import { AllActionKeys } from "../steps";
import * as Request from "../../../common/api/request";
import { TriggerKey } from "../trigger-keys";
/****************************** Run Struct ******************************/
export declare type Run = Resource & {
    creator: UserScope;
    hub_id: ResourceId;
    pipeline_id: ResourceId;
    stages: Stage[];
    state: State;
    events: Events;
};
/****************************** Run Struct Sub Types ******************************/
export declare type Events = CustomEvents<"started" | "queued" | "finished">;
export declare type State = StateBase<States>;
export declare type States = "new" | "queued" | "running" | "deleting" | "deleted";
/**
 * This is stage struct is specific to runs. If you are looking for
 * the stage struct within the root pipeline object, use `Pipelines.Stage`
 */
export declare type Stage = {
    identifier: string;
    events: TimingEvents;
    steps: Step[];
};
export declare type TimingEvents = {
    started: Time;
    finished: Time;
};
/**
 * This is step struct is specific to runs. If you are looking for
 * the step for a step within a pipeline stage, use `Pipelines.Step`
 */
export declare type Step = {
    identifier?: string;
    events: TimingEvents;
    action: AllActionKeys;
    success: boolean;
    error?: ErrorResource;
};
/****************************** Metas, Includes, Docs, Query ******************************/
export declare type PipelineRunQuery = QueryParams<keyof PipelineRunIncludes>;
export declare type Collection = CollectionDoc<Run, PipelineRunIncludes>;
export interface PipelineRunIncludes {
    creators: UserIncludes;
    keys: Record<ResourceId, TriggerKey>;
}
/****************************** Params ******************************/
/** Base Collection Params */
declare type BCP = StandardParams<PipelineRunQuery> & {
    pipelineId: ResourceId;
};
export declare type GetCollectionParams = BCP;
/****************************** Functions ******************************/
export declare function getCollection(params: GetCollectionParams): Promise<Request.ApiResult<Collection>>;
export {};
